/**
 * artTemplate - Template Engine
 * https://github.com/aui/artTemplate
 */
var template = function (c, g) { return template["object" === typeof g ? "render" : "compile"].apply(template, arguments) }; (function (c, g) { c.version = "1.0"; c.openTag = "<%"; c.closeTag = "%>"; c.parser = null; c.render = function (a, b) { var d; d = l[a]; void 0 === d && !q && ((d = document.getElementById(a)) && c.compile(a, d.value || d.innerHTML), d = l[a]); return void 0 === d ? i({ id: a, name: "Render Error", message: "Not Cache" }) : d(b) }; c.compile = function (a, b, d) { function f(d) { try { return g.call(n, d) } catch (e) { if (!r) return c.compile(a, b, !0)(d); e.id = a || b; e.name = "Render Error"; e.source = b; return i(e) } } var r = d; "string" !== typeof b && (r = b, b = a, a = null); try { var g = v(b, r) } catch (j) { return j.id = a, j.name = "Syntax Error", i(j) } f.toString = function () { return g.toString() }; a && (l[a] = f); return f }; c.helper = function (a, b) { if (void 0 === b) return n[a]; n[a] = b }; var l = {}, n = {}, o = "".trim, q = o && !g.document, v = function (a, b) { function d(a) { m += a.split(/\n/).length - 1; a = a.replace(/('|"|\\)/g, "\\$1").replace(/\r/g, "\\r").replace(/\n/g, "\\n"); a = k[1] + "'" + a + "'" + k[2]; return a + "\n" } function f(a) { var d = m; j ? a = j(a) : b && (a = a.replace(/\n/g, function () { m++; return "$line=" + m + ";" })); 0 === a.indexOf("=") && (a = k[1] + (o ? "$getValue(" : "") + a.substring(1).replace(/[\s;]*$/, "") + (o ? ")" : "") + k[2]); b && (a = "$line=" + d + ";" + a); g(a); return a + "\n" } function g(a) { a = a.replace(/\/\*.*?\*\/|'[^']*'|"[^"]*"|\.[\$\w]+/g, ""); p.call(a.split(/[^\$\w\d]+/), function (a) { if (/^(this|\$helpers)$/.test(a)) throw { message: 'Prohibit the use of the "' + a + '"' }; a && !t[a] && !/^\d/.test(a) && !i[a] && (s += a + "=" + ("include" === a ? q : n[a] ? "$helpers." + a : "$data." + a) + ",", i[a] = !0) }) } var l = c.closeTag, j = c.parser, h, e = "", m = 1, i = { $out: !0, $line: !0 }, s = "var $helpers=this," + (b ? "$line=0," : ""), k = o ? ["$out='';", "$out+=", ";", "$out"] : ["$out=[];", "$out.push(", ");", "$out.join('')"], q = "function(id,data){if(data===undefined){data=$data}return $helpers.$render(id,data)}"; p.call(a.split(c.openTag), function (a) { var a = a.split(l), b = a[0], c = a[1]; 1 === a.length ? e += d(b) : (e += f(b), c && (e += d(c))) }); h = e; b && (h = "try{" + h + "}catch(e){e.line=$line;throw e}"); h = s + k[0] + h + "return " + k[3]; try { return new Function("$data", h) } catch (u) { throw u.temp = "function anonymous($data) {" + h + "}", u; } }, i = function (a) { var b = "[template]:\n" + a.id + "\n\n[name]:\n" + a.name; a.message && (b += "\n\n[message]:\n" + a.message); a.line && (b += "\n\n[line]:\n" + a.line, b += "\n\n[source]:\n" + a.source.split(/\n/)[a.line - 1].replace(/^[\s\t]+/, "")); a.temp && (b += "\n\n[temp]:\n" + a.temp); g.console && console.error(b); return "{Template Error}" }, p = Array.prototype.forEach || function (a, b) { for (var c = this.length >>> 0, f = 0; f < c; f++) f in this && a.call(b, this[f], f, this) }, t = {}; p.call("break,case,catch,continue,debugger,default,delete,do,else,false,finally,for,function,if,in,instanceof,new,null,return,switch,this,throw,true,try,typeof,var,void,while,with,abstract,boolean,byte,char,class,const,double,enum,export,extends,final,float,goto,implements,import,int,interface,long,native,package,private,protected,public,short,static,super,synchronized,throws,transient,volatile,arguments,let,yield".split(","), function (a) { t[a] = !0 }); c.helper("$forEach", p); c.helper("$render", c.render); c.helper("$getValue", function (a) { return void 0 === a ? "" : a }) })(template, this); if ("undefined" !== typeof module && module.exports) module.exports = template;