<!DOCTYPE html>
<html>

<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1">
	<meta name="description" content="Add multi-touch gestures to your webpage.">
	<title>VJ test</title>
	<script src="../../../2.0/ref/jquery-1.8.0.min.js" type="text/javascript"></script>
	<script src="../../../2.0/VJ.js" type="text/javascript"></script>
	<script src="../../../config.js" type="text/javascript"></script>
	<script src="../../../ni.js" type="text/javascript"></script>
	<style type="text/css">
		.animate {
			transition: all 0.3s;
			-webkit-animation-timing-function: ease;
		}
	</style>
	<script type="text/javascript">
		if(0){
			$(function(){
				VJ.include('three.min.js');
				var scene = new THREE.Scene();
				console.log(window.innerWidth/window.innerHeight);
				var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 1, 10000);
				camera.lookAt({x:0,y:0,z:0});
				camera.position.z = 500;
				var renderer = new THREE.WebGLRenderer();
				renderer.setSize(window.innerWidth, window.innerHeight);
				document.body.appendChild(renderer.domElement);
				console.log(renderer);
				var geometry = new THREE.CubeGeometry(100,100,100);
				var mats = [];
				for(var i=0;i<6;i++) {
					var map = THREE.ImageUtils.loadTexture('720/img'+i+'.jpg');
					map.wrapS = map.wrapT = THREE.ClampToEdgeWrapping;
					mats.push(new THREE.MeshBasicMaterial({color:0xffffff,opacity:0.5,map:map,side:THREE.DoubleSide}));
				}
				var material = new THREE.MeshFaceMaterial(mats);
				var cube = new THREE.Mesh(geometry, material); 
				cube.position.set(-200,0,0);				
				cube.rotation.set(1,0,0);
				scene.add(cube);
				function render() {
					requestAnimationFrame(render);
					//cube.rotation.x += 0.1;
					cube.rotation.y += 0.1;
					//cube.rotation.z += 0.1;
					renderer.render(scene, camera);
				}
				var geometry2 = new THREE.CubeGeometry(100,100,100);
				var material2 = new THREE.MeshBasicMaterial({color: 0x0000ff});
				var cube2 = new THREE.Mesh(geometry2, material2);
				cube2.position.set(200,0,0);				
				cube2.rotation.set(1,0,0);
				scene.add(cube2);				
				function render2() {
					requestAnimationFrame(render2);
					//cube2.rotation.x += 0.1;
					cube2.rotation.y -= 0.1;
					//cube2.rotation.z += 0.1;
					renderer.render(scene, camera);
				}
				VJ.once(function(){					
					render();	
					render2();
				},1000);				
				console.log(scene);
			});
		}
		else	
		(function(V,M,$,cm,W){
			new function(){
				var _=this,__={};
				{
					cm = V.merge(cm,{
						Middler:{
							'VESH.view':{											
								tmovie:{path:'../three/three.min.js;../three/tc.js',params:['',{data:{stats:false}}]},
								tobject:{path:'../three/three.min.js;../three/tobj.js',params:["",{data:{debug:true}}]}
							}
						}
					});
					V.isDebug = true;
					V.inherit.apply(_,[M.Page,[cm,{
						movie:{
							data:{
								desc:true,
								camera:{type1:'orthographic',left:200,right:200,top:200,bottom:200,angle:90,near:0.1,far:20000,position:{z:0},look:{x:0,y:0,z:Math.PI}},
								lights:[{type:'Ambient',color:{rgb:0xffffff,opacity:1},position:{x:100,y:100,z:200}},{type:'Point',color:{rgb:0xaaaaaa,opacity:1},position:{x:0,y:0,z:300}}],
								render:{type:'webgl'}
							},
							onLoad:function(D,I){
								V.registEvent('test.resize',function(size){
									I.update({size:size});
								});
								var start = 0;
								I.update({
									play:function(D,I){
										start+=0.1;
										if(D.camera.look)
											I.update({ss:start,camera:{look:{x:Math.cos(start*2*Math.PI/360),z:Math.sin(start*2*Math.PI/360),y:D.camera.look.y}}});
								}});
							},
							onMouseDown:function(D,I){
								I.update({down:true,play:false,start:D.D2Position});
							},
							onMouseUp:function(D,I){
								I.update({down:false,play:true,start:false});
							},
							onMouseMove:function(D,I){
								if(D.down && D.start){
									var xdis = Math.abs(D.D2Position.x-D.start.x);
									var ydis = Math.abs(D.D2Position.y-D.start.y);
																		
									var ystep = ydis>xdis?Math.max(Math.min(Math.PI,D.camera.look.y+(D.D2Position.y>D.start.y?+0.02:-0.02)),-Math.PI):D.camera.look.y;
									var xstep = ydis<xdis?(D.D2Position.x>D.start.x?0.8:-0.8):0;
									var start = D.ss+xstep;
									console.log(ystep);
									if(D.camera.look)
											I.update({ss:start,start:D.D2Position,camera:{look:{x:Math.cos(start*2*Math.PI/360),z:Math.sin(start*2*Math.PI/360),y:ystep}}});
								}
							}
						},
						object:{							
							data:{debug:false,side:2,type:'cube',style:'basic',image:['720/img0.jpg','720/img2.jpg','720/img4.jpg','720/img5.jpg','720/img3.jpg','720/img1.jpg'],width:1000,height:1000,deepth:1000,color:{rgb:0xffffff,opacity:1},size:'mirror'},
							onLoad:function(D,I){								
								var start = 0;
								I.update({play1:function(D,I){start+=2;
									I.update({rotate:{x1:D.rotate.x+=1,y:D.rotate.y-=0.4,z1:D.rotate.z+=1}});
								}});
							},
							onMouseDown:function(D,I){I.update({play:false});},
							onMouseUp:function(D,I){I.update({play:true});},
						},
						object1:{							
							data:{debug:false,side:2,type:'cube',style:'phong',image2:'720/img0.jpg',image:['720/img0.jpg','720/img1.jpg','720/img2.jpg','720/img3.jpg','720/img4.jpg','720/img5.jpg'],width:300,height:300,deepth:300,color:{rgb:0xffffff,opacity:0.5},position:{x:200},rotate:{y:90}},
							onLoad:function(D,I){								
								var start = 0;
								I.update({play:function(D,I){start+=2;
									I.update({rotate:{x1:D.rotate.x+=1,y:D.rotate.y-=2,z1:D.rotate.z+=1},position:{x:300*Math.cos(start*2*Math.PI/360)+500,z:300*Math.sin(start*2*Math.PI/360)-300}});
								}});
							},
							onHover:function(D,I){console.log('object hover:'+D.hover);}
						},
						object2:{							
							data:{debug:false,isStop:false,type:'cylinder',style:'phong',radius:[200,250],height:80,color:{rgb:0xff0000,opacity:1},position:{x:-600,y:0,z:-100}},
							onLoad:function(D,I){								
								var start = 0;
								I.update({play:function(D,I){
									I.update({rotate:{x:D.rotate.x+=2,y1:D.rotate.y+=2,z1:D.rotate.z+=2}});
									return D.isStop;
								}});
							},
							onHover:function(D,I){
								console.log('object2 hover:'+D.hover);
								if(D.hover){									
									I.update({play:false});
								}else{
									I.update({play:true});
								}
							},
							onClick:function(D,I){console.log('object2 click:');},
							onMouseUp:function(D,I){console.log('object2 mouseup:');},
							onMouseDown:function(D,I){console.log('object2 mousedown:');}
						},
						object3:{							
							data:{debug:false,type:'line',style:'line',color:[{rgb:0xff0000,opacity:1},{rgb:0xffaa00,opacity:1}],position:{x:0,y:0,z:0},points:[{x:-100,y:-100,z:0},{x:100,y:100,z:0}],width:5},
							onLoad:function(D,I){
								I.update({play:function(D,I){
									I.update({rotate:{x1:D.rotate.x+=6,y1:D.rotate.y+=6,z:D.rotate.z+=6}});
								}});
							},
							onHover:function(D,I){console.log('object3 hover:'+D.hover);}
						},
						page:{
							data:{
								title:'测试页面aa'
							},
							onStart:function(D,I){
								//V.tryC(function(){I.v.middler.getObjectByAppName('VESH.view','map')});								
								//V.callEvent('test.resize',[{width:V.userAgent.width,height:V.userAgent.height}]);
							},
							onSize:function(D,I){
								V.callEvent('test.resize',[{width:D.width,height:D.height}]);
							}			
						}
					}]]);
				}
			};
		})(VJ,VJ.viewmodel,jQuery,window.top.config,VJ.view);
	</script>
</head>

<body>
	<div style="width:100%;height:100%;position:absolute;top:0px;left:0px;display:block;">
		<div id="movie" _="type:'tmovie'">
			<tobject id="object" _=""></tobject>
		</div>
	</div>
</body>

</html>