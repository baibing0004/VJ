{"version":3,"sources":["../../../src/coooders/collection/arraystream.js"],"names":["ArrayStream","size","allowHalfOpen","readableObjectMode","writableObjectMode","_","max","buf","length","push","Buffer","from","splice","chunk","encoding","callback","_buf","concat","toJSON","data","Error","chunks","each","v","then","Duplex"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;;;AACA;;;AAGO,IAAMA;AAAA;;AACT,2BAAsB;AAAA,YAAVC,IAAU,uEAAH,CAAG;AAAA;;AAAA,oJACZ,EAAEC,eAAe,IAAjB,EAAuBC,oBAAoB,IAA3C,EAAiDC,oBAAoB,IAArE,EADY;;AAElB,YAAMC,SAAN;AACAA,UAAEC,GAAF,GAAQL,IAAR;AACAI,UAAEE,GAAF,GAAQ,EAAR;AAJkB;AAKrB;;AANQ;AAAA;AAAA,8BAOHC,MAPG,EAOK;AACV,gBAAMH,IAAI,IAAV;AACA,gBAAIA,EAAEE,GAAF,CAAMC,MAAV,EAAkB;AACdH,kBAAEI,IAAF,CAAOC,OAAOC,IAAP,CAAYN,EAAEE,GAAF,CAAMK,MAAN,CAAa,CAAb,EAAgBJ,SAASA,MAAT,GAAkB,CAAlC,CAAZ,CAAP;AACH,aAFD,MAEOH,EAAEI,IAAF,CAAO,IAAP;AACV;AAZQ;AAAA;AAAA,+BAaFI,KAbE,EAaKC,QAbL,EAaeC,QAbf,EAayB;AAC9B,gBAAMV,IAAI,IAAV;AACA,gBAAIW,OAAOX,EAAEE,GAAb;AACAF,cAAEE,GAAF,GAAQS,KAAKC,MAAL,CAAYJ,MAAMK,MAAN,GAAeL,MAAMK,MAAN,GAAeC,IAA9B,GAAqCN,KAAjD,CAAR;AACAG,mBAAO,IAAP;AACAD,qBAAUV,EAAEC,GAAF,GAAQ,CAAR,IAAaD,EAAEE,GAAF,CAAMC,MAAN,GAAeH,EAAEC,GAA/B,GAAsC,IAAIc,KAAJ,CAAU,uBAAuBf,EAAEC,GAAnC,CAAtC,GAAgF,IAAzF;AACH;AAnBQ;AAAA;AAAA,gCAoBDe,MApBC,EAoBON,QApBP,EAoBiB;AACtB,gBAAMV,IAAI,IAAV;AACA,2BAAEiB,IAAF,CAAOD,MAAP,EAAe,aAAK;AAChB,oBAAIL,OAAOX,EAAEE,GAAb;AACAF,kBAAEE,GAAF,GAAQS,KAAKC,MAAL,CAAYM,EAAEV,KAAF,CAAQK,MAAR,GAAiBK,EAAEV,KAAF,CAAQK,MAAR,GAAiBC,IAAlC,GAAyCI,EAAEV,KAAvD,CAAR;AACAG,qBAAKJ,MAAL,CAAY,CAAZ,EAAeI,KAAKR,MAApB;AACAQ,uBAAO,IAAP;AACA,uBAAO,KAAP;AACH,aAND,EAMG,IANH,EAMSQ,IANT,CAMc;AAAA,uBAAMT,SAAUV,EAAEC,GAAF,GAAQ,CAAR,IAAaD,EAAEE,GAAF,CAAMC,MAAN,GAAeH,EAAEC,GAA/B,GAAsC,IAAIc,KAAJ,CAAU,uBAAuBf,EAAEC,GAAnC,CAAtC,GAAgF,IAAzF,CAAN;AAAA,aANd;AAOH;AA7BQ;AAAA;AAAA,kCA8BC;AACN,gBAAID,IAAI,IAAR;AACA,mBAAOA,EAAEE,GAAF,CAAMK,MAAN,CAAa,CAAb,EAAgBP,EAAEE,GAAF,CAAMC,MAAtB,CAAP;AACH;AAjCQ;AAAA;AAAA,EAA4B,iBAAEiB,MAA9B,CAAN;kBAmCQ,EAAEzB,wBAAF,E","file":"arraystream.js","sourcesContent":["import S from 'stream';\nimport { isArray, isBoolean } from 'util';\nimport V from '../common/tool';\n/**\n * 内存流提供Stream写入与读取的一切方法，但是仅仅限于写入居多的toArray方法\n */\nexport const ArrayStream = class extends S.Duplex {\n    constructor(size = 0) {\n        super({ allowHalfOpen: true, readableObjectMode: true, writableObjectMode: true });\n        const _ = this;\n        _.max = size;\n        _.buf = [];\n    }\n    _read(length) {\n        const _ = this;\n        if (_.buf.length) {\n            _.push(Buffer.from(_.buf.splice(0, length ? length : 1)));\n        } else _.push(null);\n    }\n    _write(chunk, encoding, callback) {\n        const _ = this;\n        let _buf = _.buf;\n        _.buf = _buf.concat(chunk.toJSON ? chunk.toJSON().data : chunk);\n        _buf = null;\n        callback((_.max > 0 && _.buf.length > _.max) ? new Error('limit out of size:' + _.max) : null);\n    }\n    _writev(chunks, callback) {\n        const _ = this;\n        V.each(chunks, v => {\n            let _buf = _.buf;\n            _.buf = _buf.concat(v.chunk.toJSON ? v.chunk.toJSON().data : v.chunk);\n            _buf.splice(0, _buf.length);\n            _buf = null;\n            return false;\n        }, true).then(() => callback((_.max > 0 && _.buf.length > _.max) ? new Error('limit out of size:' + _.max) : null));\n    };\n    toArray() {\n        let _ = this;\n        return _.buf.splice(0, _.buf.length);\n    };\n}\nexport default { ArrayStream }"]}