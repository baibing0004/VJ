{"version":3,"sources":["../../../src/coooders/db/ni.js"],"names":["pri","pris","NiDataConfig","that","mergeValue","param","type","value","parseInt","split","Date","parse","parseFloat","_","__","val","ret","k","v","isStandard","out","vals","forEach","i","standard","merge","apply","args","args2","Config","instance","NiDataConfigConvert","data","toLowerCase","params","ConfigConvert","NiTemplate","res","cm","transaction","lstCmd","KEY","result","NiDataResult","addCommand","name","cmd","getConfigValue","command","template","getValue","push","key","jsonp","dbtype","execute","_cms","length","getDBConnection","conn","getDBCommand","connection","each","add","isArray","commit","showException","backDBConnection","excute","clear","NiTemplateManager","middler","appName","tempName","func","temp","getObjectByAppName","setObjectByAppName","Error","getCommand","hasData","undefined","kv","datas","id","get","NiDataResource","factory","fac","createDBConnection","setParams","isOpen","open","createDBCommand","NiInstanceDataResource","NiStaticDataResource","NiPoolDataResource","size","pool","dispose","close","setValue","NiDataFactory","NiDataConnection","NiDataCommand","paras","invoke","NiTemplateDecorator","cacheres","lstCmd2","_addCommand","_execute","index","cacheKey","hash","toJsonString","_nicmd","_conn","_cmd","json","cacheValue","_data","NiTemplateCacheDecorator","cachecommand","setcommand","NiMultiTemplateDecorator","relcm","ni","_cm2","NiMySQLDataFactory","idic","MySQLConnection","cmds","p","toList","getType","callback","query","prepare","filter","serverStatus","indexOf","_v","k2","r","console","log","message","multipleStatements","connectionLimit","replace","trim","e","sql","values","timeout","beginTransaction","rollback","hash2","createPool","getonconn","getConnection","_key","_ison","on","err","code","releaseConnection","end","tryC","NiMsSQLDataFactory","MsSQLConnection","source","request","Request","multiple","NVarChar","output","input","scale","affected","call","rowsAffected","recordsets","trans","Transaction","begin","ConnectionPool","stack","connect","NiObjectDataFactory","isValid","ObjectConnection","obj","callback2","app","NiMemSQLDataFactory","parser","MemSQLConnection","_this","queryList","getKey","Method","datetime","DateTimeParam","MethodParam","v2","set","del","dt","touch","Table","IDs","sb","append","Params","hosts","NiMongoSQLDataFactory","MongoSQLConnection","_id","wheres","WhereParam","collection","find","toArray","insert","safe","update","remove","com","MongoClient","NiRedisSqlDataFactory2","RedisSqlConnection","host","port","password","method","db","getValues","keys","transprefunc","transfunc","debug","table","key1","jsdat","startsWith","ret2","datetime2","values2","key2","value2","majorkey2","incrby","expire","majorkey","setnx","watch","hgetall","d","ID","hlen","count","hget","Object","hmget","values3","value3","hsetnx","hmset","hincrby","hdel","limita","LimitParam","limitb","calls","zcount","keyID","orders","OrderParam","scorea","scoreb","node","_node","pop","score","zscore","call2","then","catch","zrange","zrangebyscore","zrevrange","zrevrangebyscore","zrank","zrevrank","zpopmin","zpopmax","zadd","zincrby","zrem","llen","limit","whileC","lpop","rpush","lrem","dbs","test","hngcrby","ngcrby","multi","pipeline","exec","rets","family","redisargs","defineCommand","numberOfKeys","lua","NiRedisSqlDataFactory","NiUrlDataFactory","regex","RegExp","UrlConnection","thats","stringify","post","postJson","h","random","text","NiSoapDataFactory","SoapConnection","wcfurl","wcfmethod","wcfargs","createClient","client","NiMailDataFactory","MailConnection","send","success","server","ssl","NiElasticSearchDataFactory","ElasticSearchConnection","create","body","title","Client","release"],"mappings":"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","file":"ni.js","sourcesContent":["import V from '../common/tool';\nimport C from '../io/config';\nimport {\n    Pool\n} from '../collection/pool';\nimport M from 'mysql';\nimport M2 from 'mssql';\nimport Mem from 'memcached';\nimport Mon from 'mongodb';\nimport N from '../net/tool';\nimport Q from 'querystring';\nimport Mail from 'emailjs';\nimport es from 'elasticsearch';\nimport Redis from 'ioredis';\nimport S from 'soap';\nconst pri = V.pris();\n//import nosql from './nosql';\n/**\n * //依托Middler框架完成对数据类型文件的处理，包括mysql mongodb sqlserver memcache ObjectDB(即自定义function) WebSocket等等数据源类型的操作\n\t//实现对如下格式文件的处理\n\t\tNi:{\n\t\t\tajaxtest2:{command:'http://localhost/VESHTest/Module/help/test.tjsonp?_n=recorder',dbtype:'tjson',params:{limit:11},template:'template1'},\n\t\t\tajaxtest1:{command:'http://localhost/KDAPI/Module/GetOrderTrackItems.tjsonp?_n=Order',dbtype:'tjson',params:{},template:'template1'},\n\t\t\t'ajaxtest1.Cache':{command:function(res,params){return res[params.cacheKey];不写即使用默认值},dbtype:'json',params:{},template:'template2'},\n\t\t\t'ajaxtest1.Set':{command:function(res,params){res[params.cacheKey] = params.cacheValue;不写即使用默认值},dbtype:'json',params:{timeout1:{interval:'s',number:50}},template:'template2'},\n\t\t\tsqlinsert:{command:'create table if not exists table(name Text,message text,time integer);insert into table values(?,?,?);',dbtype:'json',params:{data:[]},template:'sqltemp'},\n\t\t\tsqlselect:{command:'select * from table;',dbtype:'json',params:{data:[]},template:'sqltemp'},\n\t\t\tsqlselect2:{command:'select * from table where name=?',dbtype:'json',params:{data:[]},template:'sqltemp'},\t\t\n\t\t\tName1:{command:'',params:{},dbtype:'json/tjson',template:'仅在Middler中调用NiMultiTemplateDecorator时启用'},\n\t\t\twstest1: { command: 'abc.json', dbtype: 'json', params: {}, template: 'ws' },\n\t\t\twstest2: { command: 'bcd.json?_n=MT, dbtype: 'json', params: {}, template: 'ws' }\n\t\t}\nlet t = middler.getObjectByAppName('Ni','templatename');\nlet res = t.execute('aaa.GetProductDetail',{ProductID:111},function(result){\n\tlet res = result.last();\n});\nmiddler.setObjectByAppName('Ni','templatename',t);\n//分离NiDataConfig完成Ni格式文件处理\n//分离NiDataConfigConvert完成对Ni格式转成Config\n//用于处理 Ni文件定义\n*/\nexport const NiDataConfig = class extends C.Config {\n    constructor() {\n        super();\n        const that = this;\n        const {\n            _,\n            __\n        } = pri(that, {\n            mergeValue: param => {\n                switch (param.type) {\n                    case 'Int':\n                    case 'int':\n                    case 'int32':\n                    case 'int16':\n                    case 'int64':\n                        param.value = param.value ? parseInt(param.value) : 0;\n                        break;\n                    case 'DateTime':\n                    case 'Date':\n                    case 'datetime':\n                        param.value = param.value ? (param.value.split ? Date.parse(param.value) : new Date(param.value)) : new Date(0);\n                        break;\n                    case 'float':\n                    case 'single':\n                    case 'double':\n                        param.value = param.value ? parseFloat(param.value) : 0;\n                        break;\n                    case 'string':\n                    case 'String':\n                        param.value = param.value == null ? null : (param.value + '');\n                        break;\n                }\n            }\n        });\n    }\n    standard(val) {\n        let ret = {};\n        for (let k in val) {\n            let v = val[k] || {\n                value: val[k],\n                isStandard: true\n            };\n            ret[k] = v.isStandard ? v : (v.type || (v.out && v.out != '')) ? (function() {\n                v.isStandard = true;\n                return v;\n            })() : {\n                value: v,\n                isStandard: true\n            };\n        }\n        return ret;\n    }\n    merge(...vals) {\n        const {\n            _,\n            __\n        } = pri(this);\n        //默认设置最后一个参数为值，其它参数为标准化数据 key:{value:val,type:'',out:false,isStandard:true}\n        vals.forEach((v, i) => vals[i] = _.standard(v));\n        vals = V.merge.apply(null, vals);\n        for (let k in vals)\n            __.mergeValue(vals[k]);\n        return vals;\n    }\n    getValue(...args) {\n        const {\n            _,\n            __\n        } = pri(this);\n        const ret = super.getValue.apply(_, args); //这里借用VJ的方法将ni.js中定义的V.merge方法改为参数标准化方法\n        if (ret) {\n            ret.merge = ret.merge || function(...args2) {\n                return _.merge.apply(_, args2);\n            }\n        }\n        return ret;\n    }\n};\nNiDataConfig.instance = new NiDataConfig();\nexport const NiDataConfigConvert = class extends C.ConfigConvert {\n    constructor() {\n        super();\n        pri(this);\n    }\n    toConfig(val) {\n        const ret = new NiDataConfig();\n        if (val) {\n            if (typeof(val) == 'object') {\n                for (let k in val) {\n                    let v = val[k];\n                    if (v) ret.data[k.toLowerCase()] = V.merge({\n                        params: {}\n                    }, v);\n                }\n            }\n        }\n        return ret;\n    }\n}\nexport const NiTemplate = class {\n    constructor(res, cm) {\n        const that = this;\n        this.transaction = false;\n        const {\n            _,\n            __\n        } = pri(that, {\n            lstCmd: [],\n            KEY: ('Ni'),\n            result: new NiDataResult(),\n            res,\n            cm,\n            addCommand: (name, params) => {\n                const {\n                    _,\n                    __\n                } = pri(that);\n                const cmd = __.cm.getConfigValue(__.KEY, name.toLowerCase());\n                let command = name;\n                let template = \"\";\n                if (cmd) {\n                    command = cmd.command || name;\n                    params = cmd.merge(cmd.params, V.getValue(params, {}));\n                    template = cmd.template;\n                } else params = NiDataConfig.instance.merge({}, params);\n                __.lstCmd.push({\n                    name: command,\n                    params: params,\n                    template: template,\n                    key: name,\n                    jsonp: (cmd && cmd.jsonp) ? cmd.jsonp : false,\n                    dbtype: (cmd && cmd.dbtype) ? cmd.dbtype : \"tjson\"\n                });\n            },\n            execute: async() => {\n                const {\n                    _,\n                    __\n                } = pri(that);\n                let _cms = __.lstCmd;\n                __.lstCmd = [];\n                if (_cms.length > 0) {\n                    let conn = await __.res.getDBConnection();\n                    try {\n                        if (_cms.length > 1) conn.transaction = true;\n                        let cmd = __.res.getDBCommand();\n                        cmd.connection = conn;\n                        //执行过程存在严重漏洞 考虑 直接执行与非直接执行的异同\n                        await V.each(_cms, async v => {\n                            cmd.command = v.name;\n                            cmd.params = v.params;\n                            cmd.dbtype = v.dbtype;\n                            cmd.jsonp = v.jsonp;\n                            //需要知晓connection的执行原理\n                            if (conn.transaction) {\n                                cmd.execute();\n                            } else {\n                                const data = await cmd.execute();\n                                __.result.add((!data || (V.isArray(data) && data.length == 0)) ? false : data, v.key);\n                            }\n                            return false;\n                        }, true);\n                        if (conn.transaction && conn.commit)\n                            await conn.commit();\n                        return true;\n                    } catch (err) {\n                        V.showException('commit ', err);\n                        throw err;\n                    } finally {\n                        __.res.backDBConnection(conn);\n                    }\n                } else {\n                    V.showException('不能调用空的命令对象!');\n                }\n            },\n            excute: async() => await __.execute()\n        });\n    }\n    async execute(name, params = {}) {\n        const {\n            _,\n            __\n        } = pri(this);\n        //__.addCommand(name, V.json(V.toJsonString(params)));\n        //__.addCommand(name, V.merge({},params));\n        __.addCommand(name, params);\n        if (!_.transaction) {\n            __.result.clear();\n            await __.execute();\n        }\n        return __.result;\n    }\n    async excute() {\n        return await this.execute.apply(this, arguments);\n    }\n    async commit() {\n        const {\n            _,\n            __\n        } = pri(this);\n        __.result.clear();\n        await __.execute();\n        return __.result;\n    }\n    dispose() {\n        const {\n            _,\n            __\n        } = pri();\n        for (let i in __) {\n            //if (__[i].dispose) try { __[i].dispose() } catch (e) {}\n            delete __[i];\n        }\n    }\n    getCommand(name = '') {\n        const {\n            __\n        } = pri(this);\n        return V.merge({}, __.cm.getConfigValue(__.KEY, name.toLowerCase()) || {});\n    }\n};\nexport const NiTemplateManager = class {\n    constructor(middler, appName = 'Ni') {\n        pri(this, {\n            middler: middler,\n            KEY: appName\n        });\n    }\n    async execute(tempName, name, params, func) {\n        const {\n            _,\n            __\n        } = pri(this);\n        let temp = __.middler.getObjectByAppName(__.KEY, tempName);\n        if (temp) {\n            let result = await temp.execute(name, params);\n            __.middler.setObjectByAppName(__.KEY, tempName, temp);\n            return result;\n        } else {\n            throw new Error('没有找到Template:' + tempName);\n        }\n    }\n    async excute() {\n        return await this.execute.apply(this, arguments);\n    }\n    dispose() {\n        const {\n            __\n        } = pri(this);\n        for (let i in __) delete __.i;\n    }\n    getCommand(tempName = '', name = '') {\n        const {\n            _,\n            __\n        } = pri(this);\n        let temp = __.middler.getObjectByAppName(__.KEY, tempName);\n        if (temp) {\n            let result = temp.getCommand(name);\n            __.middler.setObjectByAppName(__.KEY, tempName, temp);\n            return result;\n        } else {\n            throw new Error('没有找到Template:' + tempName);\n        }\n    }\n};\n\nfunction hasData(data) {\n    if (V.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n            if (data[i] && hasData(data[i])) return true;\n        }\n    } else {\n        for (let i in data)\n            if (data[i] !== undefined) return true;\n    }\n    return false;\n};\nexport const NiDataResult = class {\n    constructor() {\n        const {\n            __\n        } = pri(this, {\n            data: {},\n            kv: {},\n            datas: [],\n            hasData: hasData\n        });\n    }\n    get(key) {\n        const {\n            _,\n            __\n        } = pri(this);\n        return __.data[key] || (__.kv[key] ? __.kv[key][1] : null);\n    }\n    add(data, name) {\n        const {\n            _,\n            __\n        } = pri(this);\n        if (data && !__.kv[name]) {\n            __.data[__.datas.length] = data;\n            __.kv[name] = [__.datas.length, data];\n            __.datas.push(data);\n        } else if (__.kv[name]) {\n            const id = __.kv[name][0];\n            __.data[id] = data;\n            __.kv[name] = [__.datas.length, data];\n            __.datas[id] = data;\n        }\n    }\n    last() {\n            const {\n                _,\n                __\n            } = pri(this);\n            return _.get(__.datas.length - 1);\n        }\n        /**\n         * 一般用于处理单个对象\n         */\n    single() {\n        const {\n            _,\n            __\n        } = pri(this);\n        return (_.hasData()) ? (function() {\n            const data = _.get(__.datas.length - 1);\n            return (data[0] && data[0][0]) ? data[0][0] : {};\n        })() : null;\n    }\n    each(key, func) {\n        const {\n            _,\n            __\n        } = pri(this);\n        let val = _.get(key);\n        if (val && V.isArray(val)) {\n            return V.each(val, func);\n        } else throw new Error('遍历对象不存在或者不是数组')\n    }\n    clear() {\n        const {\n            _,\n            __\n        } = pri(this);\n        __.data = {};\n        __.kv = {};\n        __.datas = [];\n    }\n    hasData(key) {\n        const {\n            _,\n            __\n        } = pri(this);\n        return __.hasData(key ? get(key) : __.datas);\n    }\n};\n/**\n * getDBConnection 异步\n */\nexport const NiDataResource = class {\n    constructor(factory, params = {}) {\n        const {\n            _,\n            __\n        } = pri(this, {\n            fac: factory,\n            params: params\n        });\n    }\n    async getDBConnection() {\n        const {\n            _,\n            __\n        } = pri(this);\n        const conn = __.fac.createDBConnection();\n        conn.setParams(__.params);\n        //conn.params = V.merge(conn.params, __.params);\n        if (!conn.isOpen) {\n            //open需要转同步\n            await conn.open();\n        }\n        return conn;\n    }\n    backDBConnection(conn) {\n        const {\n            _,\n            __\n        } = pri(this);\n        __.fac.backDBConnection(conn);\n    }\n    getDBCommand() {\n        const {\n            _,\n            __\n        } = pri(this);\n        return __.fac.createDBCommand();\n    }\n};\nexport const NiInstanceDataResource = class extends NiDataResource {\n    constructor(factory, params = {}) {\n        super(factory, params);\n    }\n    getDBConnection() {\n        return super.getDBConnection();\n    }\n    backDBConnection(conn) {\n        super.backDBConnection(conn);\n    }\n    getDBCommand() {\n        return super.getDBCommand();\n    }\n};\nexport const NiStaticDataResource = class extends NiDataResource {\n    constructor(factory, params = {}) {\n        super(factory, params);\n        pri(this, {\n            conn: null\n        });\n    }\n    async getDBConnection() {\n        const {\n            _,\n            __\n        } = pri(this);\n        if (!__.conn || !__.conn.isOpen)\n            __.conn = await super.getDBConnection();\n        return __.conn;\n    }\n    backDBConnection(conn) {\n        const {\n            _,\n            __\n        } = pri(this);\n        if (conn != __.conn && conn.isOpen)\n            super.backDBConnection(conn);\n    }\n    getDBCommand() {\n        return super.getDBCommand();\n    }\n};\nexport const NiPoolDataResource = class extends NiDataResource {\n    constructor(factory, params = {}, size = 50) {\n        super(factory, params);\n        pri(this, {\n            pool: new Pool(size, async() => {\n                let conn = await super.getDBConnection();\n                if (!conn.dispose)\n                    conn.dispose = conn.close;\n                return conn;\n            })\n        });\n    }\n    async getDBConnection() {\n        const {\n            _,\n            __\n        } = pri(this);\n        return await __.pool.getValue();\n    }\n    backDBConnection(conn) {\n        const {\n            _,\n            __\n        } = pri(this);\n        __.pool.setValue(conn);\n    }\n};\nexport const NiDataFactory = class {\n        constructor() {\n            pri(this);\n        }\n        createDBConnection() {\n            return new NiDataConnection();\n        }\n        createDBCommand() {\n            return new NiDataCommand();\n        }\n        async backDBConnection(conn) {\n            if (conn.isOpen) {\n                await conn.close();\n            }\n        }\n    }\n    /**\n     * Connection 全部是callback\n     */\nexport const NiDataConnection = class {\n    constructor() {\n        pri(this);\n        this.isOpen = false;\n        this.transaction = false;\n        this.params = {};\n    }\n    setParams(paras) {\n        V.merge(this.params, paras, true);\n    }\n    async open() {\n        const {\n            _,\n            __\n        } = pri(this);\n        _.isOpen = true;\n    }\n    async close() {\n        const {\n            _,\n            __\n        } = pri(this);\n        _.isOpen = false;\n    }\n    async invoke(cmd) {\n        return [];\n    }\n    async commit() {\n        return [];\n    }\n};\n/**\n * DBCommand 命令使用callback命令\n */\nexport const NiDataCommand = class {\n    constructor() {\n        const {\n            _,\n            __\n        } = pri(this);\n        _.connection = null;\n        _.command = '';\n        _.params = {\n            dbtype: 'json'\n        };\n    }\n    async execute() {\n        const {\n            _,\n            __\n        } = pri(this);\n        if (!_.connection || !_.connection.isOpen) {\n            V.showException('数据库未连接');\n            throw new Error('数据库未连接');\n        } else {\n            try {\n                //此句关键\n                return await _.connection.invoke(_);\n            } catch (e) {\n                V.showException('connection invoke success方法', e);\n                throw e;\n            }\n        }\n    }\n    async excute() {\n        return await this.execute.apply(this, arguments);\n    }\n};\n\n/**\n * 可以针对每个函数分别设置缓存方式和缓存字段\n * @param {*} res \n * @param {*} cacheres \n * @param {*} cm \n * @param {*} params \n */\nexport const NiTemplateDecorator = class extends NiTemplate {\n    constructor(res, cacheres, cm, params = {}) {\n        super(res, cm);\n        const that = this;\n        const {\n            _,\n            __\n        } = pri(that, {\n            KEY: 'Ni',\n            lstCmd2: {},\n            params,\n            cacheres\n        });\n        const _addCommand = __.addCommand;\n        const _execute = __.execute;\n        __.addCommand = (name, params) => {\n            const {\n                _,\n                __\n            } = pri(that);\n            let index = __.lstCmd.length;\n            _addCommand.apply(_, [name, params]);\n            if (__.lstCmd.length != index) {\n                let command = null;\n                let cmd = __.cm.getConfigValue(__.KEY, name.toLowerCase() + '.cache') || __.cm.getConfigValue(__.KEY, name.toLowerCase() + '.clear');\n                if (cmd) {\n                    command = cmd.command;\n                    __.lstCmd2[index] = {\n                        name: command,\n                        key: name,\n                        params: cmd.merge({\n                            cacheKey: '' + V.hash(name + '.Set.' + V.toJsonString(__.lstCmd[__.lstCmd.length - 1].params))\n                        }, cmd.params, __.lstCmd[__.lstCmd.length - 1].params)\n                    }\n                }\n            }\n        };\n        __.execute = async() => {\n            const {\n                _,\n                __\n            } = pri(that);\n            let _cms = __.lstCmd;\n            __.lstCmd = [];\n            if (_cms.length > 0) {\n                let conn = await __.res.getDBConnection();\n                try {\n                    if (_cms.length > 1) conn.transaction = true;\n                    let cmd = __.res.getDBCommand();\n                    cmd.connection = conn;\n                    //执行过程存在严重漏洞 考虑 直接执行与非直接执行的异同\n                    let i = 0;\n                    await V.each(_cms, async v => {\n                        const _nicmd = __.lstCmd2[i++];\n                        if (_nicmd) {\n                            const _conn = await __.cacheres.getDBConnection();\n                            try {\n                                const _cmd = __.cacheres.getDBCommand();\n                                _cmd.connection = _conn;\n                                _cmd.command = _nicmd.name;\n                                _cmd.params = V.merge(_nicmd.params, v.params);\n                                _cmd.dbtype = v.dbtype;\n                                _cmd.jsonp = v.jsonp;\n                                let data = await _cmd.execute();\n                                if (hasData(data)) {\n                                    __.result.add((!data || (V.isArray(data) && data.length == 0)) ? false :\n                                        V.json(data[0].cacheValue || (data[0][0] && data[0][0].cacheValue)), v.key);\n                                    return false;\n                                }\n                            } finally {\n                                __.cacheres.backDBConnection(_conn);\n                            }\n                        }\n                        cmd.command = v.name;\n                        cmd.params = v.params;\n                        cmd.dbtype = v.dbtype;\n                        cmd.jsonp = v.jsonp;\n                        //需要知晓connection的执行原理\n                        if (conn.transaction) {\n                            cmd.execute();\n                        } else {\n                            let data = await cmd.execute();\n                            __.result.add((!data || (V.isArray(data) && data.length == 0)) ? false : data, v.key);\n                            if (data && data.length > 0 && !(data.length == 1 && data[0].length == 0)) {\n                                //新增缓存\n                                let _nicmd = __.cm.getConfigValue(__.KEY, v.key.toLowerCase() + '.set');\n                                if (_nicmd) {\n                                    const _conn = await __.cacheres.getDBConnection();\n                                    try {\n                                        const _cmd = __.cacheres.getDBCommand();\n                                        _cmd.connection = _conn;\n                                        _cmd.command = _nicmd.command;\n                                        _cmd.params = _nicmd.merge({\n                                            cacheKey: '' + V.hash(v.key + '.Set.' + V.toJsonString(cmd.params)),\n                                            cacheValue: V.toJsonString(data)\n                                        }, _nicmd.params, cmd.params);\n                                        cmd.dbtype = v.dbtype;\n                                        cmd.jsonp = v.jsonp;\n                                        const _data = await _cmd.execute();\n                                    } finally {\n                                        __.cacheres.backDBConnection(_conn);\n                                    }\n                                }\n                            }\n                        }\n                        return false;\n                    }, true);\n                    if (conn.transaction && conn.commit)\n                        await conn.commit();\n                    return __.result;\n                } catch (err) {\n                    V.showException('commit ', err);\n                } finally {\n                    __.res.backDBConnection(conn);\n                }\n            } else {\n                V.showException('不能调用空的命令对象!');\n            }\n        };\n        __.excute = async() => await __.execute();\n    }\n};\n\n/**\n * 可以非常简单的设置缓存方式 但是存储命令只有cacheKey,cacheValue两种\n * @param {*} res \n * @param {*} cacheres \n * @param {*} cm \n * @param {*} params \n * @param {*} cachecommand //缓存命令\n * @param {*} setcommand //缓存设置命令\n */\nexport const NiTemplateCacheDecorator = class extends NiTemplate {\n    constructor(res, cacheres, cm, params = {}, cachecommand = '', setcommand = '') {\n        super(res, cm);\n        const that = this;\n        const {\n            _,\n            __\n        } = pri(that, {\n            KEY: 'Ni',\n            lstCmd2: {},\n            params,\n            cacheres,\n            cachecommand: cachecommand.toLowerCase(),\n            setcommand: setcommand.toLowerCase()\n        });\n        const _addCommand = __.addCommand;\n        const _execute = __.execute;\n        __.addCommand = (name, params) => {\n            const {\n                _,\n                __\n            } = pri(that);\n            let index = __.lstCmd.length;\n            _addCommand.apply(_, [name, params]);\n            if (__.lstCmd.length != index) {\n                let command = null;\n                let cmd = __.cm.getConfigValue(__.KEY, __.cachecommand);\n                if (cmd) {\n                    command = cmd.command;\n                    __.lstCmd2[index] = {\n                        name: command,\n                        key: name,\n                        params: cmd.merge({\n                            cacheKey: '' + V.hash(name + '.Set.' + V.toJsonString(__.lstCmd[__.lstCmd.length - 1].params))\n                        }, cmd.params, __.lstCmd[__.lstCmd.length - 1].params)\n                    }\n                }\n            }\n        };\n        __.execute = async() => {\n            const {\n                _,\n                __\n            } = pri(that);\n            let _cms = __.lstCmd;\n            __.lstCmd = [];\n            if (_cms.length > 0) {\n                let conn = await __.res.getDBConnection();\n                try {\n                    if (_cms.length > 1) conn.transaction = true;\n                    let cmd = __.res.getDBCommand();\n                    cmd.connection = conn;\n                    //执行过程存在严重漏洞 考虑 直接执行与非直接执行的异同\n                    let i = 0;\n                    await V.each(_cms, async v => {\n                        const _nicmd = __.lstCmd2[i++];\n                        if (_nicmd) {\n                            const _conn = await __.cacheres.getDBConnection();\n                            try {\n                                const _cmd = __.cacheres.getDBCommand();\n                                _cmd.connection = _conn;\n                                _cmd.command = _nicmd.name;\n                                _cmd.params = V.merge(_nicmd.params, v.params);\n                                _cmd.dbtype = v.dbtype;\n                                _cmd.jsonp = v.jsonp;\n                                let data = await _cmd.execute();\n                                if (hasData(data)) {\n                                    __.result.add((!data || (V.isArray(data) && data.length == 0)) ? false :\n                                        V.json(data[0].cacheValue || (data[0][0] && data[0][0].cacheValue)), v.key);\n                                    return false;\n                                }\n                            } finally {\n                                __.cacheres.backDBConnection(_conn);\n                            }\n                        }\n                        cmd.command = v.name;\n                        cmd.params = v.params;\n                        cmd.dbtype = v.dbtype;\n                        cmd.jsonp = v.jsonp;\n                        //需要知晓connection的执行原理\n                        if (conn.transaction) {\n                            cmd.execute();\n                        } else {\n                            let data = await cmd.execute();\n                            __.result.add((!data || (V.isArray(data) && data.length == 0)) ? false : data, v.key);\n                            if (data && data.length > 0 && !(data.length == 1 && data[0].length == 0)) {\n                                //新增缓存\n                                let _nicmd = __.cm.getConfigValue(__.KEY, __.setcommand);\n                                if (_nicmd) {\n                                    const _conn = await __.cacheres.getDBConnection();\n                                    try {\n                                        const _cmd = __.cacheres.getDBCommand();\n                                        _cmd.connection = _conn;\n                                        _cmd.command = _nicmd.command;\n                                        _cmd.params = _nicmd.merge({\n                                            cacheKey: '' + V.hash(v.key + '.Set.' + V.toJsonString(cmd.params)),\n                                            cacheValue: V.toJsonString(data)\n                                        }, _nicmd.params, cmd.params);\n                                        cmd.dbtype = v.dbtype;\n                                        cmd.jsonp = v.jsonp;\n                                        const _data = await _cmd.execute();\n                                    } finally {\n                                        __.cacheres.backDBConnection(_conn);\n                                    }\n                                }\n                            }\n                        }\n                        return false;\n                    }, true);\n                    if (conn.transaction && conn.commit)\n                        await conn.commit();\n                    return __.result;\n                } catch (err) {\n                    V.showException('commit ', err);\n                } finally {\n                    __.res.backDBConnection(conn);\n                }\n            } else {\n                V.showException('不能调用空的命令对象!');\n            }\n        };\n        __.excute = async() => await __.execute();\n    }\n};\n\nexport const NiMultiTemplateDecorator = class extends NiTemplate {\n    constructor(res, cm, relcm, appName = \"Ni\") {\n        super(res, cm);\n        const that = this;\n        const {\n            _,\n            __\n        } = pri(that, {\n            KEY: appName,\n            ni: new NiTemplateManager(relcm, appName),\n            lstCmd2: {}\n        });\n        const _addCommand = __.addCommand;\n        const _execute = __.execute; //todo 可能可以实现覆盖!\n        __.addCommand = (name, params) => {\n            const {\n                _,\n                __\n            } = pri(that);\n            let index = __.lstCmd.length;\n            _addCommand.apply(_, [name, params]);\n            let cmd = __.lstCmd[__.lstCmd.length - 1];\n            if (cmd.template) {\n                //调用templdate优先 复用其次\n                __.lstCmd2[__.lstCmd.length - 1] = true;\n            }\n        };\n        __.execute = async() => {\n            const {\n                _,\n                __\n            } = pri(that);\n            let _cms = __.lstCmd,\n                _cm2 = __.lstCmd2;\n            __.lstCmd = [], __.lstCmd2 = {};\n            if (_.transaction)\n                throw new Error('NiMultiTemplateDecorator不支持事务，容易发生内容错位');\n            if (_cms.length > 0) {\n                let i = 0;\n                await V.each(_cms, async v => {\n                    let _nicmd = _cm2[i++];\n                    if (_nicmd) {\n                        const result = await __.ni.execute(v.template, v.key, v.params);\n                        __.result.add((result && result.get(v.key)) ? result.get(v.key) : [], v.key);\n                    } else {\n                        const conn = await __.res.getDBConnection();\n                        try {\n                            let cmd = __.res.getDBCommand();\n                            cmd.connection = conn;\n                            cmd.command = v.name;\n                            cmd.params = v.params;\n                            cmd.dbtype = v.dbtype;\n                            cmd.jsonp = v.jsonp;\n                            const data = await cmd.execute();\n                            __.result.add((typeof(data) == 'undefined' || (V.isArray(data) && data.length == 0)) ? false : data, v.key);\n                        } finally {\n                            __.res.backDBConnection(conn);\n                        }\n                    }\n                    return false;\n                }, true);\n            } else {\n                V.showException('不能调用空的命令对象!');\n            }\n            return __.result;\n        };\n        __.excute = async() => await __.execute();\n    }\n    dispose() {\n        const {\n            __\n        } = pri(this);\n        __.ni.dispose();\n        super.dispose();\n    }\n};\n/**\n * MySQL 池连接方式工厂\n */\nexport const NiMySQLDataFactory = class extends NiDataFactory {\n    constructor() {\n        super();\n        const that = this;\n        that.idic = {};\n        const {\n            _,\n            __\n        } = pri(that, {\n            MySQLConnection: class extends NiDataConnection {\n                constructor() {\n                    super();\n                    const that = this;\n                    const {\n                        _,\n                        __\n                    } = pri(this, {\n                        cmds: [],\n                        conn: null,\n                        getValue: p => p.value,\n                        toList: vals => {\n                            const {\n                                _,\n                                __\n                            } = pri(that);\n                            if (vals[0]) {\n                                let ret = [];\n                                for (let i = 0; i < vals.length; i++)\n                                    ret.push(__.toList(vals[i]));\n                                return ret;\n                            } else return (function() {\n                                const ret = {};\n                                for (let k in vals) {\n                                    switch (V.getType(vals[k])) {\n                                        case 'Date':\n                                        case 'number':\n                                        case 'boolean':\n                                        case 'string':\n                                        case 'null':\n                                            ret[k] = vals[k];\n                                            break;\n                                    }\n                                }\n                                return ret;\n                            })();\n                        },\n                        invoke: async(command, params) => {\n                            try {\n                                const {\n                                    _,\n                                    __\n                                } = pri(that);\n\n                                let result = await V.callback(__.conn.query, __.conn, _.prepare(command, params));\n\n                                let data = [];\n                                if (!result[0]) result = [\n                                    []\n                                ];\n                                //过滤mysql自定义的更新结果JSON\n                                result = result.filter(v => v.serverStatus == undefined);\n\n                                //过滤mysql上复制:=\n                                result = result.filter(v => {\n                                    switch (V.getType(v)) {\n                                        case 'object':\n                                        case 'Object':\n                                            for (var k in v) {\n                                                if (k.indexOf(':=') >= 0) return false;\n                                            }\n                                            break;\n                                        case 'Array':\n                                            const _v = v.filter(r => {\n                                                for (var k2 in r) {\n                                                    if (k2.indexOf(':=') >= 0) return false;\n                                                }\n                                                return true;\n                                            });\n                                            return _v.length > 0 || v.length == 0;\n                                    }\n                                    return true;\n                                });\n                                if (!result[0]) result = [\n                                    []\n                                ];\n                                if (V.getType(result[0]).toLowerCase() != 'array') result = [result];\n                                //自动补充mysql在单sql下不是2个嵌套数据的问题\n                                if (result && result.length > 0)\n                                    for (let i = 0; i < result.length; i++) {\n                                        if (typeof(result[i]) != 'undefined' && result[i].length > 0)\n                                            data.push(__.toList(result[i]));\n                                        else if (typeof(result[i]) != 'undefined' && !V.isArray(result[i])) { //if (typeof(result[i].affectedRows) == 'undefined') {\n                                            data.push(__.toList([result[i]]));\n                                        } else {\n                                            data.push([]);\n                                        }\n                                    }\n                                else data.push([]);\n                                return data;\n                            } catch (e) {\n                                console.log(command, params);\n                                console.log(e.message);\n                                throw e;\n                            }\n                        }\n                    });\n                    _.params = {\n                        multipleStatements: true,\n                        connectionLimit: 10\n                    };\n                }\n                prepare(cmd, paras) {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    //需要将{}转成[] 处理\n                    if (cmd && paras) {\n                        let vals = [];\n                        cmd = cmd.replace(/\\?[a-zA-Z0-9_]+/g, (data) => {\n                            try {\n                                vals.push(__.getValue(paras[data.trim('?')]));\n                                return '?';\n                            } catch (e) {\n                                throw data.trim('?') + '未找到参数定义'\n                            }\n                        });\n                        return {\n                            sql: cmd,\n                            values: vals,\n                            timeout: _.params.timeout || 60000 //1分钟\n                        };\n                    } else\n                        throw new Error('prepare方法要求写入command参数与paras参数');\n                }\n                async invoke(cmd) {\n                    //需要处理单条与多条s\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        __.cmds.push({\n                            command: cmd.command,\n                            params: cmd.params\n                        });\n                    } else {\n                        /*if (cmd.command.split(';').filter(e => e.length) > 1) {\n                            //事务性处理\n                            __.cmds.push({\n                                command: cmd.command,\n                                params: cmd.params\n                            });\n                            return await _.commit()[0];\n                        } else*/\n                        return await __.invoke(cmd.command, cmd.params);\n                    }\n                }\n                async commit() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        //事务性处理\n                        try {\n                            await V.callback(__.conn.beginTransaction, __.conn);\n                            let data = [];\n                            let cmds = __.cmds;\n                            __.cmds = [];\n                            await V.each(cmds, async v => {\n                                //console.log(v.cmd.params);\n                                data.push(await __.invoke(v.command, v.params));\n                                return false;\n                            }, true);\n                            await V.callback(__.conn.commit, __.conn);\n                            return data;\n                        } catch (e) {\n                            await V.callback(__.conn.rollback, __.conn);\n                            throw e;\n                        }\n                    } else\n                        throw new Error('非事务条件下不可调用此方法');\n                }\n                async open() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    const key = V.hash2(V.toJsonString(_.params));\n                    that.idic[key] = that.idic[key] || M.createPool(_.params);\n\n                    var getonconn = async function() {\n                        var conn = await V.callback(that.idic[key].getConnection, that.idic[key]);\n                        conn._key = key;\n                        if (!!!conn._ison) {\n                            conn._ison = true\n                            conn.on('error', async function(err) {\n                                if (err.code == 'PROTOCOL_CONNECTION_LOST' ||\n                                    err.code == 'PROTOCOL_ENQUEUE_AFTER_FATAL_ERROR') {\n                                    try {\n                                        //conn.close();\n                                        that.idic[key] && that.idic[key].releaseConnection(conn)\n                                    } catch (e) {}\n                                    __.conn = await getonconn();\n                                }\n                            })\n                        }\n\n                        return conn;\n                    };\n                    __.conn = await getonconn();\n\n                    await super.open();\n                }\n                async close() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    try {\n                        if (__.conn && __.conn._key && that.idic[__.conn._key])\n                            that.idic[__.conn._key].releaseConnection(__.conn);\n                        else if (__.conn && __.conn.end)\n                            __.conn.end();\n                        else if (__.conn && __.conn.dispose)\n                            __.conn.dispose();\n                    } catch (e) {}\n                    __.cmds = [];\n                    __.conn = null;\n                    await super.close();\n                }\n            }\n        });\n    }\n    createDBConnection() {\n        const {\n            _,\n            __\n        } = pri(this);\n        return new __.MySQLConnection();\n    }\n    dispose() {\n        for (let i in this.idic) {\n            if (this.idic[i] && this.idic[i].dispose) {\n                const v = this.idic[i];\n                V.tryC(() => {\n                    v.dispose();\n                })\n            }\n        }\n    }\n};\n\n/*\n默认类型转换\nString -> sql.NVarChar\nNumber -> sql.Int\nBoolean -> sql.Bit\nDate -> sql.DateTime\nBuffer -> sql.VarBinary\nsql.Table -> sql.TVP\n特别定义 param length 和 scale属性 分别对应 长度和精度（仅限Decimal和Numberic）\n */\nexport const NiMsSQLDataFactory = class extends NiDataFactory {\n    constructor() {\n        super();\n        const that = this;\n        that.idic = {};\n        const {\n            _,\n            __\n        } = pri(that, {\n            MsSQLConnection: class extends NiDataConnection {\n                constructor() {\n                    super();\n                    const that = this;\n                    const {\n                        _,\n                        __\n                    } = pri(this, {\n                        cmds: [],\n                        conn: null,\n                        invoke: async(source, command, params) => {\n                            try {\n                                const {\n                                    _,\n                                    __\n                                } = pri(that);\n                                const request = new M2.Request(source);\n                                request.multiple = true;\n                                for (let i in params) {\n                                    //ni params 应该有 name:{type:'',value:''} or name:string ni定义未必支持\n                                    const type = M2[V.getValue(params[i].type, 'NVarChar')] || M2.NVarChar;\n                                    if (params[i].out)\n                                        request.output(i, (params[i].length || 0) > 0 ? type(params[i].length) : type, params[i].value);\n                                    else\n                                        switch ((params[i].type + '').toLowerCase()) {\n                                            case 'decimal':\n                                            case 'numeric':\n                                                request.input(i, type(params[i].length || 10, params[i].scale || 2), params[i].value);\n                                                break;\n                                            default:\n                                                request.input(i, (params[i].length || 0) > 0 ? type(params[i].length) : type, params[i].value);\n                                                break;\n                                        }\n\n                                }\n                                let [result, affected] = [null, 0];\n                                //await V.callback(request.prepare, request, command);\n                                [result, affected] = await V.callback(call => {\n                                    if (command.indexOf(' ') >= 0)\n                                        request.query(command, (err, result) => call(err, [result, err ? 0 : result.rowsAffected]));\n                                    else\n                                        request.execute(command, (err, result) => call(err, [result, err ? 0 : result.rowsAffected]));\n                                });\n\n                                //await V.callback(request.unprepare, request);\n                                let data = [];\n                                //特别注意单行的处理，可能会导致单行无数据\n                                if (result.recordsets && result.recordsets.length > 0)\n                                    for (let i = 0; i < result.recordsets.length; i++) {\n                                        if (result.recordsets[i] && result.recordsets[i].length > 0)\n                                            data.push(result.recordsets[i]);\n                                        else data.push((affected[i]) ? [{\n                                            affected: affected[i]\n                                        }] : []);\n                                    }\n                                else data.push((affected && affected[0]) ? [{\n                                    affected: affected[0]\n                                }] : []);\n                                return data;\n                            } catch (e) {\n                                console.log(command, params);\n                                console.log(e.message);\n                                throw e;\n                            }\n                        }\n                    });\n                    _.params = {\n                        connectionLimit: 10,\n                        timeout: 60000\n                    };\n                }\n                async invoke(cmd) {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        __.cmds.push({\n                            command: cmd.command,\n                            params: cmd.params\n                        });\n                    } else {\n                        /*if (cmd.command.split(';').filter(e => e.length) > 1) {\n                            //事务性处理\n                            __.cmds.push({\n                                command: cmd.command,\n                                params: cmd.params\n                            };\n                            return await _.commit()[0];\n                        } else*/\n                        return await __.invoke(__.conn, cmd.command, cmd.params);\n                    }\n                }\n                async commit() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        //事务性处理\n                        let trans = new M2.Transaction(__.conn);\n                        try {\n                            await V.callback(trans.begin, trans);\n                            let data = [];\n                            let cmds = __.cmds;\n                            __.cmds = [];\n                            await V.each(cmds, async v => {\n                                data.push(await __.invoke(trans, v.command, v.params));\n                                return false;\n                            }, true);\n                            await V.callback(trans.commit, trans);\n                            return data;\n                        } catch (e) {\n                            await V.callback(trans.rollback, trans);\n                            throw e;\n                        }\n                    } else\n                        throw new Error('非事务条件下不可调用此方法');\n                }\n                async open() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    const key = V.hash2(V.toJsonString(_.params));\n                    const func = function() {\n                        const conn = new M2.ConnectionPool(_.params);\n                        conn.on('error', function(err) {\n                            console.log('GCL mssql error:' + err.stack);\n                            __.conn = func();\n                        });\n                        return conn;\n                    }\n                    __.conn = func();\n                    await V.callback(__.conn.connect, __.conn);\n                    await super.open();\n                }\n                async close() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    try {\n                        if (__.conn && __.conn.close)\n                            __.conn.close();\n                        else if (__.conn && __.conn.end)\n                            __.conn.end();\n                        else if (__.conn && __.conn.dispose)\n                            __.conn.dispose();\n                    } catch (e) {} finally {\n                        //const key = V.hash2(V.toJsonString(_.params));\n                        //delete that.idic[key];\n                    }\n                    __.cmds = [];\n                    __.conn = null;\n                    await super.close();\n                }\n            }\n        });\n    }\n    createDBConnection() {\n        const {\n            _,\n            __\n        } = pri(this);\n        return new __.MsSQLConnection();\n    }\n    dispose() {\n        for (let i in this.idic) {\n            if (this.idic[i] && this.idic[i].close) {\n                const v = this.idic[i];\n                V.tryC(() => {\n                    v.close();\n                })\n                delete this.idic[i];\n            }\n        }\n    }\n};\n\n/**\n * 分离NiDBFactory产生NiDBConnection(Invoke) mysql,sqlserver,memcache,mongo websocket ObjectDB等各种资源\n */\nexport const NiObjectDataFactory = class extends NiDataFactory {\n    constructor(middler = null) {\n        super();\n        if (!V.isValid(middler)) throw new Error('参数的定义必须要输入middler参数');\n        const that = this;\n        const {\n            _,\n            __\n        } = pri(that, {\n            middler: middler,\n            ObjectConnection: class extends NiDataConnection {\n                constructor() {\n                    super();\n                    const {\n                        _,\n                        __\n                    } = pri(this, {\n                        cmds: [],\n                        invoke: async(command, params) => {\n                            try {\n                                command = command.trim();\n                                if (typeof(__.obj[command]) == 'function') {\n                                    let paras = [];\n                                    for (let k in params) {\n                                        let v = params[k];\n                                        paras.push(v.value);\n                                    };\n                                    return await V.callback2(__.obj[command], __.obj, ...paras) || true;\n                                } else throw new Error(command + '方法没有在对象源上找到');\n                            } catch (e) {\n                                console.log(command, params);\n                                console.log(e.message);\n                                throw e;\n                            }\n                        }\n                    });\n                    _.params = {\n                        app: 'Ni',\n                        name: ''\n                    };\n                }\n                async open() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (V.isValid(_.params.name)) {\n                        //证明可用\n                        __.obj = middler.getObjectByAppName(_.params.app, _.params.name);\n                        if (!__.obj) throw new Error(`N.NiObjectDataFactory 无法创建<${_.params.app}/${_.params.name}>对象`);\n                    } else throw new Error(`N.NiObjectDataFactory 无法找到<'${_.params.app}/${_.params.name}>对象`);\n                    await super.open();\n                }\n                async close() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (__.obj) {\n                        middler.setObjectByAppName(_.params.app, _.params.name, __.obj);\n                        delete __.obj;\n                    }\n                    await super.close();\n                }\n                async invoke(cmd) {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        __.cmds.push({\n                            command: cmd.command,\n                            params: cmd.params\n                        });\n                    } else\n                        return await __.invoke(cmd.command, cmd.params);\n                }\n                async commit() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        //事务性处理\n                        let data = [];\n                        let cmds = __.cmds;\n                        __.cmds = [];\n                        await V.each(cmds, async v => {\n                            data.push(await __.invoke(v.command, v.params));\n                            return false;\n                        }, true);\n                        return data;\n                    } else\n                        throw new Error('非事务条件下不可调用此方法');\n                }\n            }\n        });\n    }\n    createDBConnection() {\n        const {\n            _,\n            __\n        } = pri(this);\n        return new __.ObjectConnection();\n    }\n};\n\n/**\n * MemCached\n * @param {*} parser \n */\nexport const NiMemSQLDataFactory = class extends NiDataFactory {\n    constructor(parser) {\n        super();\n        let that = this;\n        const {\n            _,\n            __\n        } = pri(that, {\n            MemSQLConnection: class extends NiDataConnection {\n                constructor() {\n                    super();\n                    const _this = this;\n                    const {\n                        _,\n                        __\n                    } = pri(this, {\n                        cmds: [],\n                        conn: null,\n                        invoke: async(command, params) => {\n                            try {\n                                const {\n                                    _,\n                                    __\n                                } = pri(_this);\n                                let queryList = that.parser.parse(command, params);\n                                let data = [];\n                                await V.each(queryList, async(v, call) => {\n                                    let cacheKey = _this.getKey(v);\n                                    switch (v.Method.toLowerCase().trim()) {\n                                        case \"select\":\n                                            {\n                                                data.push([await V.callback(call => __.conn.get(cacheKey, call))]);\n                                            }\n                                            break;\n                                        case \"insert\":\n                                        case \"update\":\n                                            {\n                                                const datetime = V.getValue(V.toJsonString(v.DateTimeParam).length > 2 ? (() => {\n                                                    for (let k in v.DateTimeParam) return v.DateTimeParam[k];\n                                                })() : _.params.datetime);\n                                                const values = {};\n                                                for (let k in v.MethodParam) {\n                                                    let v2 = v.MethodParam[k];\n                                                    v2 = typeof v2.value === 'undefined' ? v2 : v2.value;\n                                                    values[k] = v2;\n                                                    if (typeof v2 === 'undefined' || v2.type) throw new Error(`参数${k}不能为undefined`);\n                                                }\n                                                await V.callback(__.conn.set, __.conn, cacheKey, values, datetime);\n                                                data.push([{\n                                                    value: 1\n                                                }]);\n                                            }\n                                            break;\n                                        case \"delete\":\n                                            {\n\n                                                await V.callback(__.conn.del, __.conn, cacheKey);\n                                                data.push([{\n                                                    value: 1\n                                                }]);\n                                            }\n                                            break;\n                                        case \"touch\":\n                                            {\n\n                                                let dt = V.toJsonString(v.DateTimeParam).length > 2 ? (() => {\n                                                    for (let k in v.DateTimeParam) return v.DateTimeParam[k];\n                                                })() : _.params.datetime;\n                                                await V.callback(__.conn.touch, __.conn, cacheKey, dt);\n                                                data.push([{\n                                                    value: 1\n                                                }]);\n                                            }\n                                            break;\n                                    }\n                                    return false;\n                                }, true);\n                                return data;\n                            } catch (e) {\n                                console.log(command, params);\n                                console.log(e.message);\n                                throw e;\n                            }\n                        }\n                    });\n                    _.params = {\n                        connectionLimit: 10,\n                        datetime: 1000\n                    };\n                }\n                getKey(p) {\n                    let cacheKey = p.Table;\n                    if (V.toJsonString(p.IDs).length > 2) {\n                        let sb = V.sb();\n                        for (let k in p.IDs)\n                            sb.append(p.IDs[k]).append('_');\n                        cacheKey += (\"K\" + V.hash(sb.clear().trim('_')));\n                        sb = null;\n                    } else if (p.Params[\"cacheKey\"])\n                        cacheKey += (\"K\" + V.hash(p.Params[\"cacheKey\"][0], true));\n                    else\n                        throw new Error(\"表未定义<主键>,或者传入键值中未找到cacheKey\");\n                    return cacheKey;\n                }\n                async invoke(cmd) {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        __.cmds.push({\n                            command: cmd.command,\n                            params: cmd.params\n                        });\n                    } else\n                        return await __.invoke(cmd.command, cmd.params);\n                }\n                async commit() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        //事务性处理\n                        let data = [];\n                        let cmds = __.cmds;\n                        __.cmds = [];\n                        await V.each(cmds, async v => {\n                            data.push(await __.invoke(v.command, v.params));\n                            return false;\n                        }, true);\n                        return data;\n                    } else\n                        throw new Error('非事务条件下不可调用此方法');\n                }\n                async open() {\n                    //https://www.npmjs.com/package/memcached#options\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    __.conn = new Mem(_.params.hosts, _.params);\n                    await super.open();\n                }\n                async close() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    try {\n                        __.conn.end();\n                    } catch (e) {}\n                    __.cmds = [];\n                    __.conn = null;\n                    await super.close();\n                }\n            }\n        });\n        _.parser = parser;\n    }\n    createDBConnection() {\n        const {\n            _,\n            __\n        } = pri(this);\n        return new __.MemSQLConnection();\n    };\n    backDBConnection(conn) {\n        conn.close();\n    };\n};\n\n/**\n * https://www.npmjs.com/package/memcached#options\n */\nexport const NiMongoSQLDataFactory = class extends NiDataFactory {\n    constructor(parser) {\n        super();\n        let that = this;\n        const {\n            _,\n            __\n        } = pri(that, {\n            MongoSQLConnection: class extends NiDataConnection {\n                constructor() {\n                    super();\n                    let _this = this;\n                    const {\n                        _,\n                        __\n                    } = pri(_this, {\n                        cmds: [],\n                        conn: null,\n                        invoke: async(command, params) => {\n                            try {\n                                const {\n                                    _,\n                                    __\n                                } = pri(_this);\n                                let queryList = _this.parse(command, params);\n                                let data = [];\n                                await V.each(queryList, async(v) => {\n                                    const func = (data, p) => {\n                                        for (let k in data) {\n                                            let v = data[k];\n                                            if (typeof(v.value) != 'undefined' || typeof(v._id) != 'undefined') {\n                                                p[k] = v.value;\n                                            } else {\n                                                p[k] = {};\n                                                func(v, p.k);\n                                            }\n                                        }\n                                    };\n                                    let wheres = {};\n                                    func(v.WhereParam, wheres);\n\n                                    const values = {};\n                                    for (let k in v.MethodParam) {\n                                        let v2 = v.MethodParam[k];\n                                        v2 = typeof v2.value === 'undefined' ? v2 : v2.value;\n                                        values[k] = v2;\n                                        if (typeof v2 === 'undefined' || v2.type) throw new Error(`参数${k}不能为undefined`);\n                                    }\n                                    switch (v.Method.toLowerCase().trim()) {\n                                        case \"select\":\n                                            data.push(await V.callback(call => __.conn.collection(v.Table).find(wheres).toArray(call)));\n                                            break;\n                                        case \"insert\":\n                                            //应该是更新\n                                            await V.callback(call => __.conn.collection(v.Table).insert(values, {\n                                                safe: true\n                                            }, call));\n                                            data.push({\n                                                value: 1\n                                            });\n                                            break;\n                                        case \"update\":\n                                            await V.callback(call => __.conn.collection(v.Table).update(wheres, {\n                                                '$set': values\n                                            }, {\n                                                safe: true\n                                            }, call));\n                                            data.push({\n                                                value: 1\n                                            });\n                                            break;\n                                        case \"delete\":\n                                            await V.callback(call => __.conn.collection(v.Table).remove(wheres, {\n                                                safe: true\n                                            }, call));\n                                            data.push({\n                                                value: 1\n                                            });\n                                            break;\n                                    }\n                                    return false;\n                                }, true);\n                                return data;\n                            } catch (e) {\n                                console.log(command, params);\n                                console.log(e.message);\n                                throw e;\n                            }\n                        }\n                    });\n                    _.params = {\n                        connectionLimit: 10\n                    };\n                }\n                parse(sql, params) {\n                    const {\n                        _,\n                        __\n                    } = this;\n                    const ret = that.parser.parse(sql, params);\n                    const param = {};\n                    const func = (data, p) => {\n                        for (let k in data) {\n                            let v = data[k];\n                            if (v.split) {} else {\n                                p[k] = {};\n                                func(v, p.k)\n                            };\n                            switch (k.toLowerCase()) {\n                                case 'or':\n                                    const _data = [];\n                                    p['$or'] = _data;\n                                    for (let k2 in p[k]) {\n                                        let v2 = p[k][k2];\n                                        _data.push({\n                                            k2: v2\n                                        });\n                                    }\n                                    break;\n                                case 'and':\n                                    p = V.merge(p, v);\n                                    break;\n                                case 'in':\n                                    //todo\n                                    break;\n                                case '<':\n                                    for (let k2 in p[k]) {\n                                        let v2 = p[k][k2];\n                                        if (p[k2]) {\n                                            if (p[k2].split) {} else p[k2]['$lt'] = v2;\n                                        } else p[k2] = {\n                                            \"$lt\": v2\n                                        }\n                                    }\n                                    break;\n                                case '<=':\n                                    for (let k2 in p[k]) {\n                                        let v2 = p[k][k2];\n                                        if (p[k2]) {\n                                            if (p[k2].split) {} else p[k2]['$lte'] = v2;\n                                        } else p[k2] = {\n                                            \"$lte\": v2\n                                        }\n                                    }\n                                    break;\n                                case '>':\n                                    for (let k2 in p[k]) {\n                                        let v2 = p[k][k2];\n                                        if (p[k2]) {\n                                            if (p[k2].split) {} else p[k2]['$gt'] = v2;\n                                        } else p[k2] = {\n                                            \"$gt\": v2\n                                        }\n                                    }\n                                    break;\n                                case '>=':\n                                    for (let k2 in p[k]) {\n                                        let v2 = p[k][k2];\n                                        if (p[k2]) {\n                                            if (p[k2].split) {} else p[k2]['$gte'] = v2;\n                                        } else p[k2] = {\n                                            \"$gte\": v2\n                                        }\n                                    }\n                                    break;\n                            }\n                        }\n                    };\n                    func(ret.WhereParam, param);\n                    return ret;\n                }\n                async invoke(cmd) {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        __.cmds.push({\n                            command: cmd.command,\n                            params: com.params\n                        });\n                    } else\n                        return await __.invoke(cmd.command, cmd.params);\n                }\n                async commit() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        //事务性处理\n                        let data = [];\n                        let cmds = __.cmds;\n                        __.cmds = [];\n                        await V.each(cmds, async v => {\n                            data.push(await __.invoke(v.command, v.params));\n                            return false;\n                        }, true);\n                        return data;\n                    } else\n                        throw new Error('非事务条件下不可调用此方法');\n                }\n                async open() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    __.conn = await V.callback(Mon.MongoClient.connect, Mon.MongoClient, _.params.hosts);\n                    await super.open();\n                }\n                async close() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    try {\n                        __.conn.close();\n                    } catch (e) {}\n                    __.conn = null;\n                    __.cmds = [];\n                    await super.close();\n                }\n            }\n        });\n        _.parser = parser;\n    }\n    createDBConnection() {\n        const {\n            _,\n            __\n        } = pri(this);\n        return new __.MongoSQLConnection();\n    };\n    backDBConnection(conn) {\n        conn.close();\n    };\n};\n\n/*redis nosql 支持\n * 目前事务未支持\n */\nexport const NiRedisSqlDataFactory2 = class extends NiDataFactory {\n    constructor(parser) {\n        super();\n        let that = this;\n        const {\n            _,\n            __\n        } = pri(that, {\n            RedisSqlConnection: class extends NiDataConnection {\n                constructor() {\n                    super();\n                    const _this = this;\n                    const {\n                        _,\n                        __\n                    } = pri(this, {\n                        cmds: [],\n                        host: \"\",\n                        port: \"\",\n                        password: \"\",\n                        method: \"\",\n                        timeout: 60000,\n                        db: 0,\n                        conn: null,\n                        getValues: function(data, keys) {\n                            var ret = {},\n                                i = 0;\n                            for (let k in keys)(ret[k] = data[k], i++);\n                            return i ? ret : data;\n                        },\n                        invoke: async(command, params) => {\n                            const {\n                                _,\n                                __\n                            } = pri(_this);\n                            try {\n                                let queryList = that.parser.parse(command, params);\n                                let data = [];\n                                var trans = false;\n                                var transprefunc = [];\n                                var transfunc = [];\n                                var debug = (params['_debug'] && params['_debug'].value);\n                                await V.each(queryList, async(v, call) => {\n                                        var table = V.hash2(v.Table) + \"\";\n                                        var key1 = V.toJsonString(v.IDs);\n                                        var key = V.hash2(key1) + \"\";\n                                        switch (v.Method.toLowerCase().trim()) {\n                                            case \"transaction\":\n                                                trans = true;\n                                                break;\n                                            case \"select\":\n                                                {\n                                                    key = v.Table + key;\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', key);\n                                                    if (trans) {\n                                                        transfunc.push(call => __.conn.get(key, call));\n                                                    } else {\n                                                        const res = await V.callback(call => __.conn.get(key, call));\n                                                        try {\n                                                            const jsdat = ('' + res).startsWith('{') ? __.getValues(V.json(res), v.MethodParam) : res;\n\n                                                            data.push([jsdat]);\n                                                        } catch (e) {\n                                                            for (let k in v.IDs) {\n                                                                const ret2 = {};\n                                                                ret2[k] = res;\n                                                                data.push(ret2);\n                                                                break;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                                break;\n                                            case 'increase':\n                                                {\n                                                    const datetime2 = V.toJsonString(v.DateTimeParam).length > 2 ? (() => {\n                                                        for (let k in v.DateTimeParam) return v.DateTimeParam[k];\n                                                    })() : _.params.datetime;\n                                                    const values2 = {};\n                                                    for (let k in v.MethodParam) {\n                                                        let v2 = v.MethodParam[k];\n                                                        v2 = typeof v2.value === 'undefined' ? v2 : v2.value;\n                                                        values2[k] = v2;\n                                                        if (typeof v2 === 'undefined' || v2.type) throw new Error(`参数${k}不能为undefined`);\n                                                    }\n\n                                                    const key2 = V.hash2(V.toJsonString(v.IDs)) + \"\";\n                                                    const value2 = (values2['_value'] !== undefined && values2['_value'] !== null) ? values2['_value'] : V.toJsonString(values2);\n                                                    const majorkey2 = v.Table + key2;\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', majorkey2);\n                                                    let func = null;\n                                                    if (datetime2 != '-1') {\n                                                        func = call => {\n                                                            __.conn.incrby(majorkey2, value2, (err, ret) => {\n                                                                if (err) call(err);\n                                                                else\n                                                                    __.conn.expire(majorkey2, (parseInt(datetime2) || 0) / 1000, function(err) {\n                                                                        call(err, ret);\n                                                                    });\n                                                            });\n                                                        }\n                                                    } else {\n                                                        func = call => { __.conn.incrby(majorkey2, value2, call); }\n                                                    }\n\n                                                    if (trans) {\n                                                        //transprefunc.push(call => __.conn.watch(majorkey2, call)\n                                                        transfunc.push(func);\n                                                    } else {\n                                                        const res = await V.callback(func);\n                                                        data.push([{\n                                                            value: res\n                                                        }]);\n                                                    }\n                                                }\n                                                break;\n                                            case 'lock':\n                                                {\n                                                    const datetime = V.toJsonString(v.DateTimeParam).length > 2 ? (() => {\n                                                        for (let k in v.DateTimeParam) return v.DateTimeParam[k];\n                                                    })() : _.params.datetime;\n                                                    const values = {};\n                                                    for (let k in v.MethodParam) {\n                                                        let v2 = v.MethodParam[k];\n                                                        v2 = typeof v2.value === 'undefined' ? v2 : v2.value;\n                                                        values[k] = v2;\n                                                        if (typeof v2 === 'undefined' || v2.type) throw new Error(`参数${k}不能为undefined`);\n                                                    }\n\n                                                    const value = (values['_value'] !== undefined && values['_value'] !== null) ? values['_value'] : V.toJsonString(values);\n                                                    const majorkey = v.Table + key;\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', majorkey);\n                                                    let func = null;\n                                                    //setnx 设置安全锁\n                                                    if (datetime != '-1') {\n                                                        func = call => {\n                                                            __.conn.setnx(majorkey, value, (err, ret) => {\n                                                                if (err) call(err);\n                                                                else\n                                                                    __.conn.expire(majorkey, (parseInt(datetime) || 0) / 1000, function(err) {\n                                                                        call(err, ret);\n                                                                    });\n                                                            });\n                                                        }\n                                                    } else {\n                                                        func = call => __.conn.setnx(majorkey, value, call);\n                                                    }\n                                                    if (trans) {\n                                                        transprefunc.push(call => __.conn.watch(majorkey, call));\n                                                        transfunc.push(func);\n                                                    } else {\n                                                        var ret = await V.callback(func);\n                                                        data.push([{\n                                                            value: ret\n                                                        }]);\n                                                    }\n                                                }\n                                                break;\n                                            case \"insert\":\n                                            case \"update\":\n                                                {\n                                                    const datetime = V.toJsonString(v.DateTimeParam).length > 2 ? (() => {\n                                                        for (let k in v.DateTimeParam) return v.DateTimeParam[k];\n                                                    })() : _.params.datetime;\n                                                    const values = {};\n                                                    for (let k in v.MethodParam) {\n                                                        let v2 = v.MethodParam[k];\n                                                        v2 = typeof v2.value === 'undefined' ? v2 : v2.value;\n                                                        values[k] = v2;\n                                                        if (typeof v2 === 'undefined' || v2.type) throw new Error(`参数${k}不能为undefined`);\n                                                    }\n\n                                                    const value = (values['_value'] !== undefined && values['_value'] !== null) ? values['_value'] : V.toJsonString(values);\n                                                    const majorkey = v.Table + key;\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', majorkey);\n                                                    let func = null;\n                                                    //setnx 设置安全锁\n                                                    if (datetime != '-1') {\n                                                        func = call => __.conn.set(majorkey, value, \"px\", datetime, call);\n                                                    } else {\n                                                        func = call => __.conn.set(majorkey, value, call);\n                                                    }\n\n                                                    if (trans) {\n                                                        transprefunc.push(call => __.conn.watch(majorkey, call));\n                                                        transfunc.push(func);\n                                                    } else {\n                                                        await V.callback(func);\n                                                        data.push([{\n                                                            value: 1\n                                                        }]);\n                                                    }\n                                                }\n                                                break;\n                                            case \"delete\":\n                                                {\n                                                    var majorkey = v.Table + key;\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', majorkey);\n                                                    if (trans) {\n                                                        transprefunc.push(call => __.conn.watch(majorkey, call));\n                                                        transfunc.push(call => {\n                                                            __.conn.del(majorkey, () => {\n                                                                __.conn.del(table, call);\n                                                            })\n                                                        });\n                                                    } else {\n                                                        await V.callback(call => __.conn.del(majorkey, call));\n                                                        await V.callback(call => __.conn.del(table, call));\n                                                        data.push([{\n                                                            value: 1\n                                                        }]);\n                                                    }\n                                                }\n                                                break;\n                                            case 'hkeys':\n                                                {\n                                                    if (trans) {\n                                                        debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                        transfunc.push(call => __.conn.hgetall(table, (e, d) => {\n                                                            if (e) call(e)\n                                                            else {\n                                                                var ID = (function() {\n                                                                    for (var k in v.IDs) return k;\n                                                                })() || '';\n                                                                var keys = {};\n                                                                for (var k in d || {}) {\n                                                                    try {\n                                                                        if (k.startsWith('{')) k = V.json(k)[ID];\n                                                                    } catch (e) {\n                                                                        console.log('hgets json error', v2);\n                                                                    }\n                                                                    keys[k] = true;\n                                                                }\n                                                                call(null, keys)\n                                                            }\n                                                        }));\n                                                    } else {\n                                                        debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                        let res = await V.callback(call => __.conn.hgetall(table, (e, d) => {\n\n                                                            var ID = (function() {\n                                                                for (var k in v.IDs) return k;\n                                                            })() || '';\n                                                            var keys = {};\n                                                            for (var k in d || {}) {\n                                                                try {\n                                                                    if (k.startsWith('{')) k = V.json(k)[ID];\n                                                                } catch (e) {\n                                                                    console.log('hgets json error', v2);\n                                                                }\n                                                                keys[k] = true;\n                                                            }\n                                                            call(null, keys)\n                                                        }));\n                                                        try {\n                                                            data.push([res]);\n                                                        } catch (e) {\n                                                            for (let k in v.IDs) {\n                                                                const ret2 = {};\n                                                                ret2[k] = res;\n                                                                data.push(ret2);\n                                                                break;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                                break;\n                                            case 'hgets':\n                                                {\n                                                    if (trans) {\n                                                        debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                        transfunc.push(call => __.conn.hgetall(table, (e, d) => {\n                                                            if (e) call(e)\n                                                            else {\n                                                                var ID = (function() {\n                                                                    for (var k in v.IDs) return k;\n                                                                })() || '';\n                                                                var keys = {};\n                                                                for (var k in d || {}) {\n                                                                    var v2 = d[k];\n                                                                    try {\n                                                                        if (k.startsWith('{')) k = V.json(k)[ID];\n                                                                        if (v2.startsWith('{')) v2 = V.json(V.json(v2).value);\n                                                                    } catch (e) {\n                                                                        console.log('hgets json error', v2);\n                                                                    }\n                                                                    keys[k] = v2;\n                                                                }\n                                                                call(null, keys)\n                                                            }\n                                                        }));\n                                                    } else {\n                                                        debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                        let res = await V.callback(call => __.conn.hgetall(table, (e, d) => {\n\n                                                            var ID = (function() {\n                                                                for (var k in v.IDs) return k;\n                                                            })() || '';\n                                                            var keys = {};\n                                                            for (var k in d || {}) {\n                                                                var v2 = d[k];\n                                                                try {\n                                                                    if (k.startsWith('{')) k = V.json(k)[ID];\n                                                                    if (v2.startsWith('{')) v2 = V.json(V.json(v2).value);\n                                                                } catch (e) {\n                                                                    console.log('hgets json error', v2);\n                                                                }\n                                                                keys[k] = v2;\n                                                            }\n                                                            call(null, keys)\n                                                        }));\n                                                        try {\n                                                            data.push([res]);\n                                                        } catch (e) {\n                                                            for (let k in v.IDs) {\n                                                                const ret2 = {};\n                                                                ret2[k] = res;\n                                                                data.push(ret2);\n                                                                break;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                                break;\n                                            case \"hlen\":\n                                            case \"hcount\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    if (trans) {\n                                                        transfunc.push(call =>\n                                                            __.conn.hlen(table, call));\n                                                    } else {\n                                                        try {\n                                                            let res = await V.callback(call => __.conn.hlen(table, call));\n                                                            data.push([{ count: res }]);\n                                                        } catch (e) {\n                                                            data.push([{ count: 0 }]);\n                                                        }\n                                                    }\n                                                }\n                                                break;\n                                            case \"hselect\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    if (trans) {\n                                                        transfunc.push(call => __.conn.hget(table, key1, call));\n                                                    } else {\n                                                        const res = await V.callback(call => __.conn.hget(table, key1, call));\n                                                        try {\n                                                            const jsdat = ('' + res).startsWith('{') ? __.getValues(V.json(res), v.MethodParam) : res;\n                                                            data.push([jsdat]);\n                                                        } catch (e) {\n                                                            for (let k in v.IDs) {\n                                                                const ret2 = {};\n                                                                ret2[k] = res;\n                                                                data.push(ret2);\n                                                                break;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                                break;\n                                            case \"hmselect\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    var keys = v.IDs[Object['keys'](v.IDs)[0]].split(',');\n                                                    if (trans) {\n                                                        transfunc.push(call => __.conn.hmget(table, keys, call));\n                                                    } else {\n                                                        const res = await V.callback(call => __.conn.hmget(table, keys, call));\n                                                        try {\n                                                            const jsdat = [];\n                                                            res.forEach(v2 => jsdat.push(('' + v).startsWith('{') ? __.getValues(V.json(v2), v.MethodParam) : v2));\n                                                            data.push(jsdat);\n                                                        } catch (e) {\n                                                            for (let k in v.IDs) {\n                                                                const ret2 = {};\n                                                                ret2[k] = res;\n                                                                data.push(ret2);\n                                                                break;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                                break;\n                                            case 'hlock':\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    const values3 = {};\n                                                    for (let k in v.MethodParam) {\n                                                        let v2 = v.MethodParam[k];\n                                                        v2 = typeof v2.value === 'undefined' ? v2 : v2.value;\n                                                        values3[k] = v2;\n                                                        if (typeof v2 === 'undefined' || v2.type) throw new Error(`参数${k}不能为undefined`);\n                                                    }\n                                                    const value3 = (values3['_value'] !== undefined && values3['_value'] !== null) ? values3['_value'] : V.toJsonString(values3);\n                                                    if (trans) {\n                                                        transprefunc.push(call => __.conn.watch(table, call))\n                                                        transfunc.push(call => __.conn.hsetnx(table, key1, value3, call));\n                                                    } else {\n                                                        var ret = await V.callback(call => __.conn.hsetnx(table, key1, value3, call));\n                                                        data.push([{\n                                                            value: ret\n                                                        }]);\n                                                    }\n                                                }\n                                                break;\n                                            case \"hinsert\":\n                                            case \"hupdate\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    const values3 = {};\n                                                    for (let k in v.MethodParam) {\n                                                        let v2 = v.MethodParam[k];\n                                                        v2 = typeof v2.value === 'undefined' ? v2 : v2.value;\n                                                        values3[k] = v2;\n                                                        if (typeof v2 === 'undefined' || v2.type) throw new Error(`参数${k}不能为undefined`);\n                                                    }\n                                                    const value3 = (values3['_value'] !== undefined && values3['_value'] !== null) ? values3['_value'] : V.toJsonString(values3);\n                                                    if (trans) {\n                                                        transprefunc.push(call => __.conn.watch(table, call))\n                                                        transfunc.push(call => __.conn.hmset(table, key1, value3, call));\n                                                    } else {\n                                                        await V.callback(call => __.conn.hmset(table, key1, value3, call));\n                                                        data.push([{\n                                                            value: 1\n                                                        }]);\n                                                    }\n                                                }\n                                                break;\n                                            case \"hincrease\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    let values3 = {};\n                                                    for (let k in v.MethodParam) {\n                                                        if (!k) { continue; }\n                                                        let v2 = v.MethodParam[k];\n                                                        v2 = typeof v2.value === 'undefined' ? v2 : v2.value;\n                                                        values3[k] = v2;\n                                                        if (typeof v2 === 'undefined' || v2.type) throw new Error(`参数${k}不能为undefined`);\n                                                    }\n                                                    let value3 = (values3['_value'] !== undefined && values3['_value'] !== null) ? values3['_value'] : V.toJsonString(values3);\n                                                    if (trans) {\n                                                        transprefunc.push(call => __.conn.watch(table, call))\n                                                        transfunc.push(call => __.conn.hincrby(table, key1, value3, call));\n                                                    } else {\n                                                        var ret = await V.callback(call => __.conn.hincrby(table, key1, value3, call));\n                                                        data.push([{\n                                                            value: ret\n                                                        }]);\n                                                    }\n                                                }\n                                                break;\n                                            case \"hdelete\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    if (trans) {\n                                                        transprefunc.push(call => __.conn.watch(table));\n                                                        transfunc.push(call => __.conn.hdel(table, key1, call));\n                                                    } else {\n                                                        await V.callback(call => __.conn.hdel(table, key1, call));\n                                                        data.push([{\n                                                            value: 1\n                                                        }]);\n                                                    }\n                                                }\n                                                break;\n                                            case \"zlen\":\n                                            case \"zcount\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    let limita = parseInt(v.LimitParam && v.LimitParam['_0'] && v.LimitParam[v.LimitParam['_0']]) || '-inf';\n                                                    let limitb = parseInt(v.LimitParam && v.LimitParam['_1'] && v.LimitParam[v.LimitParam['_1']]) || null;!limitb ? (limitb = '+inf') : (limitb = limita + limitb - 1);\n                                                    let calls = call => __.conn.zcount(table, limita, limitb, call);\n\n                                                    if (trans) {\n                                                        transfunc.push(calls);\n                                                    } else {\n                                                        try {\n                                                            const res = await V.callback(calls);\n                                                            data.push([{ count: res }]);\n                                                        } catch (e) {\n                                                            data.push([{ count: 0 }]);\n                                                        }\n                                                    }\n                                                }\n                                                break;\n                                            case \"zselect\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    let keyID = Object['keys'](v.IDs)[0],\n                                                        key = null;\n                                                    const orders = (() => {\n                                                        if (v.OrderParam)\n                                                            for (let k in v.OrderParam) return v.OrderParam[k];\n                                                        else return 'asc';\n                                                    })() || 'asc';\n                                                    let limita = parseInt(v.LimitParam && v.LimitParam['_0'] && v.LimitParam[v.LimitParam['_0']]) || 0;\n                                                    let limitb = parseInt(v.LimitParam && v.LimitParam['_1'] && v.LimitParam[v.LimitParam['_1']]) || null;!limitb ? (limitb = limita - 1, limita = 0) : (limitb = limita + limitb - 1);\n                                                    let scorea = null,\n                                                        scoreb = null;\n                                                    if (v.WhereParam) {\n                                                        const node = [v.WhereParam];\n                                                        while (node.length) {\n                                                            var _node = node.pop();\n                                                            for (let k in _node) {\n                                                                let v2 = _node[k];\n                                                                if (v2 && v2.score)\n                                                                    switch (k) {\n                                                                        case '<':\n                                                                            scoreb = '(' + v2.score;\n                                                                            break;\n                                                                        case '<=':\n                                                                            scoreb = v2.score;\n                                                                            break;\n                                                                        case '>':\n                                                                            scorea = '(' + v2.score;\n                                                                            break;\n                                                                        case '>=':\n                                                                            scorea = v2.score;\n                                                                            break;\n                                                                        default:\n                                                                            break;\n                                                                    } else switch (k) {\n                                                                        case 'score':\n                                                                            scorea = v2;\n                                                                            break;\n                                                                        case keyID:\n                                                                            key = v.IDs[keyID];\n                                                                            break;\n                                                                        default:\n                                                                            node.push(v2);\n                                                                            break;\n                                                                    }\n                                                            }\n                                                        }\n                                                    }\n\n                                                    let calls = null;\n                                                    //console.log(2324, orders, table, scorea, scoreb, !scorea && !scoreb, limita, limitb);\n                                                    if (key && key.length) {\n                                                        calls = call => {\n                                                            V.callback2(call2 => __.conn.zscore(table, key, call2)).then(v => {\n                                                                call(null, [key, v]);\n                                                            }).catch(call);\n                                                        };\n                                                    } else if (orders == 'asc') {\n                                                        if (!scorea && !scoreb) {\n                                                            //orders='zrange';\n                                                            calls = call => __.conn.zrange(table, limita, limitb, \"WITHSCORES\", call);\n                                                        } else {\n                                                            calls = call => __.conn.zrangebyscore(table, scorea || '-inf', scoreb || '+inf', 'limit', limita, limitb, \"WITHSCORES\", call);\n                                                        }\n\n                                                    } else if (!scorea && !scoreb) {\n                                                        //orders='zrange';\n                                                        calls = call => __.conn.zrevrange(table, limita, limitb, \"WITHSCORES\", call);\n                                                    } else {\n                                                        calls = call => __.conn.zrevrangebyscore(table, scorea || '-inf', scoreb || '+inf', 'limit', limita, limitb, \"WITHSCORES\", call);\n                                                    }\n                                                    if (trans) {\n                                                        transfunc.push(calls);\n                                                    } else {\n                                                        const res = await V.callback(calls);\n                                                        try {\n                                                            let _v = [];\n                                                            res.forEach((v, i) => {\n                                                                (i % 2 == 0) && (_v.push({ key: v, value: res[i + 1] }));\n                                                                return null;\n                                                            });\n                                                            data.push(_v);\n                                                            //console.log(2352, data);\n                                                        } catch (e) {\n                                                            for (let k in v.IDs) {\n                                                                const ret2 = {};\n                                                                ret2[k] = res;\n                                                                data.push(ret2);\n                                                                break;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                                break;\n                                            case 'zrank':\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    var keys = v.IDs[Object['keys'](v.IDs)[0]];\n                                                    const orders = (() => {\n                                                        if (v.OrderParam)\n                                                            for (let k in v.OrderParam) return v.OrderParam[k];\n                                                        else return 'asc';\n                                                    })() || 'asc';\n\n                                                    let calls = null;\n                                                    if (orders == 'asc') {\n                                                        calls = call => __.conn.zrank(table, keys, call);\n                                                    } else {\n                                                        calls = call => __.conn.zrevrank(table, keys, call);\n                                                    }\n                                                    if (trans) {\n                                                        transfunc.push(calls);\n                                                    } else {\n                                                        let res = await V.callback(calls);\n                                                        try {\n                                                            //console.log(2350, res, v, key);\n                                                            if (null !== res) {\n                                                                let _v = {};\n                                                                _v[keys] = res + 1;\n                                                                data.push(_v);\n                                                            }\n                                                            //console.log(2352, data);\n                                                        } catch (e) {\n                                                            for (let k in v.IDs) {\n                                                                const ret2 = {};\n                                                                ret2[k] = res;\n                                                                data.push(ret2);\n                                                                break;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                                break;\n                                            case \"zpop\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    var key = Object['keys'](v.IDs)[0];\n                                                    const orders = (() => {\n                                                        if (v.OrderParam)\n                                                            for (let k in v.OrderParam) return v.OrderParam[k];\n                                                        else return 'asc';\n                                                    })() || 'asc';\n                                                    let limita = parseInt(v.LimitParam && v.LimitParam['_0'] && v.LimitParam[v.LimitParam['_0']]) || 0;\n                                                    let limitb = parseInt(v.LimitParam && v.LimitParam['_1'] && v.LimitParam[v.LimitParam['_1']]) || null;!limitb ? (limitb = limita - 1, limita = 0) : (limitb = limita + limitb - 1);\n\n                                                    let calls = null;\n                                                    //console.log(2324, orders, table, scorea, scoreb, 'limit', limita, limita + limitb - 1, );\n                                                    if (orders == 'asc') {\n                                                        calls = call => __.conn.zpopmin(table, limita, limitb, \"WITHSCORES\", call);\n                                                    } else {\n                                                        calls = call => __.conn.zpopmax(table, limita, limitb, \"WITHSCORES\", call);\n                                                    }\n                                                    if (trans) {\n                                                        transfunc.push(calls);\n                                                    } else {\n                                                        let res = await V.callback(calls);\n                                                        try {\n                                                            //console.log(2350, res, v, key);\n                                                            let _v = {};\n                                                            V.isArray(res) ? (_v[res[0]] = res[1]) : (_v = res);\n                                                            data.push(_v);\n                                                            //console.log(2352, data);\n                                                        } catch (e) {\n                                                            for (let k in v.IDs) {\n                                                                const ret2 = {};\n                                                                ret2[k] = res;\n                                                                data.push(ret2);\n                                                                break;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                                break;\n                                            case \"zinsert\":\n                                            case \"zupdate\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    const score = parseInt(v.MethodParam.score && v.MethodParam.score.value || v.MethodParam.score) || 0;\n                                                    var keys = v.IDs[Object['keys'](v.IDs)[0]];\n                                                    if (trans) {\n                                                        transprefunc.push(call => __.conn.watch(table, call))\n                                                        transfunc.push(call => __.conn.zadd(table, score, keys, call));\n                                                    } else {\n                                                        await V.callback(call => __.conn.zadd(table, score, keys, call));\n                                                        data.push([{\n                                                            key: keys,\n                                                            value: score\n                                                        }]);\n                                                    }\n                                                }\n                                                break;\n                                            case \"zincrease\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    const score = parseInt(v.MethodParam.score && v.MethodParam.score.value || v.MethodParam.score) || 0;\n                                                    var keys = v.IDs[Object['keys'](v.IDs)[0]];\n                                                    if (trans) {\n                                                        transprefunc.push(call => __.conn.watch(table, call))\n                                                        transfunc.push(call => __.conn.zincrby(table, score, keys, call));\n                                                    } else {\n                                                        var ret = await V.callback(call => __.conn.zincrby(table, score, keys, call));\n                                                        data.push([{\n                                                            key: keys,\n                                                            value: ret\n                                                        }]);\n                                                    }\n                                                }\n                                                break;\n                                            case \"zdelete\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    var keys = v.IDs[Object['keys'](v.IDs)[0]];\n                                                    if (trans) {\n                                                        transprefunc.push(call => __.conn.watch(table, call));\n                                                        transfunc.push(call => { return { value: __.conn.zrem(table, keys, call) } });\n                                                    } else {\n                                                        //console.log(2442);\n                                                        data.push([{\n                                                            value: await V.callback(call => __.conn.zrem(table, keys, call))\n                                                        }]);\n                                                    }\n                                                }\n\n                                                break;\n                                            case \"llen\":\n                                            case \"lcount\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    if (trans) {\n                                                        transfunc.push(call =>\n                                                            __.conn.llen(table, call));\n                                                    } else {\n                                                        try {\n                                                            let res = await V.callback(call => __.conn.llen(table, call));\n                                                            data.push([{ count: res }]);\n                                                        } catch (e) {\n                                                            data.push([{ count: 0 }]);\n                                                        }\n                                                    }\n                                                }\n                                                break;\n                                            case \"lpop\":\n                                            case \"lselect\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    let limit = (function() { for (var k in v.LimitParam) return v.LimitParam[k]; })();\n                                                    if (typeof limit !== 'undefined') {\n                                                        limit = limit.value || limit;\n                                                        if (limit.type) throw new Error('lselect limit 请输入极限值!');\n                                                    }\n\n                                                    if (trans) {\n                                                        transfunc.push(call =>\n                                                            limit ? (function() {\n                                                                let index = 0,\n                                                                    datas = [];\n                                                                V.whileC(() => index < limit ? index++ : null, function(i, call2) {\n                                                                    __.conn.lpop(table, function(e, d) {\n                                                                        d === null ? (index = limit) : datas.push(d);\n                                                                        call2(e);\n                                                                    })\n                                                                }, true).then(function() {\n                                                                    call(null, datas);\n                                                                }).catch(call);\n                                                            })() : __.conn.lpop(table, call));\n                                                    } else {\n                                                        let res = await V.callback(call => limit ? (function() {\n                                                            let index = 0,\n                                                                datas = [];\n                                                            V.whileC(() => index < limit ? index++ : null, function(i, call2) {\n                                                                __.conn.lpop(table, function(e, d) {\n                                                                    d === null ? (index = limit) : datas.push(d);\n                                                                    call2(e);\n                                                                })\n                                                            }, true).then(function() {\n                                                                call(null, datas);\n                                                            }).catch(call);\n                                                        })() : __.conn.lpop(table, call));\n                                                        try {\n                                                            !V.isArray(res) && (res = res === null ? [] : [res]);\n                                                            res.forEach(function(v, i) {\n                                                                res[i] = ('' + v).startsWith('{') ? __.getValues(V.json(v), v.MethodParam) : v;\n                                                            })\n                                                            data.push(res);\n                                                        } catch (e) {\n                                                            for (let k in v.IDs) {\n                                                                const ret2 = {};\n                                                                ret2[k] = res;\n                                                                data.push(ret2);\n                                                                break;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n\n                                                break;\n                                            case \"linsert\":\n                                            case \"lupdate\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    const value = key1;\n                                                    if (trans) {\n                                                        transprefunc.push(call => __.conn.watch(table, call));\n                                                        transfunc.push(call => __.conn.rpush(table, value, call));\n                                                    } else {\n                                                        await V.callback(call => __.conn.rpush(table, value, call));\n                                                        data.push([{\n                                                            value: 1\n                                                        }]);\n                                                    }\n                                                }\n                                                break;\n                                            case \"ldelete\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    if (trans) {\n                                                        transprefunc.push(call => __.conn.watch(table));\n                                                        transfunc.push(call => __.conn.lrem(table, 0, key1, call));\n                                                    } else {\n                                                        await V.callback(call => __.conn.lrem(table, 0, key1, call));\n                                                        data.push([{\n                                                            value: 1\n                                                        }]);\n                                                    }\n                                                }\n                                                break;\n                                            case \"dbs\":\n                                                {\n                                                    if (trans) {\n                                                        transfunc.push(call => __.conn.dbs(call));\n                                                    } else {\n                                                        const res = await V.callback(call => __.conn.dbs(call));\n                                                        data.push([res]);\n                                                    }\n                                                }\n                                                break;\n                                            case \"hngcrease\":\n                                                {\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    let values3 = {};\n                                                    for (let k in v.MethodParam) {\n                                                        if (!k) { continue; }\n                                                        let v2 = v.MethodParam[k];\n                                                        v2 = typeof v2.value === 'undefined' ? v2 : v2.value;\n                                                        values3[k] = v2;\n                                                        if (typeof v2 === 'undefined' || v2.type) throw new Error(`参数${k}不能为undefined`);\n                                                    }\n                                                    let value3 = values3['_value'];\n                                                    if (!(/^[1-9]+/.test(value3))) {\n                                                        throw new Error(`参数_value必需为正整数`);\n                                                    }\n                                                    if (trans) {\n                                                        transprefunc.push(call => __.conn.watch(table, call));\n                                                        transfunc.push(call => __.conn.hngcrby(table, key1, -value3, value3, call));\n                                                    } else {\n                                                        var ret = await V.callback(call => __.conn.hngcrby(table, key1, -value3, value3, call));\n                                                        data.push([{\n                                                            value: ret\n                                                        }]);\n                                                    }\n                                                }\n                                                break;\n                                            case 'ngcrease':\n                                                {\n                                                    const values2 = {};\n                                                    for (let k in v.MethodParam) {\n                                                        let v2 = v.MethodParam[k];\n                                                        v2 = typeof v2.value === 'undefined' ? v2 : v2.value;\n                                                        values2[k] = v2;\n                                                        if (typeof v2 === 'undefined' || v2.type) throw new Error(`参数${k}不能为undefined`);\n                                                    }\n\n                                                    const key2 = V.hash2(V.toJsonString(v.IDs)) + \"\";\n                                                    let value2 = values2['_value'];\n                                                    if (!(/^[1-9]+/.test(value2))) {\n                                                        throw new Error(`参数_value必需为正整数`);\n                                                    }\n                                                    const majorkey2 = v.Table + key2;\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', majorkey2);\n                                                    let func = null;\n                                                    func = call => { __.conn.ngcrby(majorkey2, value2, call); }\n                                                    if (trans) {\n                                                        //transprefunc.push(call => __.conn.watch(majorkey2, call)\n                                                        transfunc.push(func);\n                                                    } else {\n                                                        const res = await V.callback(func);\n                                                        data.push([{\n                                                            value: res\n                                                        }]);\n                                                    }\n                                                }\n                                                break;\n                                            case \"expire\": //支持非普通字符串的key\n                                                {\n                                                    let datetime = Object.values(v.IDs)[0];\n                                                    if (!datetime) {\n                                                        throw new Error(`参数${v.IDs}不能为undefined`);\n                                                    }\n                                                    debug && console.log(v.Method.toLowerCase().trim(), 'key:', v.Table, '=>', table);\n                                                    if (trans) {\n                                                        transfunc.push(call => __.conn.expire(table, (parseInt(datetime) || 0) / 1000, call));\n                                                    } else {\n                                                        const res = await V.callback(call => __.conn.expire(table, (parseInt(datetime) || 0) / 1000, call));\n                                                        data.push([res]);\n                                                    }\n                                                }\n                                                break;\n                                            default:\n                                                throw new Error('NiRedisSqlDataFactory2 不支持的命令:' + v.Method);\n                                        }\n                                        return false;\n                                    },\n                                    true);\n\n\n                                if (trans) {\n                                    await V.each(transprefunc, async(v, call) => {\n                                        await V.callback(v);\n                                        return false;\n                                    }, true);\n                                    await __.conn.multi({\n                                        pipeline: false\n                                    });\n                                    await V.each(transfunc, async(v, call) => {\n                                        await V.callback(v);\n                                        return false;\n                                    }, true);\n                                    const rets = await V.callback(call => __.conn.exec(call));\n                                    await V.each(rets, v2 => {\n                                        try {\n                                            var jsdat = ('' + v2[1]).startsWith('{') ? V.json(v2[1]) : v2[1];\n                                            if ('' + jsdat == '' + v2[1])\n                                                data.push([{ value: jsdat }]);\n                                            else data.push(jsdat);\n                                        } catch (e) {\n                                            data.push([{ value: v2[1] }]);\n                                        }\n                                        return false;\n                                    });\n                                }\n                                return data;\n                            } catch (e) {\n                                console.log(command, params);\n                                console.log(e.message);\n                                throw e;\n                            }\n                        }\n                    });\n                    _.params = {\n                        connectionLimit: 10,\n                        datetime: -1\n                    };\n                }\n                async invoke(cmd) {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        __.cmds.push({\n                            command: cmd.command,\n                            params: cmd.params\n                        });\n                    } else\n                        return await __.invoke(cmd.command, cmd.params);\n                }\n                async commit() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        //事务性处理\n                        let data = [];\n                        let cmds = __.cmds;\n                        __.cmds = [];\n                        await V.each(cmds, async v => {\n                            data.push(await __.invoke(v.command, v.params));\n                        }, true);\n                        return data;\n                    } else\n                        throw new Error('非事务条件下不可调用此方法');\n                }\n                async open() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n\n                    __.host = _.params.host || '127.0.0.1';\n                    __.port = _.params.port || 6379;\n                    __.password = _.params.password || '';\n                    __.timeout = _.params.timeout || 60000;\n                    __.db = _.params.db || 0;\n                    __.family = _.params.family || 4;\n\n                    let redisargs = {\n                        port: __.port, // Redis port \n                        host: __.host, // Redis host \n                        family: __.family, // 4 (IPv4) or 6 (IPv6) \n                        password: __.password,\n                        db: __.db\n                    }\n                    __.conn = new Redis(redisargs);\n                    __.conn.defineCommand('dbs', {\n                        numberOfKeys: 0,\n                        lua: \"return redis.call('config','get','databases')[2]\"\n                    });\n                    /**\n                     *\n                     * @desc 扣减库存Lua脚本\n                     * 库存（stock）-1：表示不限库存\n                     * 库存（stock）0：表示没有库存\n                     * 库存（stock）大于0：表示剩余库存\n                     *\n                     * @params 库存key\n                     * @return\n                     *      0:库存不足\n                     *      -1:库存未初始化\n                     *      大于0:剩余库存（扣减之前剩余的库存）\n                     *      redis缓存的库存(value)是-1表示不限库存，直接返回1\n                     */\n                    __.conn.defineCommand('hngcrby', {\n                        numberOfKeys: 2,\n                        lua: \"if (redis.call('hexists', KEYS[1],KEYS[2]) == 1) then local stock = tonumber(redis.call('hget', KEYS[1],KEYS[2]));if (stock >= tonumber(ARGV[2])) then redis.call('hincrby', KEYS[1],KEYS[2],ARGV[1]);return stock;end;return 0;end;return -1;\"\n                    });\n                    __.conn.defineCommand('ngcrby', {\n                        numberOfKeys: 1,\n                        lua: \"if (redis.call('exists', KEYS[1]) == 1) then local stock = tonumber(redis.call('get', KEYS[1]));if (stock >= tonumber(ARGV[1])) then redis.call('decrby', KEYS[1],ARGV[1]);return stock;end;return 0;end;return -1;\"\n                    });\n                    await super.open();\n                }\n                async close() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    try {\n                        __.conn.end();\n                    } catch (e) {}\n                    __.cmds = [];\n                    __.conn = null;\n                    await super.close();\n                }\n            }\n        });\n        _.parser = parser;\n    }\n    createDBConnection() {\n        const {\n            _,\n            __\n        } = pri(this);\n        return new __.RedisSqlConnection();\n    };\n    backDBConnection(conn) {\n        conn.close();\n    };\n};\nexport const NiRedisSqlDataFactory = NiRedisSqlDataFactory2;\n\n//todo  wcf\n\n/**\n * NiUrlDataFactory\n * 自动调用远程URL\n */\nexport const NiUrlDataFactory = class extends NiDataFactory {\n    constructor() {\n        super();\n        const that = this;\n        that.regex = new RegExp('^((http|https):\\\\/\\\\/[\\\\w\\\\-_]+(\\.[\\\\w\\\\-_]+)+([\\\\w\\\\-\\\\.,@?^=%&amp;:/~\\\\+#]*[\\\\w\\\\-\\\\@?^=%&amp;/~\\+#])?)$', 'i');\n        const {\n            _,\n            __\n        } = pri(that, {\n            UrlConnection: class extends NiDataConnection {\n                constructor() {\n                    super();\n                    const thats = this;\n                    const {\n                        _,\n                        __\n                    } = pri(this, {\n                        cmds: [],\n                        host: \"\",\n                        port: \"\",\n                        method: \"\",\n                        timeout: 60000,\n                        invoke: async(command, params) => {\n                            const {\n                                _,\n                                __\n                            } = pri(thats);\n                            try {\n                                let args = (params.args ? params.args.value : params);\n                                for (let i in args) {\n                                    if (args[i].value) args[i] = args[i].value;\n                                }\n                                const func = (function() {\n                                    switch ((args['_method'] || __.method).toLowerCase()) {\n                                        case 'get':\n                                            delete args['_method'];\n                                            args = Q.stringify(args);\n                                            return N.get;\n                                        case 'post':\n                                        default:\n                                            delete args['_method'];\n                                            args = Q.stringify(args);\n                                            return N.post;\n                                        case 'postjson':\n                                            delete args['_method'];\n                                            return N.postJson;\n                                    }\n                                })(); //立即执行函数获取返回值\n                                let data = [];\n                                await V.each(command.split(';'), async v => {\n                                    v = v.trim();\n                                    if (v.indexOf(':') < 0 && v.indexOf('//') < 0)\n                                        v = (function() {\n                                            let h = __.host.length > 0 ? __.host[V.random() % __.host.length] : __.host[0];\n                                            if (h.indexOf(':') < 0 && h.indexOf('//') < 0)\n                                                h = 'http://' + h;\n                                            return h;\n                                        })() + (V.isValid(__.port) && (__.port + \"\") != '80' ? \":\" + __.port : \"\") + v;\n                                    if (that.regex.test(v)) {\n                                        const text = (await func(v, args)) || '';\n                                        try {\n                                            data.push([V.json(text)]);\n                                        } catch (e) {\n                                            data.push([{ text: text }]);\n                                        }\n                                    } else\n                                        throw new Error(`错误的路径${v}`);\n                                    return false;\n                                }, true);\n                                return data;\n                            } catch (e) {\n                                console.log(command, params);\n                                console.log(e.message);\n                                throw e;\n                            }\n                        }\n                    });\n                }\n                async open() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    __.host = (_.params.host || '').split(';');\n                    __.port = _.params.port || 80;\n                    __.method = _.params.method || 'POST';\n                    __.timeout = _.params.timeout || 60000;\n                    await super.open();\n                }\n                async close() {\n                    await super.close();\n                }\n                async invoke(cmd) {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        __.cmds.push({\n                            command: cmd.command,\n                            params: cmd.params\n                        });\n                    } else\n                        return await __.invoke(cmd.command, cmd.params);\n                }\n                async commit() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        //事务性处理\n                        let data = [];\n                        let cmds = __.cmds;\n                        __.cmds = [];\n                        await V.each(cmds, async v => {\n                            data.push(await __.invoke(v.command, v.params));\n                            return false;\n                        }, true);\n                        return data;\n                    } else\n                        throw new Error('非事务条件下不可调用此方法');\n                }\n            }\n        });\n    }\n    createDBConnection() {\n        const {\n            _,\n            __\n        } = pri(this);\n        return new __.UrlConnection();\n    }\n};\n\n/**\n * NiSoapDataFactory\n * soap数据源支持\n */\nexport const NiSoapDataFactory = class extends NiDataFactory {\n    constructor() {\n        super();\n        const that = this;\n        const {\n            _,\n            __\n        } = pri(that, {\n            SoapConnection: class extends NiDataConnection {\n                constructor() {\n                    super();\n                    const thats = this;\n                    const {\n                        _,\n                        __\n                    } = pri(this, {\n                        cmds: [],\n                        host: \"\",\n                        port: \"\",\n                        method: \"\",\n                        // control: \"\",\n                        timeout: 60000,\n                        invoke: async(command, params) => {\n                            const { _, __ } = pri(thats);\n                            var wcfurl = __.host;\n                            var wcfmethod = command;\n                            var wcfargs = {};\n                            let args = (params.args ? params.args.value : params);\n                            for (let i in args) {\n                                wcfargs[i] = args[i].value;\n                            }\n                            var client = await V.callback2(S.createClient, S, wcfurl);\n                            if (client && client[wcfmethod]) {\n                                var ret = await V.callback2(client[wcfmethod], client, wcfargs) || {};\n                                if (V.getType(ret).toLowerCase() != 'array') ret = [\n                                    [ret]\n                                ];\n                                return ret;\n                            } else\n                                throw new Error(`获取client失败或者没有找到${wcfmethod}方法`);\n                        }\n                    });\n                }\n                async open() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n\n                    __.host = _.params.host || null;\n                    __.port = _.params.port || 80;\n                    __.timeout = __.timeout || 60000;\n                    await super.open();\n                }\n                async close() {\n                    await super.close();\n                }\n                async invoke(cmd) {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        __.cmds.push({\n                            command: cmd.command,\n                            params: cmd.params\n                        });\n                    } else\n                        return await __.invoke(cmd.command, cmd.params);\n                }\n                async commit() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        //事务性处理\n                        let data = []\n                        await V.each(__.cmds, async v => {\n                            data.push(await __.invoke(v.command, v.params));\n                            return false;\n                        }, true);\n                        __.cmds = [];\n                        return data;\n                    } else\n                        throw new Error('非事务条件下不可调用此方法');\n                }\n            }\n        });\n    }\n    createDBConnection() {\n        const {\n            _,\n            __\n        } = pri(this);\n        return new __.SoapConnection();\n    }\n};\n\n/**\n * NiMailDataFactory\n * 自动调用Mail服务器发送邮件\n * https://www.npmjs.com/package/emailjs\n * {\n            text: '测试内容2', // text of the email \n            from: '26342049@qq.com', // sender of the format (address or name <address> or \"name\" <address>)\n            to: 'baibing0004@sohu.com', // recipients (same format as above), multiple recipients are separated by a comma\n            cc: '', // carbon copied recipients (same format as above)\n            bcc: '', // blind carbon copied recipients (same format as above)\n            subject: '测试邮件', // string subject of the email\n            attachment: [\n                    { data: \"<html>i <i>测试啊测试</i> this works!</html>\", alternative: true },\n                    { path: \"/Users/&&&/Downloads/福岛核辐射.jpg\", type: M2.get(\"福岛核辐射2.jpg\"), name: \"福岛核辐射2.jpg\" }\n                ]\n                // one attachment or array of attachments\n        }\n */\nexport const NiMailDataFactory = class extends NiDataFactory {\n    constructor() {\n        super();\n        const that = this;\n        const {\n            _,\n            __\n        } = pri(that, {\n            MailConnection: class extends NiDataConnection {\n                constructor() {\n                    super();\n                    const thats = this;\n                    const {\n                        _,\n                        __\n                    } = pri(this, {\n                        cmds: [],\n                        invoke: async(command, params) => {\n                            const {\n                                _,\n                                __\n                            } = pri(thats);\n                            if (!__.conn) throw new Error('请先连接Mail服务器');\n                            let args = (params.args ? params.args.value : params);\n                            for (let i in args) {\n                                if (args[i].value) args[i] = args[i].value;\n                            }\n                            try {\n                                let data = [];\n                                await V.callback(__.conn.send, __.conn, args);\n                                data.push([{\n                                    success: true\n                                }])\n                                return data;\n                            } catch (e) {\n                                console.log(command, params);\n                                console.log(e.message);\n                                throw e;\n                            }\n                        }\n                    });\n                }\n                async open() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    //user:\t\"username\",   password:\"password\",  host:\t\"smtp.your-email.com\",\n                    __.conn = Mail.server.connect(V.merge({\n                        ssl: true\n                    }, _.params));\n                    await super.open();\n                }\n                async close() {\n                    __.conn = null;\n                    await super.close();\n                }\n                async invoke(cmd) {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        __.cmds.push({\n                            command: cmd.command,\n                            params: cmd.params\n                        });\n                    } else\n                        return await __.invoke(cmd.command, cmd.params);\n                }\n                async commit() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        //事务性处理\n                        let data = [];\n                        let cmds = __.cmds;\n                        __.cmds = [];\n                        await V.each(cmds, async v => {\n                            data.push(await __.invoke(v.command, v.params));\n                        }, true);\n                        return data;\n                    } else\n                        throw new Error('非事务条件下不可调用此方法');\n                }\n            }\n        });\n    }\n    createDBConnection() {\n        const {\n            _,\n            __\n        } = pri(this);\n        return new __.MailConnection();\n    }\n};\n\n/**\n * es 池连接方式工厂\n */\nexport const NiElasticSearchDataFactory = class extends NiDataFactory {\n    constructor() {\n        super();\n        const that = this;\n        that.idic = {};\n        const {\n            _,\n            __\n        } = pri(that, {\n            ElasticSearchConnection: class extends NiDataConnection {\n                constructor() {\n                    super();\n                    const that = this;\n                    const {\n                        _,\n                        __\n                    } = pri(this, {\n                        cmds: [],\n                        conn: null,\n                        invoke: async(command, params) => {\n                            try {\n                                const {\n                                    _,\n                                    __\n                                } = pri(that);\n                                let args = (params.args ? params.args.value : params);\n                                for (let i in args) {\n                                    if (args[i].value) args[i] = args[i].value;\n                                }\n\n                                const result = await V.callback(__.conn.create, __.conn, V.merge({\n                                        index: '',\n                                        type: 'logs',\n                                        id: '',\n                                        body: {\n                                            title: '',\n                                            message: ''\n                                        }\n                                    },\n                                    args));\n\n                                let data = [];\n                                data.push([{\n                                    success: true\n                                }]);\n\n                                return data;\n                            } catch (e) {\n                                console.log(command, params);\n                                console.log(e.message);\n                                throw e;\n                            }\n                        }\n                    });\n                    _.params = {\n                        host: ''\n                    };\n                }\n                async invoke(cmd) {\n                    //需要处理单条与多条s\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        __.cmds.push({\n                            command: cmd.command,\n                            params: cmd.params\n                        });\n                    } else\n                        return await __.invoke(cmd.command, cmd.params);\n                }\n                async commit() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    if (_.transaction) {\n                        //事务性处理\n                        try {\n                            let data = [];\n                            let cmds = __.cmds;\n                            __.cmds = [];\n                            await V.each(cmds, async v => {\n                                //console.log(v.cmd.params);\n                                data.push(await __.invoke(v.command, v.params));\n                                return false;\n                            }, true);\n                            return data;\n                        } catch (e) {\n                            throw e;\n                        }\n                    } else\n                        throw new Error('非事务条件下不可调用此方法');\n                }\n                async open() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    __.conn = new es.Client(V.merge({\n                        log: 'trace'\n                    }, _.params));\n                    await super.open();\n                }\n                async close() {\n                    const {\n                        _,\n                        __\n                    } = pri(this);\n                    try {\n                        if (__.conn && __.conn.release)\n                            __.conn.release();\n                        else if (__.conn && __.conn.end)\n                            __.conn.end();\n                        else if (__.conn && __.conn.dispose)\n                            __.conn.dispose();\n                    } catch (e) {}\n                    __.cmds = [];\n                    __.conn = null;\n                    await super.close();\n                }\n            }\n        });\n    }\n    createDBConnection() {\n        const {\n            _,\n            __\n        } = pri(this);\n        return new __.ElasticSearchConnection();\n    }\n    dispose() {\n        const {\n            _,\n            __\n        } = pri(this);\n        V.tryC(() => {\n            __.conn.dispose();\n        });\n    }\n};\n\nexport default {\n    NiDataConfig,\n    NiDataConfigConvert,\n    NiTemplate,\n    NiTemplateManager,\n    NiDataResult,\n    NiDataResource,\n    NiInstanceDataResource,\n    NiStaticDataResource,\n    NiPoolDataResource,\n    NiDataFactory,\n    NiDataConnection,\n    NiDataCommand,\n    NiTemplateDecorator,\n    NiMultiTemplateDecorator,\n    NiMySQLDataFactory,\n    NiMsSQLDataFactory,\n    NiObjectDataFactory,\n    NiUrlDataFactory,\n    NiMailDataFactory,\n    NiRedisSqlDataFactory,\n    NiRedisSqlDataFactory2,\n    NiSoapDataFactory,\n    NiMemSQLDataFactory\n};"]}