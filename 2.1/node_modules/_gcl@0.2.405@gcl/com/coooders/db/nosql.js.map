{"version":3,"sources":["../../../src/coooders/db/nosql.js"],"names":["QueryEntity","sign","that","pri","_","__","IDs","MethodParam","WhereParam","OrderParam","SkipParam","LimitParam","DateTimeParam","Method","Params","Table","p","ret","trim","hasData","forEach","v","push","merge","k","startWith","addParams","___","func","LinqParser","dicQuery","sql","params","key","hash","rets","split","filter","isValid","i","singleparse","entity","clone","value","val","undefined","Error","k3","v2","indexOf","replace","k2","substr","length","type","sqls","shift","eq","tabs","f","method","toLowerCase","handleMethodStartWith","p3","ht","w","session","OperationSession","index","ope","EqualOperate","O1Operate","NotOperate","AndOperate","O2Operate","LCOperate","lIncome","OperateStack","Word","pop","rIncome","ex","message","isComplete","CompleteOperate","toDictionary","data","p4","f2","NoSQLParser","sss","item1","temp","from1","where1","skip1","limit1","order1","by1","set1","into1","values1","dateTime1","begintrans","whereMember","methodMember","tableStr","orderby","sk","lm","date","s","tp","tt","sb","mem","append","clear","word","regWord","RegExp","completeOperate","match","ALogicOperate","Ope","level","Key","Value","rIncome2","left","right","ope2","dicLeft","dicRight","ret2","orOpe","RealLogicOperate","pris"],"mappings":"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","file":"nosql.js","sourcesContent":["import V from '../common/tool';\nexport const QueryEntity = class {\n    constructor(sign) {\n        const that = this;\n        const {\n            _,\n            __\n        } = pri(this);\n        _.IDs = {};\n        _.MethodParam = {};\n        _.WhereParam = {};\n        _.OrderParam = {};\n        _.SkipParam = {};\n        _.LimitParam = {};\n        _.DateTimeParam = {};\n        _.Method = null;\n        _.Params = {};\n        _.Table = '';\n        _.sign = sign;\n    }\n    addParams(p, ret) {\n        const {\n            _,\n            __\n        } = pri(this);\n        p = p.trim();\n        if (_.Params[p]) {\n            let hasData = false;\n            _.Params[p].forEach(v => {\n                if (v == ret) hasData = true;\n            });\n            if (!hasData) _.Params[p].push(ret);\n        } else {\n            _.Params[p] = [ret];\n        }\n    }\n    clone() {\n        const {\n            _,\n            __\n        } = pri(this);\n        let ret = new QueryEntity();\n        V.merge(ret.IDs, _.IDs, true);\n        V.merge(ret.MethodParam, _.MethodParam, true);\n        V.merge(ret.WhereParam, _.WhereParam, true);\n        V.merge(ret.OrderParam, _.OrderParam, true);\n        V.merge(ret.SkipParam, _.SkipParam, true);\n        V.merge(ret.DateTimeParam, _.DateTimeParam, true);\n        V.merge(ret.LimitParam, _.LimitParam, true);\n        for (let k in ret.IDs) {\n            let v = ret.IDs[k];\n            if (v && v.startWith && v.startWith(_.sign)) ret.addParams(v.trim(_.sign), ret.IDs);\n        }\n        for (let k in ret.MethodParam) {\n            let v = ret.MethodParam[k];\n            if (v && v.startWith && v.startWith(_.sign)) ret.addParams(v.trim(_.sign), ret.MethodParam);\n        }\n        for (let k in ret.OrderParam) {\n            let v = ret.OrderParam[k];\n            if (v && v.startWith && v.startWith(_.sign)) ret.addParams(v.trim(_.sign), ret.OrderParam);\n        }\n        for (let k in ret.SkipParam) {\n            let v = ret.SkipParam[k];\n            if (v && v.startWith && v.startWith(_.sign)) ret.addParams(v.trim(_.sign), ret.SkipParam);\n        }\n        for (let k in ret.DateTimeParam) {\n            let v = ret.DateTimeParam[k];\n            if (v && v.startWith && v.startWith(_.sign)) ret.addParams(v.trim(_.sign), ret.DateTimeParam);\n        }\n        for (let k in ret.LimitParam) {\n            let v = ret.LimitParam[k];\n            if (v && v.startWith && v.startWith(_.sign)) ret.addParams(v.trim(_.sign), ret.LimitParam);\n        }\n        ___.func(ret.WhereParam, ret, _.sign);\n        ret.Method = _.Method;\n        ret.Table = _.Table;\n        ret.sign = _.sign;\n        return ret;\n    }\n};\nexport const LinqParser = class {\n    constructor(sign = \"?\") {\n        const {\n            _,\n            __\n        } = pri(this, {\n            dicQuery: {}\n        });\n        _.sign = sign;\n    }\n    parse(sql, params = {}) {\n        const {\n            _,\n            __\n        } = pri(this);\n        const key = 'K' + V.hash(sql);\n        if (__.dicQuery[key]) {} else {\n            var rets = sql.split(';').filter(v => V.isValid(v));\n            rets.forEach((v, i) => rets[i] = (v ? _.singleparse(v) : null));\n            __.dicQuery[key] = rets;\n        }\n        let ret = [];\n        __.dicQuery[key].forEach(v => {\n            if (v) {\n                let entity = v.clone();\n                for (let k in entity.Params) {\n                    const v = entity.Params[k];\n                    (entity.IDs[k] && !params[k]) && (params[k] = { value: '' }); //为hgets hkeys 添加默认值\n                    let val = (params[k] && params[k].value !== undefined) ? params[k].value : params[k];\n                    let key = _.sign + k;\n                    if (val !== undefined && val !== null) {} else throw new Error('没有找到需要的参数值' + key);\n                    v.forEach(v2 => {\n                        for (let k3 in v2) {\n                            if (v2[k3] == key) v2[k3] = val;\n                        }\n                    });\n                }\n\n                if (entity.Table && entity.Table.indexOf('{') >= 0) entity.Table = entity.Table.replace(/\\{[^\\}]+\\}/g, k => {\n                    let k2 = (k.substr(1, k.length - 2));\n                    let ret = params[k2] ? (params[k2].value || (params[k2].type ? '' : params[k2])) : k;\n                    if (ret.startWith(_.sign) && params[ret.trim(_.sign)]) {\n                        k2 = ret.trim(_.sign);\n                        ret = params[k2] ? (params[k2].value || (params[k2].type ? '' : params[k2])) : k;\n                    }\n                    return ret;\n                });\n\n                ret.push(entity);\n            }\n        });\n        return ret;\n    }\n\n    singleparse(sql) {\n        const {\n            _,\n            __\n        } = pri(this);\n        if (sql) {\n            const entity = new QueryEntity(_.sign);\n            let sqls = sql.split('.');\n            let v = sqls.shift();\n            while (!V.isValid(v))(v = sqls.shift());\n            (v && 'transaction'.eq(v.trim())) && (entity.Method = 'transaction', v = sqls.shift());\n            if (v) {\n                //设置表名\n                v = v.trim();\n                if (v.indexOf('<') >= 0) {\n                    let tabs = v.split('<');\n                    entity.Table = tabs[0].trim();\n                    tabs[1].trim('>').split(',').forEach(f => {\n                        f = f.trim(_.sign);\n                        entity.IDs[f] = _.sign + f;\n                        entity.addParams(f, entity.IDs);\n                    });\n                } else {\n                    entity.Table = v.trim();\n                }\n                v = sqls.shift();\n            }\n            if (v && !V.isValid(entity.Method)) {\n                v = v.trim();\n                let method = v.toLowerCase().split('(')[0];\n                switch (method) {\n                    case 'select':\n                    case 'hselect':\n                    case 'hmselect':\n                    case 'hkeys':\n                    case 'hgets':\n                    case \"zlen\":\n                    case \"zcount\":\n                    case 'zselect':\n                    case 'zpop':\n                    case 'zrank':\n                    case 'lselect':\n                    case 'lpop':\n                    case 'lcount':\n                    case 'llen':\n                    case 'dbs':\n                    case 'hkeys':\n                    case 'hlen':\n                    case 'hcount':\n                    case 'expire':\n                    case \"delete\":\n                    case \"hdelete\":\n                    case \"zdelete\":\n                    case \"ldelete\":\n                        handleMethodStartWith(v, method, entity);\n                        break;\n                    case 'insert':\n                    case 'hinsert':\n                    case 'zinsert':\n                    case 'linsert':\n                    case 'hupdate':\n                    case 'zupdate':\n                    case 'lupdate':\n                    case 'hngcrease':\n                    case 'ngcrease':\n                    case 'lock':\n                    case 'hlock':\n                        handleMethodStartWith(v, method, entity, _.sign);\n                        break;\n                    case 'update':\n                        handleMethodStartWith(v, 'insert', entity, _.sign);\n                        break;\n                    case 'increase':\n                    case 'hincrease':\n                    case 'zincrease':\n                        {\n                            entity.Method = method.startWith(\"i\") ? \"increase\" : method.startWith(\"z\") ? \"zincrease\" : \"hincrease\";\n                            v = v.substr(entity.length).trim('(').trim(')').trim();\n                            if (!(!V.isValid(v) || \"*\" == (v))) {\n                                v.split(',').forEach(f => {\n                                    if (!V.isValid(f)) return;\n                                    f = f.trim();\n                                    let p3 = f.split('=');\n                                    if (p3.length < 2) throw new Error(\"SQL在\\\"\" + v.substr(v.indexOf(f)) + \"\\\"处解析错误!\\r\\n:\" + f + \"没有找到=号\");\n                                    entity.MethodParam[p3[0].trim()] = p3[1].trim();\n                                    if (p3[1].trim().startWith(_.sign)) {\n                                        entity.addParams(p3[1].trim(_.sign), entity.MethodParam);\n                                    }\n                                });\n                            } else\n                                throw new Error(\"SQL在\\\"\" + v.substr(v.indexOf('.')) + \"\\\"处解析错误!\\r\\n:\\r\\n:没有找到可插入的列及其值\");\n                        }\n                        break;\n                    default:\n                        //错误\n                        throw new Error(\"SQL在\\\"\" + v.substr(v.indexOf('.')) + \"\\\"处解析错误!\\r\\n:没有找到可解析的操作指令\");\n\n                }\n                //设置操作\n                v = sqls.shift();\n            }\n\n            if (v && v.toLowerCase().startWith(\"where\")) {\n                //这里需要判断 where skip limit\n                v = v.trim();\n                //region where(a1 = 1 and b=2 or c=3 and d=4 and ())\n                //= > >= < <= <> 第一优先级 然后是 () 然后是 and 然后是 or 再添加对not的处理\n                let ht = {};\n                let w = 0;\n                //取消)号 由(号识别其结束符\n                \"=,>,<,>=,<=,<>,not,and,or,(,;,in\".split(',').forEach(f => ht[f] = w++);\n                ht[','] = w++;\n                //todo in和,号\n\n                /*\n                 * 解释器+责任链式处理思路\n                 * 缓存分为 非逻辑字符 与 已完成逻辑操作两个变量 和 未完成逻辑操作栈 保留未完成的操作\n                 * LogicOperate 其每次 lIncome 非逻辑字符，已完成逻辑操作 rIncome 非逻辑字符，已完成逻辑操作与未处理字符，\n                 * 如果发现此逻辑字符不为自己所能处理 将自己压栈等待下一个逻辑操作完成，当下一个操作完成时自动弹出下个操作调用将自己作为其另一种右进操作，直到语句结束 \n                 * 发现字符未处理完成或者栈内仍然有未处理的操作 报错，如果缓存字符，已完成逻辑操作超过1个报错\n                 **/\n                let session = new OperationSession();\n                let p3 = v.trim();\n                p3 = p3.substr(6, p3.length - 7);\n                p3 = p3.replace(/=/g, \" = \");\n                p3 = p3.replace(/>/g, \" > \");\n                p3 = p3.replace(/</g, \" < \");\n                p3 = p3.replace(/\\(/g, \" ( \");\n                p3 = p3.replace(/\\)/g, \" ) \");\n                p3 = p3.replace(/<\\s*>/g, \" <> \");\n                p3 = p3.replace(/>\\s*=/g, \" >= \");\n                p3 = p3.replace(/<\\s*=/g, \" <= \");\n                p3 = p3.replace(/\\s+/g, ' ');\n                p3.split(' ').forEach(f => {\n                    try {\n                        if (!V.isValid(f)) return;\n                        if (ht[f.toLowerCase()] >= 0) {\n                            let index = ht[f.toLowerCase()];\n                            let ope = null;\n                            if (index < 1) {\n                                //表达式\n                                ope = new EqualOperate();\n                            } else if (index < 6) {\n                                ope = new O1Operate(f);\n                            } else if (index < 7) {\n                                ope = new NotOperate();\n                            } else if (index < 8) {\n                                ope = new AndOperate();\n                            } else if (index < 9) {\n                                //处理or\n                                ope = new O2Operate(f);\n                            } else if (index < 10) {\n                                //处理括号\n                                ope = new LCOperate();\n                            }\n                            if (ope == null) throw new Error(\"发现暂时无法处理的操作符号\" + f);\n                            ope.lIncome(session);\n                        } else {\n                            //临时存放字符否则弹出操作栈进行右入处理\n                            if (session.OperateStack.length == 0) session.Word = f;\n                            else session.OperateStack.pop().rIncome(session, f);\n                        }\n                    } catch (ex) {\n                        throw new Error(\"SQL在\\\"\" + p3.substr(p3.indexOf(\" \" + f + \" \")) + \"\\\"处解析错误!\\r\\n:\" + ex.message);\n                    }\n                });\n                if (session.isComplete) {\n                    let ope = session.CompleteOperate;\n                    entity.WhereParam = ope.toDictionary(entity, _.sign);\n                    let func = (data) => {\n                        for (let k in data) {\n                            let v = data[k];\n                            if (v.startWith) {\n                                if (v.startWith(_.sign)) {\n                                    entity.addParams(v.trim(_.sign), data);\n                                }\n                            } else if (typeof(v) == 'object') {\n                                func(v);\n                            }\n                        }\n                    };\n                    func(entity.WhereParam);\n                } else\n                    throw new Error(\"SQL在\\\"\" + p3.substr(p3.indexOf(\" \" + session.Word + \" \")) + \"\\\"处解析错误!\\r\\n:语句未完成\");\n\n                v = sqls.shift();\n            }\n\n            if (v && v.startWith(\"order\")) {\n                v = v.trim();\n                //#region order(a1 asc,b1 desc)\n                let p4 = v.trim(')').split('(');\n                if (p4.length < 2) {\n                    throw new Error(\"SQL在\\\"\" + p3.substr(p3.indexOf(\".order\")) + \"\\\"处解析错误!\\r\\n:skip没有找到可用的参数\");\n                }\n                p4[1].split(',').forEach(f => {\n                    let f2 = f.split(' ');\n                    entity.OrderParam[f2[0].trim()] = f2.length < 2 ? \"asc\" : f2[1].trim();\n                });\n                v = sqls.shift();\n                //#endregion\n            }\n\n            if (v && v.startWith(\"skip\")) {\n                v = v.trim();\n                //#region skip(@page) skip(11)\n                //todo 支持表达式\n                let p4 = v.trim(')').split('(');\n                if (p4.length < 2) {\n                    throw new Error(\"SQL在\\\"\" + p3.substr(p3.indexOf(\".skip\")) + \"\\\"处解析错误!\\r\\n:skip没有找到可用的参数\");\n                }\n                entity.SkipParam[p4[1].trim(_.sign)] = p4[1]\n                if (p4[1].startWith(_.sign)) entity.addParams(p4[1].trim(_.sign), entity.SkipParam);\n\n                v = sqls.shift();\n                //#endregion\n            }\n\n            if (v && v.startWith(\"limit\")) {\n                v = v.trim();\n                //#region limit(@page) limit(11)\n                //todo 支持表达式\n                let p4 = v.trim(')').split('(');\n                if (p4.length < 2) {\n                    throw new Error(\"SQL在\\\"\" + p3.substr(p3.indexOf(\".limit\")) + \"\\\"处解析错误!\\r\\n:skip没有找到可用的参数\");\n                }\n                p4[1].split(',').forEach(function(v2, i) {\n                    entity.LimitParam[v2.trim(_.sign)] = v2;\n                    entity.LimitParam['_' + i] = v2.trim(_.sign);\n                    if (v2.startWith(_.sign)) entity.addParams(v2.trim(_.sign), entity.LimitParam);\n                });\n\n                v = sqls.shift();\n                //#endregion\n            }\n\n            if (v && (v.startWith(\"datetime\") || v.startWith(\"timeout\"))) {\n                v = v.trim();\n                //#region datetime(@time) datetime(200) timeout(@time) timeout(2000)\n                //todo 支持表达式\n                let p4 = v.trim(')').split('(');\n                if (p4.length < 2) {\n                    throw new Error(\"SQL在\\\"\" + p3.substr(p3.indexOf(\"datetime\")) + \"\\\"处解析错误!\\r\\n:skip没有找到可用的参数\");\n                }\n                entity.DateTimeParam[p4[1].trim(_.sign)] = p4[1]\n                if (p4[1].startWith(_.sign)) entity.addParams(p4[1].trim(_.sign), entity.DateTimeParam);\n\n                v = sqls.shift();\n                //#endregion\n            }\n\n            if (v)\n                throw new Error(\"SQL在\\\"\" + p3.substr(p3.indexOf(\".\" + v)) + \"\\\"处解析错误!\\r\\n:没有找到可解析的操作指令\");\n            return entity;\n        } else throw new Error('sql必须有值!');\n    }\n};\n\n/**\n * 处理Method时，统一处理\n * v: 传进来的方法名，如：select开头，hselect开头，insert开头等\n * method:  nosql对应的操作方法\n * entity:转换后的实体\n * sign:\n */\nfunction handleMethodStartWith(v, method, entity, sign) {\n    entity.Method = method;\n    v = v.substr(method.length).trim('(').trim(')').trim();\n    switch (method) {\n        case 'select':\n        case 'hselect':\n        case 'hmselect':\n        case \"zlen\":\n        case \"zcount\":\n        case 'zselect':\n        case 'zpop':\n        case 'zrank':\n        case 'hkeys':\n        case 'hgets':\n        case 'lpop':\n        case 'lselect':\n        case 'llen':\n        case 'lcount':\n        case 'hlen':\n        case 'hcount':\n        case 'dbs':\n            if (!(!V.isValid(v) || \"*\" == (v))) {\n                v.split(',').forEach(f => {\n                    if (!V.isValid(f)) return;\n                    entity.MethodParam[f] = 1;\n                });\n            }\n            break;\n        case 'insert':\n        case 'hinsert':\n        case 'zinsert':\n        case 'linsert':\n        case 'hngcrease':\n        case 'ngcrease':\n        case 'update':\n        case 'hupdate':\n        case 'zupdate':\n        case 'lupdate':\n        case 'expire':\n        case 'lock':\n        case 'hlock':\n            if (!(!V.isValid(v) || \"*\" == (v))) {\n                v.split(',').forEach(f => {\n                    if (!V.isValid(f)) return;\n                    f = f.trim();\n                    let p3 = f.split('=');\n                    if (p3.length < 2) throw new Error(\"SQL在\\\"\" + v.substr(v.indexOf(f)) + \"\\\"处解析错误!\\r\\n:\" + f + \"没有找到=号\");\n                    entity.MethodParam[p3[0].trim()] = p3[1].trim();\n                    if (p3[1].trim().startWith(sign)) {\n                        entity.addParams(p3[1].trim(sign), entity.MethodParam);\n                    }\n                });\n            } else\n                throw new Error(\"SQL在\\\"\" + v.substr(v.indexOf('.')) + \"\\\"处解析错误!\\r\\n:\\r\\n:没有找到可插入的列及其值\");\n            break;\n        case 'delete':\n        case 'hdelete':\n        case 'zdelete':\n        case 'ldelete':\n            if (!(!V.isValid(v) || \"*\" == (v))) {\n                throw new Error(\"SQL在\\\"\" + v.substr(v.indexOf('.')) + \"\\\"处解析错误!\\r\\n:\\r\\n:不需要设置可删除的列及其值\");\n            }\n            break;\n    }\n};\nexport const NoSQLParser = class extends LinqParser {\n        constructor(sign) {\n            super(sign);\n            const {\n                _,\n                __\n            } = pri(this);\n        }\n        singleparse(sql) {\n            const {\n                _,\n                __\n            } = pri(this);\n            let sss = sql.replace(/\\(/g, ' ( ').replace(/\\)/g, ' ) ');\n            //将多个空格,换行换成一个空格\n            let item1 = sss.replace(/\\s+/g, ' ');\n            //取关键点索引位置\n            let temp = item1.toLowerCase();\n            let from1 = temp.indexOf(\" from \");\n            let where1 = temp.indexOf(\" where \");\n            let skip1 = temp.indexOf(\" skip \");\n            let limit1 = temp.indexOf(\" limit \");\n            let order1 = temp.indexOf(\" order \");\n            let by1 = temp.indexOf(\" by \");\n            let set1 = temp.indexOf(\" set \");\n            let into1 = temp.indexOf(\" into \");\n            let values1 = temp.indexOf(\" values \");\n            let dateTime1 = temp.indexOf(\" datetime \");\n            let begintrans = temp.indexOf(\"begin transaction\");\n            let whereMember = \"\";\n            let method = \"\";\n            let methodMember = \"\";\n            let tableStr = \"\";\n            let orderby = \"\";\n            let sk = null;\n            let lm = null;\n            let date = null;\n\n            //语句中包含from\n            if (from1 != -1) {\n                let s = item1.substr(0, from1).trim().split(' ');\n                if (s.length >= 2) {\n                    method = s[0].trim().toLowerCase();\n                    methodMember = s[1].trim();\n                } else method = s[0].trim().toLowerCase();\n            }\n            //语句中不包含from但包含set,update语句处理\n            if (set1 != -1 && from1 == -1) {\n                let s = item1.substr(0, set1).trim().split(' ');\n                method = s[0].trim().toLowerCase();\n                tableStr = s[1].trim();\n                if (where1 != -1) {\n                    methodMember = item1.substr(set1 + 4, where1 - set1 - 4).trim();\n                } else {\n                    methodMember = item1.substr(set1 + 4).trim();\n                }\n            }\n            //插入语句处理\n            if (from1 == -1 && into1 != -1 && set1 == -1) {\n                method = item1.substr(0, into1).trim().toLowerCase();\n                if (values1 != -1) {\n                    let s = item1.substr(into1 + 5, values1 - into1 - 5).trim().split(' ');\n                    tableStr = s[0].trim();\n                    for (let i = 1; i < s.length; i++) {\n                        methodMember += s[i].trim();\n                    }\n\n                    let tp;\n                    if (dateTime1 != -1) {\n                        tp = item1.substr(values1 + 7, dateTime1 - values1 - 7).replace(/\\(/g, \"\").replace(/\\)/g, \"\").trim().split(',');\n                        date = item1.substr(dateTime1 + 9).replace(/\\(/g, \"\").replace(/\\)/g, \"\").trim(';').trim();\n                    } else\n                        tp = item1.substr(values1 + 7).replace(/\\(/g, \"\").replace(/\\)/g, \"\").trim().split(',');\n                    let tt = new V.sb();\n                    let mem = methodMember.replace(/\\(/g, \"\").replace(/\\)/g, \"\").split(',');\n                    for (let i = 0; i < mem.length; i++) {\n                        tt.append(mem[i] + \"=\" + tp[i] + \",\");\n                    }\n                    methodMember = tt.clear().trim(',');\n                }\n            }\n\n            let sb = new V.sb();\n            //取表名\n            if (where1 != -1 && from1 != -1) tableStr = item1.substr(from1 + 5, where1 - from1 - 5).trim();\n            if (where1 == -1 && set1 == -1 && from1 != -1) tableStr = item1.substr(from1 + 5).trim().split(' ')[0];\n            if (begintrans != -1) {\n                method = 'transaction';\n            }\n            //只支持增删改查\n            switch (method) {\n                case \"select\":\n                case \"increase\":\n                case \"delete\":\n                case \"update\":\n                case \"insert\":\n                case 'lock':\n                case \"touch\":\n                case \"transaction\":\n                case \"hselect\":\n                case 'hmselect':\n                case \"hincrease\":\n                case \"zlen\":\n                case \"zcount\":\n                case \"zselect\":\n                case 'zpop':\n                case 'zrank':\n                case \"zincrease\":\n                case \"lselect\":\n                case \"llen\":\n                case \"lcount\":\n                case \"hkeys\":\n                case 'hlen':\n                case 'hcount':\n                case \"hgets\":\n                case 'hlock':\n                case \"dbs\":\n                case \"lpop\":\n                case \"zinsert\":\n                case \"linsert\":\n                case \"hinsert\":\n                case \"zupdate\":\n                case \"lupdate\":\n                case \"hupdate\":\n                case \"hdelete\":\n                case \"ldelete\":\n                case \"zdelete\":\n                case \"hngcrease\":\n                case \"ngcrease\":\n                case \"expire\":\n                    break;\n                default:\n                    throw new Error(\"只支持select,insert,lock,update,delete,touch,transaction,hselect,hmselect,zlen,zcount,zselect,zpop,zrank,zincrease,lselect,lpop,llen,lcount,hkeys,hgets,hlen,hcount,zinsert,linsert,hlock,hinsert,hdelete,ldelete,zdelete,hngcrease,dbs,ngcrease,expire.请检查查询语句\" + method);\n            }\n            sb.append(tableStr + \".\" + method);\n            if (!(methodMember.indexOf(\"*\") >= 0 || !V.isValid(methodMember))) sb.append(\"(\" + methodMember + \")\");\n            if (dateTime1 != -1 && date != null) sb.append(\".datetime(\" + date + \")\");\n            //排序处理\n            if (order1 != -1) {\n                if (where1 != -1) {\n                    whereMember = item1.substr(where1 + 6, order1 - where1 - 6).trim();\n                    sb.append(\".where(\" + whereMember + \")\");\n                }\n                if (skip1 != -1) {\n                    orderby = item1.substr(by1 + 3, skip1 - by1 - 3).trim();\n                    if (orderby.indexOf(_.sign) >= 0)\n                        throw new Error(\"排序中不允许参数化\");\n                }\n                if (skip1 == -1 && limit1 != -1) {\n                    orderby = item1.substr(by1 + 3, limit1 - by1 - 3).trim();\n                }\n                if (skip1 == -1 && limit1 == -1 && dateTime1 == -1) {\n                    orderby = item1.substr(by1 + 3).trim();\n                }\n                if (orderby.indexOf(_.sign) >= 0)\n                    throw new Error(\"排序中不允许参数化\");\n                sb.append(\".order(\" + orderby + \")\");\n            } else if (where1 != -1) {\n                if (skip1 == -1 && limit1 == -1 && into1 == -1 && dateTime1 == -1) {\n                    whereMember = item1.substr(where1 + 6).trim();\n                    sb.append(\".where(\" + whereMember + \")\");\n                } else if (skip1 != -1) {\n                    whereMember = item1.substr(where1 + 6, skip1 - where1 - 6).trim();\n                    sb.append(\".where(\" + whereMember + \")\");\n                } else if (skip1 == -1 && limit1 != -1) {\n                    whereMember = item1.substr(where1 + 6, limit1 - where1 - 6).trim();\n                    sb.append(\".where(\" + whereMember + \")\");\n                }\n            }\n            //跳转处理\n            if (skip1 != -1) {\n                if (limit1 != -1) {\n                    sk = item1.substr(skip1 + 5, limit1 - 5 - skip1).trim();\n                    sb.append(\".skip(\" + sk + \")\");\n                } else if (dateTime1 == -1 && limit1 == -1) {\n                    sk = item1.substr(skip1 + 5).trim();\n                    sb.append(\".skip(\" + sk + \")\");\n                }\n            }\n            //限制条数处理\n            if (limit1 != -1 && dateTime1 == -1) {\n                lm = item1.substr(limit1 + 6).trim();\n                sb.append(\".limit(\" + lm + \")\");\n            }\n            const p = sb.clear();\n            sb = null;\n            return super.singleparse(p);\n        };\n    }\n    /*\n    export const addParams = (ret, value, entity, sign) => {\n        //仅仅补充Level为1时的状态                    \n        if (typeof(value) == 'object' && V.toJsonString(value).startWith('{')) {\n            for(let k in value){\n                let v = value[k];\n                if ((v + '').startWith(sign)) {\n                    entity.addParams(v + '', value);\n                }\n            });\n        } else if (V.isArray(value)) {\n            //对这种2级操作符之间的嵌套不做处理\n        } else {\n            if ((value + '').startWith(sign)) {\n                entity.addParams(value + '', ret);\n            }\n        }\n    };*/\nexport const OperationSession = class {\n    constructor() {\n        const {\n            _,\n            __\n        } = pri(this, {\n            word: null,\n            regWord: new RegExp('^[a-zA-Z_\\\\$]+[a-zA-Z0-9_\\\\$]*$'),\n            completeOperate: null\n        });\n        _.OperateStack = [];\n    }\n    set Word(val) {\n        const {\n            _,\n            __\n        } = pri(this);\n        if (!V.isValid(val.match(__.regWord))) throw new Error('不能放入含非法字符的列名' + val);\n        if (__.word) throw new Error(\"不能连续放入未处理字符\");\n        else __.word = val;\n    }\n    get Word() {\n        const {\n            _,\n            __\n        } = pri(this);\n        let ret = __.word;\n        __.word = null;\n        return ret;\n    }\n    set CompleteOperate(val) {\n        const {\n            _,\n            __\n        } = pri(this);\n        if (!V.isValid(__.completeOperate)) __.completeOperate = val;\n        else throw new Error(\"不能连续放入已处理的Operator\");\n\n    }\n    get CompleteOperate() {\n        const {\n            _,\n            __\n        } = pri(this);\n        let ret = __.completeOperate;\n        __.completeOperate = null;\n        return ret;\n    }\n    get isComplete() {\n        const {\n            _,\n            __\n        } = pri(this);\n        return (!V.isValid(__.word) && _.OperateStack.length == 0 && __.completeOperate != null);\n    }\n};\nexport const ALogicOperate = class {\n    constructor(ope) {\n        const {\n            _,\n            __\n        } = pri(this, {});\n        _.Ope = ope;\n        _.level = 0;\n    }\n    lIncome(session) {}\n    rIncome(session, word) {}\n    rIncome2(session, ope) {}\n    toDictionary(entity, sign) {}\n}\nexport const O1Operate = class extends ALogicOperate {\n    constructor(ope) {\n        super(ope);\n        const {\n            _,\n            __\n        } = pri(this);\n        _.level = 1;\n        _.Key = null;\n        _.Value = null;\n    }\n    lIncome(session) {\n        const {\n            _,\n            __\n        } = pri(this);\n        _.Key = session.Word;\n        if (!V.isValid(_.Key)) throw new Error(_.Ope + '不能没有对应的列');\n        session.OperateStack.push(_);\n        return true;\n    }\n    rIncome(session, word) {\n        const {\n            _,\n            __\n        } = pri(this);\n        _.Value = word;\n        if (!V.isValid(word)) throw new Error(_.Ope + \"不能没有对应的值\");\n        if (session.OperateStack.length > 0) {\n            //向上查找未完成操作的递归操作\n            var ope = session.OperateStack.pop();\n            if (ope.rIncome2(session, _)) return true;\n            else {\n                throw new Error(ope.Ope + \"处理错误失败:\" + word);\n            }\n        } else session.CompleteOperate = _;\n        return true;\n    }\n    rIncome2(session, ope) {\n        throw new Error(\"1级操作符不能处理逻辑表达式之间的关系\");\n    }\n    toDictionary() {\n        const {\n            _,\n            __\n        } = pri(this);\n        let ret = {};\n        ret[_.Ope] = {};\n        ret[_.Ope][_.Key] = _.Value;\n        return ret;\n    };\n}\nexport const EqualOperate = class extends O1Operate {\n    constructor() {\n        super('=');\n        pri(this);\n    }\n    toDictionary() {\n        const {\n            _,\n            __\n        } = pri(this);\n        let ret = {};\n        ret[_.Key] = _.Value;\n        return ret;\n    }\n};\n\n/**\n * 剩余的2级操作 and or not ( )\n */\nexport const O2Operate = class extends ALogicOperate {\n    constructor(ope) {\n        super(ope);\n        const {\n            _\n        } = pri(this);\n        _.level = 2;\n        _.left = null;\n        _.right = null;\n    }\n    lIncome(session) {\n        const {\n            _,\n            __\n        } = pri(this);\n        _.left = session.CompleteOperate;\n        if (_.left == null) throw new Error(_.Ope + \" 不能直接处理非逻辑表达式\");\n        session.OperateStack.push(_);\n        return true;\n    }\n    rIncome(session, word) {\n        session.Word = word;\n        session.OperateStack.push(this);\n        return true;\n    }\n    rIncome2(session, ope) {\n            const {\n                _,\n                __\n            } = pri(this);\n            _.right = ope;\n            if (_.right == null) throw new Error(_.Ope + \" 不能直接处理非逻辑表达式\");\n            if (session.OperateStack.length > 0) {\n                //向上查找未完成操作的递归操作\n                var ope2 = session.OperateStack.pop();\n                if (ope2.rIncome2(session, _)) return true;\n                else {\n                    throw new Error(ope2.Ope + \"处理错误失败\");\n                }\n            } else session.CompleteOperate = this;\n            return true;\n        }\n        /**\n         * 目前只能处理1,2级混杂 不能处理连续2级\n         */\n    toDictionary(entity, sign) {\n        const {\n            _,\n            __\n        } = pri(this);\n        var ret = {};\n        var dicLeft = _.left.toDictionary(entity, sign);\n        var dicRight = _.right.toDictionary(entity, sign);\n        //当操作符一致时去壳可以并列于一个字典中\n        if (_.left.Ope == (_.Ope)) {\n            dicLeft = dicLeft[_.Ope];\n        }\n        if (_.right.Ope == (_.Ope)) {\n            dicRight = dicRight[_.Ope];\n        }\n\n        //左侧原始值赋值并判断是否为真实\n        V.merge(ret, dicLeft, true);\n        V.merge(ret, dicRight, true);\n        //保证一定不会有键值重复的可能\n        var ret2 = {};\n        ret2[_.Ope] = ret;\n        return ret2;\n    }\n};\nexport const NotOperate = class extends O2Operate {\n    constructor() {\n        super('not');\n        const {\n            _\n        } = pri(this);\n    }\n    lIncome(session) {\n        const {\n            _,\n            __\n        } = pri(this);\n        if (V.isValid(session.Word) || session.CompleteOperate != null)\n            throw new Error(\"not 处理错误,不允许存在前置的非2级表达式\");\n        session.OperateStack.push(_);\n        return true;\n    }\n    toDictionary(entity, sign) {\n        const {\n            _,\n            __\n        } = pri(this);\n        var ret = {};\n        var dicRight = _.right.toDictionary(entity, sign);\n        //左侧原始值赋值并判断是否为真实\n        ret[_.Ope] = dicRight;\n        return ret;\n    }\n};\n/**\n * 特别处理and 当前面是已结束的or 时可能把自己放进去其右边\n */\nexport const AndOperate = class extends O2Operate {\n    constructor() {\n        super('and');\n        pri(this);\n    }\n    lIncome(session) {\n        const {\n            _,\n            __\n        } = pri(this);\n        _.left = session.CompleteOperate;\n        if (_.left == null) throw new Error(_.Ope + \" 不能直接处理非逻辑表达式\");\n        if (\"or\" == (_.left.Ope) && (_.left.right && _.left.right.level == 1)) {\n            var orOpe = _.left;\n            _.left = orOpe.right;\n            orOpe.right = this;\n            session.OperateStack.push(orOpe);\n            session.OperateStack.push(_);\n        } else session.OperateStack.push(_);\n        return true;\n    };\n};\nexport const LCOperate = class extends O2Operate {\n    constructor() {\n        super('(');\n        const {\n            _\n        } = pri(this);\n        _.RealLogicOperate = null;\n    }\n    lIncome(session) {\n        const {\n            _,\n            __\n        } = pri(this);\n        if (V.isValid(session.Word) || session.completeOperate != null) throw new Error(\"\\\"(\\\"处理错误,不允许存在前置的非2级表达式\");\n        session.OperateStack.push(_);\n        return true;\n    }\n    rIncome(session, word) {\n        const {\n            _,\n            __\n        } = pri(this);\n        if (\")\" == word) {\n            _.RealLogicOperate = session.CompleteOperate;\n            if (session.OperateStack.length > 0) {\n                var ope = session.OperateStack.pop();\n                ope.rIncome2(session, _);\n            } else session.CompleteOperate = _;\n        } else\n            return super.rIncome(session, word);\n        return true;\n    };\n    rIncome2(session, ope) {\n        session.CompleteOperate = ope;\n        session.OperateStack.push(this);\n        return true;\n    }\n    toDictionary(entity, sign) {\n        //todo 应该把$加在ope前面\n        //return new Dictionary<string, object> { { _.Ope, RealLogicOperate.toDictionary(entity, sign) } };\n        return this.RealLogicOperate.toDictionary(entity, sign);\n    }\n};\nexport default {\n    QueryEntity,\n    LinqParser,\n    NoSQLParser,\n    OperationSession,\n    ALogicOperate,\n    O1Operate,\n    EqualOperate,\n    O2Operate,\n    NotOperate,\n    AndOperate,\n    LCOperate\n};\nconst pri = V.pris();\nconst ___ = {\n    func: (data, ret, sign) => {\n        //参数化\n        for (let k in data) {\n            let v = data[k];\n            if (v.startWith) {\n                if (v.startWith(sign)) {\n                    ret.addParams(v.trim(sign), data);\n                }\n            } else if (typeof(v) == 'object') {\n                ___.func(v, ret, sign);\n            }\n        }\n    }\n}"]}