{"version":3,"sources":["../../../src/coooders/io/tool.js"],"names":["formatPath","format","parse","resolve","normalize","path","execDir","process","mainModule","filename","dir","createDir","target","tt","sb","dirs","base","indexOf","split","environment","splitChar","each","v","append","toString","callback","exists","call","ist","mkdir","copyFile","source","istrue","tar","createWriteStream","on","src","createReadStream","pipe","Error","moveFile","unlink","copyDir","isMove","endWith","stat","st","isDirectory","readdir","paths","_src","_dst","isFile","moveDir","rmdir","rmDir","checker","that","pri","list","isEnd","check","_","__","isF","then","f","removeChecker","stream","removeListener","push","transform","s","t","tranform","pris"],"mappings":"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","file":"tool.js","sourcesContent":["import V from '../common/tool';\nimport F from 'fs';\nimport P from 'path';\n/**\n *\n */\nexport const formatPath = path => P.format(P.parse(P.resolve(P.normalize(path))));\nexport const execDir = () => P.parse(P.resolve(P.normalize(process.mainModule.filename))).dir;\nexport const createDir = function(target) {\n    const tt = P.parse(P.resolve(P.normalize(target)));\n    let sb = V.sb();\n    let dirs = (tt.base.indexOf('.') >= 0 ? tt.dir : P.format(tt)).split(V.environment.splitChar);\n    return V.each(dirs, async v => {\n        sb.append(v + V.environment.splitChar);\n        const path = sb.toString();\n        if (!await V.callback(call => F.exists(path, ist => call(null, ist))))\n            await V.callback(F.mkdir, F, path);\n        return false;\n    }, true);\n};\nexport const copyFile = async function(source, target) {\n    let istrue = await V.callback(call => F.exists(source, ist => call(null, ist)));\n    if (istrue) {\n        await createDir(target);\n        await V.callback(call => {\n            let tar = F.createWriteStream(target);\n            tar.on('error', call);\n            tar.on('finish', call);\n\n            let src = F.createReadStream(source);\n            src.pipe(tar);\n        })\n        return true;\n    } else throw new Error(`源文件${source}没有找到`);\n};\nexport const moveFile = async(source, target) => {\n    await copyFile(source, target);\n    await V.callback(F.unlink, F, source);\n    return true;\n};\nexport const copyDir = async function(source, target, isMove) {\n    let tt = P.parse(P.resolve(P.normalize(target)));\n    target = P.format(tt);\n    tt = P.parse(P.resolve(P.normalize(source)));\n    source = P.format(tt);\n    let istrue = await V.callback((call) => F.exists(source, (istrue) => call(null, istrue)));\n    if (istrue) {\n        istrue = await V.callback((call) => F.exists(target, (istrue) => call(null, istrue)));\n        if (!istrue && !(target.endWith('\\\\') || target.endWith('/'))) {\n            await V.callback(F.mkdir, F, target);\n        }\n        const st = await V.callback(F.stat, F, source);\n        if (!st.isDirectory()) throw new Error(`${source}不是文件夹`);\n        else {\n            let paths = await V.callback(F.readdir, F, source);\n            await V.each(paths, async v => {\n                let _src = `${source}/${v}`,\n                    _dst = `${target}/${v}`;\n                let st = await V.callback(F.stat, F, _src);\n                if (st.isFile()) {\n                    if (isMove) await moveFile(_src, _dst);\n                    else await copyFile(_src, _dst);\n                } else if (st.isDirectory()) {\n                    if (isMove) await moveDir(_src, _dst);\n                    else await copyDir(_src, _dst);\n                }\n                return false;\n            }, true);\n            return true;\n        }\n    } else throw new Error(`源文件夹${source}没有找到`);\n}\nexport const moveDir = async(source, target) => {\n    await copyDir(source, target, true);\n    await V.callback(F.rmdir, F, source);\n};\n\n/**\n * \n * @param {string} source 目标文件夹\n */\nexport const rmDir = async(source) => {\n    let tt = P.parse(P.resolve(P.normalize(source)));\n    source = P.format(tt);\n    let istrue = await V.callback((call) => F.exists(source, (istrue) => call(null, istrue)));\n    if (istrue) {\n        const st = await V.callback(F.stat, F, source);\n        if (!st.isDirectory()) throw new Error(`${source}不是文件夹`);\n        else {\n            let paths = await V.callback(F.readdir, F, source);\n            await V.each(paths, async v => {\n                let _src = `${source}/${v}`;\n                let st = await V.callback(F.stat, F, _src);\n                if (st.isFile()) {\n                    await V.callback(F.unlink, F, _src);\n                } else if (st.isDirectory()) {\n                    await rmDir(_src);\n                }\n                return false;\n            }, true);\n            await V.callback(F.rmdir, F, source);\n            return true;\n        }\n    } else throw new Error(`源文件夹${source}没有找到`);\n};\nexport const checker = class {\n    constructor(call) {\n        const that = this;\n        const { _, __ } = pri(that, {\n            call: call,\n            list: [],\n            isEnd: false,\n            check: () => {\n                const { _, __ } = pri(that);\n                if (!__.isEnd) {\n                    let isF = true;\n                    V.each(__.list, v => { isF = isF && v.isEnd; return false; }).then(() => {\n                        if (isF) {\n                            __.isEnd = true;\n                            if (__.call) {\n                                let f = __.call;\n                                delete __.call;\n                                V.each(__.list, v => { v.removeChecker(); return false; }).then(f);\n                            }\n                        }\n                    });\n                }\n            }\n        });\n    }\n    push(stream) {\n        const { _, __ } = pri(this);\n        const callback = () => {\n            stream.isEnd = true;\n            __.check();\n        };\n        stream.on('end', callback);\n        stream.on('finish', callback);\n        stream.removeChecker = () => {\n            stream.removeListener('end', callback);\n            stream.removeListener('finish', callback);\n        };\n        __.list.push(stream);\n    }\n};\n\n/**\n * 对于流对象转换的简单实现\n * @param {*} s \n * @param {*} t \n */\nexport const transform = async function(s, t) {\n    if (!s.pipe) throw new Error('源对象不是Stream类型!');\n    if (!t.pipe) throw new Error('目标对象不是Stream类型!');\n    return await V.callback(call => {\n        t.on('error', call);\n        t.on('finish', call);\n        s.pipe(t);\n    });\n}\nexport const tranform = transform;\nexport default { formatPath, execDir, createDir, copyFile, moveFile, copyDir, moveDir, checker, transform, tranform, rmDir }\nconst pri = V.pris();"]}