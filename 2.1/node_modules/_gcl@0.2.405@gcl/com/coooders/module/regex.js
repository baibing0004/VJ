'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testCurrenyOrNull = exports.testIPOrNull = exports.testZipCodeOrNull = exports.testQQOrNull = exports.testChineseOrNull = exports.testEmailOrNull = exports.testUrlOrNull = exports.testPhoneOrNull = exports.testMobileOrNull = exports.testCardOrNull = exports.testPasswordOrNull = exports.testLetterOrNull = exports.testIntOrNull = exports.testNumberOrNull = exports.testCurreny = exports.testIP = exports.testZipCode = exports.testQQ = exports.testChinese = exports.testEmail = exports.testUrl = exports.testPhone = exports.testMobile = exports.testCard = exports.testRequired = exports.testPassword = exports.testLetter = exports.testInt = exports.testNumber = exports.testRegex = undefined;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _testRegex$testNumber;

var _tool = require('../common/tool');

var _tool2 = _interopRequireDefault(_tool);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 限制参数满足条件
 * @param {要判断的参数} value
 * @param {正则} regex 
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testRegex = exports.testRegex = function testRegex(value, regex, error, key) {
  var isRequire = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

  regex = regex.test ? regex : new RegExp(regex, 'i');
  var val = typeof value != 'undefined' && value != null && ('' + value).length ? regex.test(value) ? false : error || '\u9650\u5236' + key + '\u53C2\u6570\u9700\u6EE1\u8DB3\u6B63\u5219\u8868\u8FBE\u5F0F\u8981\u6C42:' + regex : isRequire ? '\u9650\u5236' + key + '\u53C2\u6570\u4E3A\u5FC5\u586B' : false;
  if (!!val) {
    var e = new Error(val);
    e.status = 401;
    throw e;
  }
};
/**
 * 限制参数满足是数字
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testNumber = exports.testNumber = function testNumber(value, error, key, isRequire) {
  return testRegex(value, /^([0-9]+\.{0,1}[0-9]{0,2})$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u6570\u5B57', key, isRequire);
};

/**
 * 限制参数满足是数字
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testInt = exports.testInt = function testInt(value, error, key, isRequire) {
  return testRegex(value, /^([0-9]+)$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u6B63\u6574\u6570', key, isRequire);
};

/**
 * 限制参数满足是数字
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testLetter = exports.testLetter = function testLetter(value, error, key, isRequire) {
  return testRegex(value, /^([0-9]+)$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u6B63\u6574\u6570', key, isRequire);
};

/**
 * 限制参数满足是数字
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testPassword = exports.testPassword = function testPassword(value, error, key, isRequire) {
  return testRegex(value, /^(([a-zA-Z]|\w){5,17})$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u6EE1\u8DB3\u5BC6\u7801\u8981\u6C42', key, isRequire);
};

/**
 * 限制参数满足是非空必填
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testRequired = exports.testRequired = function testRequired(value, error) {
  var regex = /^\s+$/g;
  var val = _tool2.default.isValid(value) ? !regex.test(value) ? false : error : error;
  if (!!val) {
    var e = new Error(val);
    e.status = 401;
    throw e;
  }
};

/**
 * 限制参数满足是身份证
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testCard = exports.testCard = function testCard(value, error, key, isRequire) {
  return testRegex(value, /^((\d{14}|\d{17})(\d|[a-zA-Z]))$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u8EAB\u4EFD\u8BC1', key, isRequire);
};

/**
 * 限制参数满足是手机号
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testMobile = exports.testMobile = function testMobile(value, error, key, isRequire) {
  return testRegex(value, /^(1[3|4|5|6|7|8|9][0-9]\d{8})$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u624B\u673A\u53F7', key, isRequire);
};

/**
 * 限制参数满足是座机
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testPhone = exports.testPhone = function testPhone(value, error, key, isRequire) {
  return testRegex(value, /^(\d{3}-\d{8}|\d{4}-\d{7}))$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u5EA7\u673A\u53F7', key, isRequire);
};

/**
 * 限制参数满足是网络地址
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testUrl = exports.testUrl = function testUrl(value, error, key, isRequire) {
  return testRegex(value, /^((http|https|ftp|ws):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&:/~\+#]*[\w\-\@?^=%&/~\+#])?)$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662FURL', key, isRequire);
};

/**
 * 限制参数满足是电子邮箱
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testEmail = exports.testEmail = function testEmail(value, error, key, isRequire) {
  return testRegex(value, /^(\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*)$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u90AE\u7BB1', key, isRequire);
};

/**
 * 限制参数满足是中文
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testChinese = exports.testChinese = function testChinese(value, error, key, isRequire) {
  return testRegex(value, /^([\u4e00-\u9fa5]{0,})$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u4E2D\u6587', key, isRequire);
};

/**
 * 限制参数满足是QQ
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testQQ = exports.testQQ = function testQQ(value, error, key, isRequire) {
  return testRegex(value, /^([1-9]\d{4,12})$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662FQQ\u53F7', key, isRequire);
};

/**
 * 限制参数满足是邮政编码
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testZipCode = exports.testZipCode = function testZipCode(value, error, key, isRequire) {
  return testRegex(value, /^([1-9]\d{5}(?!\d))$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u90AE\u7F16', key, isRequire);
};

/**
 * 限制参数满足是IP
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testIP = exports.testIP = function testIP(value, error, key, isRequire) {
  return testRegex(value, /^(([\d+\.]{3}|[\d+\.]{5})\d+)$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662FIP', key, isRequire);
};

/**
 * 限制参数满足是金额（2位小数）
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testCurreny = exports.testCurreny = function testCurreny(value, error, key, isRequire) {
  return testRegex(value, /^(\d+\.\d{2})$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u91D1\u989D', key, isRequire);
};

/**
 * 限制参数满足是数字
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testNumberOrNull = exports.testNumberOrNull = function testNumberOrNull(value, error, key) {
  return testRegex(value, /^([0-9]+\.{0,1}[0-9]{0,2})$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u6570\u5B57', key, false);
};

/**
 * 限制参数满足是数字
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testIntOrNull = exports.testIntOrNull = function testIntOrNull(value, error, key) {
  return testRegex(value, /^([0-9]+)$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u6B63\u6574\u6570', key, false);
};

/**
 * 限制参数满足是数字
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testLetterOrNull = exports.testLetterOrNull = function testLetterOrNull(value, error, key) {
  return testRegex(value, /^([0-9]+)$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u6B63\u6574\u6570', key, false);
};

/**
 * 限制参数满足是数字
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testPasswordOrNull = exports.testPasswordOrNull = function testPasswordOrNull(value, error, key) {
  return testRegex(value, /^(([a-zA-Z]|\w){5,17})$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u6EE1\u8DB3\u5BC6\u7801\u8981\u6C42', key, false);
};

/**
 * 限制参数满足是身份证
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testCardOrNull = exports.testCardOrNull = function testCardOrNull(value, error, key) {
  return testRegex(value, /^((\d{14}|\d{17})(\d|[a-zA-Z]))$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u8EAB\u4EFD\u8BC1', key, false);
};

/**
 * 限制参数满足是手机号
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testMobileOrNull = exports.testMobileOrNull = function testMobileOrNull(value, error, key) {
  return testRegex(value, /^(1[3|4|5|6|7|8|9][0-9]\d{8})$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u624B\u673A\u53F7', key, false);
};

/**
 * 限制参数满足是座机
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testPhoneOrNull = exports.testPhoneOrNull = function testPhoneOrNull(value, error, key) {
  return testRegex(value, /^(\d{3}-\d{8}|\d{4}-\d{7}))$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u5EA7\u673A\u53F7', key, false);
};

/**
 * 限制参数满足是网络地址
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testUrlOrNull = exports.testUrlOrNull = function testUrlOrNull(value, error, key) {
  return testRegex(value, /^((http|https|ftp|ws):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&:/~\+#]*[\w\-\@?^=%&/~\+#])?)$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662FURL', key, false);
};

/**
 * 限制参数满足是电子邮箱
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testEmailOrNull = exports.testEmailOrNull = function testEmailOrNull(value, error, key) {
  return testRegex(value, /^(\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*)$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u90AE\u7BB1', key, false);
};

/**
 * 限制参数满足是中文
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testChineseOrNull = exports.testChineseOrNull = function testChineseOrNull(value, error, key) {
  return testRegex(value, /^([\u4e00-\u9fa5]{0,})$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u4E2D\u6587', key, false);
};

/**
 * 限制参数满足是QQ
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testQQOrNull = exports.testQQOrNull = function testQQOrNull(value, error, key) {
  return testRegex(value, /^([1-9]\d{4,12})$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662FQQ\u53F7', key, false);
};

/**
 * 限制参数满足是邮政编码
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testZipCodeOrNull = exports.testZipCodeOrNull = function testZipCodeOrNull(value, error, key) {
  return testRegex(value, /^([1-9]\d{5}(?!\d))$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u90AE\u7F16', key, false);
};

/**
 * 限制参数满足是IP
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testIPOrNull = exports.testIPOrNull = function testIPOrNull(value, error, key) {
  return testRegex(value, /^(([\d+\.]{3}|[\d+\.]{5})\d+)$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662FIP', key, false);
};

/**
 * 限制参数满足是金额（2位小数）
 * @param {要判断的值} value
 * @param {错误说明} error 
 * @param {是否必填} isRequire 
 */
var testCurrenyOrNull = exports.testCurrenyOrNull = function testCurrenyOrNull(value, error, key) {
  return testRegex(value, /^(\d+\.\d{2})$/g, error || '\u9650\u5236' + key + '\u8981\u6C42\u662F\u91D1\u989D', key, false);
};

exports.default = (_testRegex$testNumber = { testRegex: testRegex, testNumber: testNumber, testCard: testCard, testChinese: testChinese, testCurreny: testCurreny, testEmail: testEmail, testInt: testInt, testIP: testIP, testLetter: testLetter, testMobile: testMobile }, (0, _defineProperty3.default)(_testRegex$testNumber, 'testNumber', testNumber), (0, _defineProperty3.default)(_testRegex$testNumber, 'testPassword', testPassword), (0, _defineProperty3.default)(_testRegex$testNumber, 'testPhone', testPhone), (0, _defineProperty3.default)(_testRegex$testNumber, 'testQQ', testQQ), (0, _defineProperty3.default)(_testRegex$testNumber, 'testRequired', testRequired), (0, _defineProperty3.default)(_testRegex$testNumber, 'testUrl', testUrl), (0, _defineProperty3.default)(_testRegex$testNumber, 'testZipCode', testZipCode), (0, _defineProperty3.default)(_testRegex$testNumber, 'testNumberOrNull', testNumberOrNull), (0, _defineProperty3.default)(_testRegex$testNumber, 'testCardOrNull', testCardOrNull), (0, _defineProperty3.default)(_testRegex$testNumber, 'testCardOrNull', testCardOrNull), (0, _defineProperty3.default)(_testRegex$testNumber, 'testChineseOrNull', testChineseOrNull), (0, _defineProperty3.default)(_testRegex$testNumber, 'testCurrenyOrNull', testCurrenyOrNull), (0, _defineProperty3.default)(_testRegex$testNumber, 'testEmailOrNull', testEmailOrNull), (0, _defineProperty3.default)(_testRegex$testNumber, 'testIntOrNull', testIntOrNull), (0, _defineProperty3.default)(_testRegex$testNumber, 'testIPOrNull', testIPOrNull), (0, _defineProperty3.default)(_testRegex$testNumber, 'testLetterOrNull', testLetterOrNull), (0, _defineProperty3.default)(_testRegex$testNumber, 'testMobileOrNull', testMobileOrNull), (0, _defineProperty3.default)(_testRegex$testNumber, 'testNumberOrNull', testNumberOrNull), (0, _defineProperty3.default)(_testRegex$testNumber, 'testPasswordOrNull', testPasswordOrNull), (0, _defineProperty3.default)(_testRegex$testNumber, 'testPhoneOrNull', testPhoneOrNull), (0, _defineProperty3.default)(_testRegex$testNumber, 'testQQOrNull', testQQOrNull), (0, _defineProperty3.default)(_testRegex$testNumber, 'testUrlOrNull', testUrlOrNull), (0, _defineProperty3.default)(_testRegex$testNumber, 'testZipCodeOrNull', testZipCodeOrNull), _testRegex$testNumber);
//# sourceMappingURL=regex.js.map