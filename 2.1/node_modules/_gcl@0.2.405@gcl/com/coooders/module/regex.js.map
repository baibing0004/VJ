{"version":3,"sources":["../../../src/coooders/module/regex.js"],"names":["testRegex","value","regex","error","key","isRequire","test","RegExp","val","length","e","Error","status","testNumber","testInt","testLetter","testPassword","testRequired","isValid","testCard","testMobile","testPhone","testUrl","testEmail","testChinese","testQQ","testZipCode","testIP","testCurreny","testNumberOrNull","testIntOrNull","testLetterOrNull","testPasswordOrNull","testCardOrNull","testMobileOrNull","testPhoneOrNull","testUrlOrNull","testEmailOrNull","testChineseOrNull","testQQOrNull","testZipCodeOrNull","testIPOrNull","testCurrenyOrNull"],"mappings":"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","file":"regex.js","sourcesContent":["import V from '../common/tool';\n\n/**\n * 限制参数满足条件\n * @param {要判断的参数} value\n * @param {正则} regex \n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testRegex = (value, regex, error, key, isRequire = true) => {\n        regex = regex.test ? regex : new RegExp(regex, 'i');\n        const val = (typeof(value) != 'undefined' && value != null && ('' + value).length) ? (regex.test(value) ? false : error || `限制${key}参数需满足正则表达式要求:${regex}`) : isRequire ? `限制${key}参数为必填` : false;\n        if (!!val) {\n            const e = new Error(val);\n            e.status = 401;\n            throw e;\n        }\n    }\n    /**\n     * 限制参数满足是数字\n     * @param {要判断的值} value\n     * @param {错误说明} error \n     * @param {是否必填} isRequire \n     */\nexport const testNumber = (value, error, key, isRequire) => testRegex(value, /^([0-9]+\\.{0,1}[0-9]{0,2})$/g, error || `限制${key}要求是数字`, key, isRequire);\n\n/**\n * 限制参数满足是数字\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testInt = (value, error, key, isRequire) => testRegex(value, /^([0-9]+)$/g, error || `限制${key}要求是正整数`, key, isRequire);\n\n/**\n * 限制参数满足是数字\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testLetter = (value, error, key, isRequire) => testRegex(value, /^([0-9]+)$/g, error || `限制${key}要求是正整数`, key, isRequire);\n\n/**\n * 限制参数满足是数字\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testPassword = (value, error, key, isRequire) => testRegex(value, /^(([a-zA-Z]|\\w){5,17})$/g, error || `限制${key}要求满足密码要求`, key, isRequire);\n\n/**\n * 限制参数满足是非空必填\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testRequired = (value, error) => {\n    const regex = /^\\s+$/g;\n    const val = V.isValid(value) ? (!regex.test(value) ? false : error) : error;\n    if (!!val) {\n        const e = new Error(val);\n        e.status = 401;\n        throw e;\n    }\n}\n\n/**\n * 限制参数满足是身份证\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testCard = (value, error, key, isRequire) => testRegex(value, /^((\\d{14}|\\d{17})(\\d|[a-zA-Z]))$/g, error || `限制${key}要求身份证`, key, isRequire);\n\n/**\n * 限制参数满足是手机号\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testMobile = (value, error, key, isRequire) => testRegex(value, /^(1[3|4|5|6|7|8|9][0-9]\\d{8})$/g, error || `限制${key}要求是手机号`, key, isRequire);\n\n/**\n * 限制参数满足是座机\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testPhone = (value, error, key, isRequire) => testRegex(value, /^(\\d{3}-\\d{8}|\\d{4}-\\d{7}))$/g, error || `限制${key}要求是座机号`, key, isRequire);\n\n/**\n * 限制参数满足是网络地址\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testUrl = (value, error, key, isRequire) => testRegex(value, /^((http|https|ftp|ws):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&:/~\\+#]*[\\w\\-\\@?^=%&/~\\+#])?)$/g, error || `限制${key}要求是URL`, key, isRequire);\n\n/**\n * 限制参数满足是电子邮箱\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testEmail = (value, error, key, isRequire) => testRegex(value, /^(\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*)$/g, error || `限制${key}要求是邮箱`, key, isRequire);\n\n/**\n * 限制参数满足是中文\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testChinese = (value, error, key, isRequire) => testRegex(value, /^([\\u4e00-\\u9fa5]{0,})$/g, error || `限制${key}要求是中文`, key, isRequire);\n\n/**\n * 限制参数满足是QQ\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testQQ = (value, error, key, isRequire) => testRegex(value, /^([1-9]\\d{4,12})$/g, error || `限制${key}要求是QQ号`, key, isRequire);\n\n/**\n * 限制参数满足是邮政编码\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testZipCode = (value, error, key, isRequire) => testRegex(value, /^([1-9]\\d{5}(?!\\d))$/g, error || `限制${key}要求是邮编`, key, isRequire);\n\n/**\n * 限制参数满足是IP\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testIP = (value, error, key, isRequire) => testRegex(value, /^(([\\d+\\.]{3}|[\\d+\\.]{5})\\d+)$/g, error || `限制${key}要求是IP`, key, isRequire);\n\n/**\n * 限制参数满足是金额（2位小数）\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testCurreny = (value, error, key, isRequire) => testRegex(value, /^(\\d+\\.\\d{2})$/g, error || `限制${key}要求是金额`, key, isRequire);\n\n/**\n * 限制参数满足是数字\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testNumberOrNull = (value, error, key) => testRegex(value, /^([0-9]+\\.{0,1}[0-9]{0,2})$/g, error || `限制${key}要求是数字`, key, false);\n\n/**\n * 限制参数满足是数字\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testIntOrNull = (value, error, key) => testRegex(value, /^([0-9]+)$/g, error || `限制${key}要求是正整数`, key, false);\n\n/**\n * 限制参数满足是数字\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testLetterOrNull = (value, error, key) => testRegex(value, /^([0-9]+)$/g, error || `限制${key}要求是正整数`, key, false);\n\n/**\n * 限制参数满足是数字\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testPasswordOrNull = (value, error, key) => testRegex(value, /^(([a-zA-Z]|\\w){5,17})$/g, error || `限制${key}要求满足密码要求`, key, false);\n\n/**\n * 限制参数满足是身份证\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testCardOrNull = (value, error, key) => testRegex(value, /^((\\d{14}|\\d{17})(\\d|[a-zA-Z]))$/g, error || `限制${key}要求身份证`, key, false);\n\n/**\n * 限制参数满足是手机号\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testMobileOrNull = (value, error, key) => testRegex(value, /^(1[3|4|5|6|7|8|9][0-9]\\d{8})$/g, error || `限制${key}要求是手机号`, key, false);\n\n/**\n * 限制参数满足是座机\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testPhoneOrNull = (value, error, key) => testRegex(value, /^(\\d{3}-\\d{8}|\\d{4}-\\d{7}))$/g, error || `限制${key}要求是座机号`, key, false);\n\n/**\n * 限制参数满足是网络地址\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testUrlOrNull = (value, error, key) => testRegex(value, /^((http|https|ftp|ws):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&:/~\\+#]*[\\w\\-\\@?^=%&/~\\+#])?)$/g, error || `限制${key}要求是URL`, key, false);\n\n/**\n * 限制参数满足是电子邮箱\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testEmailOrNull = (value, error, key) => testRegex(value, /^(\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*)$/g, error || `限制${key}要求是邮箱`, key, false);\n\n/**\n * 限制参数满足是中文\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testChineseOrNull = (value, error, key) => testRegex(value, /^([\\u4e00-\\u9fa5]{0,})$/g, error || `限制${key}要求是中文`, key, false);\n\n/**\n * 限制参数满足是QQ\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testQQOrNull = (value, error, key) => testRegex(value, /^([1-9]\\d{4,12})$/g, error || `限制${key}要求是QQ号`, key, false);\n\n/**\n * 限制参数满足是邮政编码\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testZipCodeOrNull = (value, error, key) => testRegex(value, /^([1-9]\\d{5}(?!\\d))$/g, error || `限制${key}要求是邮编`, key, false);\n\n/**\n * 限制参数满足是IP\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testIPOrNull = (value, error, key) => testRegex(value, /^(([\\d+\\.]{3}|[\\d+\\.]{5})\\d+)$/g, error || `限制${key}要求是IP`, key, false);\n\n/**\n * 限制参数满足是金额（2位小数）\n * @param {要判断的值} value\n * @param {错误说明} error \n * @param {是否必填} isRequire \n */\nexport const testCurrenyOrNull = (value, error, key) => testRegex(value, /^(\\d+\\.\\d{2})$/g, error || `限制${key}要求是金额`, key, false);\n\nexport default { testRegex, testNumber, testCard, testChinese, testCurreny, testEmail, testInt, testIP, testLetter, testMobile, testNumber, testPassword, testPhone, testQQ, testRequired, testUrl, testZipCode, testNumberOrNull, testCardOrNull, testCardOrNull, testChineseOrNull, testCurrenyOrNull, testEmailOrNull, testIntOrNull, testIPOrNull, testLetterOrNull, testMobileOrNull, testNumberOrNull, testPasswordOrNull, testPhoneOrNull, testQQOrNull, testUrlOrNull, testZipCodeOrNull };"]}