'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Spliter = exports.tcd = exports.gcd = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _tool = require('../common/tool');

var _tool2 = _interopRequireDefault(_tool);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * gcd 使用辗转相除法获取最大公约数 http://blog.jobbole.com/106315/
 */
var gcd = exports.gcd = function gcd(a, b) {
    if (a == b) return a;else if (a < b) return gcd(b, a);else {
        if ((a & 1) == 0 && (b & 1) == 0) {
            //偶数
            return gcd(a >> 1, b >> 1) << 1;
        } else if ((a & 1) == 0 && (b & 1) == 1) return gcd(a >> 1, b);else if ((a & 1) == 1 && (b & 1) == 0) return gcd(a, b >> 1);else return gcd(a - b, b);
    }
};
/**
 * tcd 使用辗转相除法获取用最大公约数求最小公倍数
 */
var tcd = exports.tcd = function tcd(a, b) {
    return a / gcd(a, b) * b;
};
var Spliter = exports.Spliter = function () {
    function Spliter() {
        var strs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        (0, _classCallCheck3.default)(this, Spliter);

        var that = this;

        var _pri = pri(that, { buffer: [], isComplete: false, root: {} }),
            _ = _pri._,
            __ = _pri.__;

        if (strs && strs.length > 0) {
            strs.forEach(function (v) {
                var ds = new Buffer.from(v).toJSON().data;
                var start = __.root;
                ds.forEach(function (v2) {
                    if (start[v2]) {
                        start[v2].length++;
                    } else start[v2] = { length: 1 };
                    start = start[v2];
                });
                if (start.length > 1) throw new Error('分隔符之间不能存在包含或者重复关系');
                start.end = v;
            });
            __.now = __.root;
        } else throw new Error('构造函数必须输入字符值');
    }

    (0, _createClass3.default)(Spliter, [{
        key: 'next',
        value: function next(data) {
            var _pri2 = pri(that),
                _ = _pri2._,
                __ = _pri2.__;

            if (__.now[data]) {
                __.buffer.push(data);
                if (__.now[data].end) {
                    __.isComplete = true;
                    __.buffer = __.now[data].end;
                }
                __.now = __.now[data];
                return true;
            } else return false;
        }
    }, {
        key: 'reset',
        value: function reset() {
            var _pri3 = pri(that),
                _ = _pri3._,
                __ = _pri3.__;

            __.buffer = [];
            __.isComplete = false;
            __.now = __.root;
        }
    }, {
        key: 'isComplete',
        get: function get() {
            return __.isComplete;
        }
    }, {
        key: 'rest',
        get: function get() {
            return __.buffer;
        }
    }]);
    return Spliter;
}();
exports.default = { gcd: gcd, tcd: tcd, Spliter: Spliter };

var pri = _tool2.default.pris();
//# sourceMappingURL=tool.js.map