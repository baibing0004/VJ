0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@3.10.10
3 info using node@v8.11.4
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/baibing/work/cv_zc/gcl',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/baibing/.npm/gcl/0.2.396/package.tgz not in flight; packing
9 verbose correctMkdir /Users/baibing/.npm correctMkdir not in flight; initializing
10 info lifecycle gcl@0.2.396~prepublish: gcl@0.2.396
11 silly lifecycle gcl@0.2.396~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/baibing/.npm/gcl/0.2.396/package.tgz',
12 verbose tar pack   '/Users/baibing/work/cv_zc/gcl' ]
13 verbose tarball /Users/baibing/.npm/gcl/0.2.396/package.tgz
14 verbose folder /Users/baibing/work/cv_zc/gcl
15 verbose addLocalTarball adding from inside cache /Users/baibing/.npm/gcl/0.2.396/package.tgz
16 verbose correctMkdir /Users/baibing/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd gcl@0.2.396
18 verbose afterAdd /Users/baibing/.npm/gcl/0.2.396/package/package.json not in flight; writing
19 verbose correctMkdir /Users/baibing/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/baibing/.npm/gcl/0.2.396/package/package.json written
21 silly publish { name: 'gcl',
21 silly publish   version: '0.2.396',
21 silly publish   description: '码农村nodejs类库，完成解决回调陷阱，配置框架，IOC框架，统一多DB访问框架，可扩展日志框架和io/db/net/thread/pool 克隆表达式，加解密算法等等一系列基础类库和算法的实现',
21 silly publish   main: './index.js',
21 silly publish   scripts:
21 silly publish    { compile: 'babel --presets es2015,stage-0 --plugins transform-runtime,babel-plugin-transform-decorators-legacy,babel-plugin-transform-es2015-modules-commonjs src --out-dir com --source-maps',
21 silly publish      watch: 'babel --presets es2015,stage-0 --plugins transform-runtime,babel-plugin-transform-decorators-legacy,babel-plugin-transform-es2015-modules-commonjs src --out-dir com --source-maps --watch' },
21 silly publish   dependencies:
21 silly publish    { 'crypto-js': '^3.1.9-1',
21 silly publish      'decimal.js': '^10.0.1',
21 silly publish      elasticsearch: '^15.1.1',
21 silly publish      emailjs: '^2.2.0',
21 silly publish      'fast-xml-parser': '^3.12.5',
21 silly publish      he: '^1.1.1',
21 silly publish      'iconv-lite': '^0.4.24',
21 silly publish      ioredis: '^4.16.2',
21 silly publish      memcached: '^2.2.2',
21 silly publish      mongodb: '^3.1.3',
21 silly publish      mssql: '^4.1.0',
21 silly publish      mysql: '^2.16.0',
21 silly publish      'node-xlsx': '^0.12.1',
21 silly publish      soap: '^0.25.0',
21 silly publish      uuid: '^3.3.2' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'https://git.coding.net/baibing0004/cv_zc.git' },
21 silly publish   keywords: [ 'gcl' ],
21 silly publish   author: { name: 'baibing' },
21 silly publish   license: 'ISC',
21 silly publish   devDependencies:
21 silly publish    { 'babel-cli': '^6.26.0',
21 silly publish      'babel-plugin-transform-decorators-legacy': '^1.3.5',
21 silly publish      'babel-plugin-transform-es2015-modules-commonjs': '^6.18.0',
21 silly publish      'babel-plugin-transform-runtime': '^6.23.0',
21 silly publish      'babel-preset-es2015': '^6.24.1',
21 silly publish      'babel-preset-stage-0': '^6.24.1',
21 silly publish      eslint: '^3.12.2',
21 silly publish      'eslint-config-standard': '^6.2.1',
21 silly publish      'eslint-plugin-promise': '^3.4.0',
21 silly publish      'eslint-plugin-standard': '^2.0.1' },
21 silly publish   readme: '# gcl\n\n## 目录\n\n- [安装](#Install)\n- [简介](#Introduction)\n- [Tool基础类库](#Tool)\n- [Config配置框架](#config)\n- [Middler IOC框架](#middler)\n- [Ni 多数据类型DB访问框架](#ni)\n- [Log日志框架](#log)\n- [Debugging and reporting problems](#debugging-and-reporting-problems)\n- [Running tests](#running-tests)\n- [Todo](#todo)\n- [redis](#redis)\n\n## Install\n\n```sh\n$ npm install gcl\n```\n\n码农村 nodejs基本类库\n\n\n## Introduction\n\ngcl为同名C#类库的nodejs翻译版本，同时借鉴VESH框架下VJ的部分类库完成，总体上分为 \n * 基础类(com/coooders/common/tool)\n * 可扩展配置文件Config框架(com/coooders/io/config)\n * IOC容器Middler框架(com/coooders/bean/middler)\n * 跨数据库DB访问层Ni框架(com/coooders/db/ni)\n * 可配置日志文件Log框架(com/coooders/io/log)\n\n[VJ URL]: https://github.com/baibing0004/VJ\n\n\nHere is an example on how to use it:\n\n```js\nvar V      = require(\'gcl/com/coooders/common/tool\');\n//callback(func,[paras]) 同步或者异步方法的Promise封装 主要用于将系统默认的异步方法同步化 或者兼容3种不同的同步异步调用方式为异步调用。\n//但是请注意 不管是async 或者 callback都会导致返回值是一个Promise 此方法为0.2.9版本的核心\nconst test = async ()=>{\n    console.log(await V.callback(()=>1));//第一种非undefined 视作同步\n    console.log(await V.callback(call=>call(null,2)));//第二种直接返回undefined使用异步需要使用默认传入的最后一个参数进行回调（call(err,data))\n    console.log(await V.callback(()=>call=>call(null,3)));//第三种返回的是一个函数，则函数默认只有一个参数是call回调(call(err,data))\n    console.log(await V.callback(()=>new Promise(……)));//第四种返回Promise则会自动调用await方法判断其返回值，然后重复如上3种逻辑\n    console.log(await V.callback((...args)=>{console.log(args);return true;},1,2))//前四种都可以按照顺序在function后写入调用的参数，这里会显示args有3个最后一个是自动添加的call回调。\n    //所以对于最后一个回调是call(err,data) 这种类型的操作就可以做下面的异步转同步操作\n    console.log(await V.callback(fs.stat,path));\n    console.log(await V.callback(call=>fs.exists(path,ist=>call(null,ist))));//exists非常特殊 最后回调没有err所以要这么写\n}\n//V.forC,V.each,V.whileC,V.next,V.finalC 中调用的函数体都会按照callback的方法调用。除forC使用(k,v,call)方式传入参数外，其它方法一般都是(v,call)方式传入\n//异步循环处理对象属性\nV.forC({a:1,b:2},(k,v)=>{\n  //do something like console.log("${k}:${v}");\n});\nV.forC({a:1,b:2},(k,v)=>{\n  //do something like console.log("${k}:${v}");\n}).then(()=>{\n  //do something like console.log("it is end");\n});\n//或者同步循环处理\nV.forC({a:1,b:2},(k,v)=>{\n  //do something like console.log("${k}:${v}");\n},true).then(()=>{\n  //do something like console.log("it is end");\n});\n//与此类似的异步同步循环处理方式 还有 V.each(处理数组）,V.whileC(首个参数是function,当返回null或者undefined，循环终止!).V.next(保证多个函数顺序执行),V.finalC（保证多个函数乱序结束，但是最后一个方法最后执行）\n```\n\n从这个例子当中，我们可以知道:\n\n* GCL提供了一系列基本方法和框架保证在nodejs异步处理环境下 尽可能简单的完成连贯的业务逻辑和处理 避免回调陷阱。\n\n## Tool\n```js\n  var V = require(\'gcl/com/coooders/common/tool\');\n```\n### 对象判断\n```js\n  V.isValid("") == false; \n  V.getValue = ()=>V.isValid(data) ? data : defaultData;\n  V.isArray(array);\n  V.getType(obj);\n```\n * V.isValid、V.getValue 很简单仅仅是判断是否为非0，非false，非undefined，非null的有效值，并根据是否有效返回默认值\n * V.isArray 判断是否是数组\n * V.getType 比typeof操作除基本类型判断外更进一步说明Object类型下其继承的类型\n\n### 字符串处理\n```js\n  V.format("{k}:<%=v%>",{k:\'Key\',v:\'Value\'})\n  var sb = V.sb();\n  var ehtml = V.encHtml(\'<html ……>\');\n  var dhtml = V.decHtml(ehtml);\n  var price = V.formatPrice(22.2222);\n  var jstr = V.toJsonString({});\n  var jobj = V.json(jstr);\n```\n * V.format 根据{}或者<%= 将数据中对应的Key/Value 生成字符串\n * V.sb 生成StringBuilder方式的隐藏类. 含有append,appendFormat,insert(start,data),insertFormat,remove(start,length),toString,clear等等方法 方法参数一定与您想要的参数和顺序一致不做解释，不太一致的已经给出了括号中的特别说明，请笑纳。特别地clear方法在清理内存时同时返回toString的结果，应该是个必备好方法吧。\n * 同时本类默认给String基类添加trim/startWith/endWith/eq等方法，看名知意。\n * V.encHtml与V.decHtml与encodeURICompent不同，enc仅仅对特殊字符标点符号进行转义文字不转义使得字符串转义后不会过大。\n * V.formatPrice(num[,decimals,point,sep]) 定义对数字转换成标准价格,包括定义数字，小数位(2)，小数点符号(.)，千分位符号(,)\n * V.toJsonString与V.json分别调用JSON对象的stringfy与parse功能完成json转换操作，但是建议对应不正规json的解析使用eval(\'(\'+str+\')\'),有奇效.\n\n### 异常处理\n```js\n  V.isDebug = true;//为真时showException才会显示内容\n  V.showException(desc,e);//会将e的message和stack给console.log打印出来\n  V.tryC(func[,catchfun]);\n  V.tryC2(err,func[,catchfun]);\n```\n * V.tryC/V.tryC2 专门为异常扑捉与显示使用,参数名一目了然，tryC2需要解释的是用于nodejs标准方式回调函数定义(err,data)=>V.tryC2(err,()=>{/*bala bala bala*/callback(null);},callback);特别合适省去判断是否已经报错的回调。\n\n### 日期处理\n```js\n  new Date().add(\'n\',3)//添加三分钟\n  V.watch([restart]);\n```\n * VJ为日期对象基类添加add(field,num)/diff(field,Date)/sub(field,num)/toString(\'yyyy/MM/dd HH:mm:ss\') 等方法\n * 除toString方法外field定义如下 y 年,q 季度,m 月,d 日,h 小时,n 分钟,s 秒,ms 毫秒\n * watch([restart]) 方法为计算两次调用watch方法之间时间差（ms），当restart为真时重新计时，否则连续计时。\n\n### 异步同步处理\n\n```js\n  V.once(()=>{}[,time]); //延迟time秒后执行，否则默认异步执行此方法(time=1)\n  V.whileC(()=>[].shift(),(v)=>{/*each time*/}[,()=>{/*end*/},false]);\n  V.whileC2(()=>[].shift(),(v,next)=>{/*each time if you continue next()*/next()}[,()=>{/*end*/},false]);\n  V.each([],(v)=>{/*each time*/},[()=>{/*end*/},false]);\n  V.each2([],(v,next)=>{/*each time if you continue next()*/next()},[()=>{/*end*/},false]);\n  V.forC({},(k,v)=>{/*each time*/}[,()=>{/*end*/},false]);\n  V.forC2({},(k,v,next)=>{/*each time if you continue next()*/next()}[,()=>{/*end*/},false]);\n  V.next((data,next)=>{next()},(data,next)=>{next()},……);\n  V.finalC((data,next)=>{next()},(data,next)=>{next()},……);\n```\n * 以V.once为基础，V.whileC/V.each/V.forC 分别对函数，数组，对象执行异步/同步循环操作，并提供最后两个参数为截止时调用的方法与异步（false）/同步（true）设置。\n * V.whileC2,V.each2,V.forC2 与其第一版本的参数定义基本一致，仅仅是循环体函数提供多一个参数next:function 用于当本次循环异步调用成功时由开发者决定是否可以继续循环。\n * V.next与V.finalC 提供多个函数体的顺序与不严格顺序执行。其中对每个方法提供data：{}与next:function两个参数，data用于多个函数或者顺序或者随机地共享一些参数与结果，next 用于继续循环。而两个方法的最后一个参数方法视作最终方法均保证无论前面的方法顺序执行或者随机执行与结束，最终方法都会获取到完整的data对象并结束整个函数 最终方法可以不调用next，但是调用next也不回出错。\n * 特别地如上方法均自动调用V.tryC保证循环体方法一旦报错，next均将继续调用。\n\n### 随机值与hash\n```js\n  var i = V.random(); //对Math.random的修正，保证同一毫秒执行也不回重复的随机数\n  var h = V.hash(str[,caseSensitive])//JS hash 是否要求区分大小写默认为否全部使用小写\n  var h2 = V.hash2(str)//JS hash2 使用crypto类库按照sha1进行hash的base64位hash\n```\n\n### TJSON\n```js\n  var strs = V.toTJson([[{},{}]]); \n  var dataset = V.evalTJson(strs);  \n```\n * TJSON 格式是使用数组方式表示JSON标准数组 JSON标准数组 一般由4维度组成分别是 数据集>数据表>数据行>数据=>[[{key:value},{},{},{}……]] 根据这个结构 TJON 分成3层 数据集>数据表>数据名行+数据值行+……=>[[[数据Keys],[数据Values1],[数据values2]……]] 这样可以减少规律数据在传输过程中过大\n * 在VESH客户端JS VJ中有对应的evalTJson方法供使用\n\n### 异步回调与对象合并\n```js\n  V.callback(func,params,call); \n  var data = V.merge(data,data2,data3……);\n  V.merge(data,data2,data3……,true); \n  var ret = V.merge({a:22,c:23},{a:34,b:33},{d:"2334",f:true,g:function(){alert("hahaha");}},{h:[1,2,3,4]});\n  var ret = V.merge({a:[{a:2},{b:3}]},{a:[{moveIndex:3,j:3},{k:4}],b:25});\n  var ret = V.merge({a:[{a:2},{b:3}]},{a:[{mergeIndex:3,j:3},{k:4}],b:25});\n```\n * V.merge 用于数组，对象的深度合并功能，使用递归方法将后面的数据逐次叠加和覆盖到前面的数据上，完成合并，当然也可以使用VJ.merge({},json)实现json的clone，对其内部属性的操作都不会影响到原始对象。\n * 当V.merge最后一个参数为true时，会自动覆盖第一个对象的属性值。\n * V.merge 处理对象的属性时，判断如果是对象则递归合并，如果是数组则进行合并，如果普通属性则进行覆盖。\n * V.merge 当对象属性是数组 可以通过moveIndex属性用于设定移动至的位置，mergeIndex只用于合并数组中的第几个对象\n\n\n### 继承与创建\n```js\n  // 第一种继承方式\n  var father = function(paras){\n      var _ = this,__ = {paras:paras};//分别定义公共与私有属性 方法\n      _.func1 = ()=>{console.log(\'father\')};\n      __.func2 = ()=>{console.log(\'father2\');}\n  };\n  var son = function(array,paras){\n      var _ = this,__ = {array:array};\n      V.inherit.apply(_,[father,[paras]]);\n      __.func1 = _.func1;\n      _.func1 = ()=>{console.log(\'son\');__.func1();}\n      __.func2 = ()=>{console.log(\'son2\');}\n  }\n  // 第二种继承方式\n  var father = function(paras){\n      var _ = this;//分别定义公共与私有属性 方法\n      _._paras = paras;\n      _._func2 = ()=>{console.log(\'father2\');}\n  };\n  V.merge(father.prototype,{\n      _.func1 = function(){console.log(\'father\')};\n  },true);\n  var son = function(array,paras){\n      var _ = this;\n      _._array = array;\n      father.apply(_,[paras]);\n      _._func2 = ()=>{console.log(\'son2\');}\n  }\n  V.inherit2(son,father,{\n      func1:function(){console.log(\'son\');son.func1();}//注意这里son.func1实际是father.prototype.func1 在inherit2中被自动赋值\n  });\n  var obj = V.create(son,[array,paras]);\n  obj = V.create2(son,[array,paras]);\n```\n * 第一种类定义方法 非常容易实现共有，私有方法和属性，且其私有方法和属性不可随继承而修改可以保证使用，保证可访问性，可连续继承性和父类方法的覆盖和调用。缺点是频繁创建时效率不高。\n * 第二种类定义方法 只有伪私有方法和属性（实质是公共方法容易发生覆盖）,语法较为繁琐，但是频繁创建时效率较高，而且也可以保证可访问性，连续继承性与父类方法的覆盖和调用。然后可以使用V.merge(prototype,{fun1:function(){},func2:function(){}},true) 方式添加公共方法，特别注意不能使用()=>方式定义函数，否则无法继承。\n * V.inherit适用于第一种类定义方法的继承调用时必须是V.inherit.apply(son\'s this,[father,[father\'s paras]]);\n * V.inherit2适用于第二种类定义方式的继承，调用时首先保证子类调用了father.apply(this,[father\'s paras]);然后调用V.inherit(son,father,{func1:function(){})\n * V.create与V.create2参数一致，可以创建第一第二中类方式创建的类实例或者普通传统方式定义的类实例，不同在于create方法使用eval方式创建对象，而create2使用继承方式创建对象当频繁创建同一类实例时create2的效率较高。与Object.create不同的是可以使用类定义的构造函数\n### 引用\n```js\n  var type = V.include(\'/com/tools\');\n```\n * V.include 调用require功能完成模块加载工作，特别注意当include参数为/开头时，默认按照nodejs启动文件的路径为绝对路径开始，而不是以文件夹为绝对路径，而且include允许按照绝对路径先尝试访问js文件失败后尝试访问njs同名文件失败后最后尝试直接访问require。njs文件放置js被窃取下载。\n \n### 事件与方法\n```js\n  var func = function(){};\n  var obj = new func();\n  V.applyCommandAndEvent(func);\n  V.applyCommandAndEvent(obj);\n  func.callCommand(\'com1\',[ss]);\n  func.callEvent(\'eve1\',[ss]);\n  func.registCommand(\'com1\',function(ss){});\n  func.registEvent(\'eve1\',function(ss){});\n\n  obj.callCommand(\'com1\',[ss]);\n  obj.callEvent(\'eve1\',[ss]);\n  obj.registCommand(\'com1\',function(ss){});\n  obj.registEvent(\'eve1\',function(ss){});\n  //func定义的事件和命令与obj定义的同名事件和命令是两回事奥，因为绑定的对象不同。\n```\n * V.applyCommandAndEvent 使用apply方式给对应的对象添加了一系列与方法事件相关的方法和属性。调用此方法后即可根据被调用的对象来分别触发和使用命令（命令模式）与事件（观察者模式）\n * 当然它与系统emiter不同的地方在于 它支持命令（一次注册，多次使用）模式，而且支持异步定义——即先调用后定义方式。它允许保留最后一次的调用信息直到命令或者事件被注册后触发。\n * 当然命令是同一个名字只能定义一个对应的方法，而且最后一次定义的方法会取消前面定义的同名方法。事件不是它允许多次被注册和调用。调用时如果未有注册信息，则保留最后一次调用信息到注册时触发，如果已有注册信息，则保留一分钟实现凡是一分钟内第一次注册的事件处理函数都可以再自动触发一次。\n * 它还支持hasCommand(name),cleanCommand(name),hasEvent(name),cleanEvent(name)方式来处理命令和事件的判断。\n * 同时给绑定的类或者对象提供了getSettings(key,{}),extendSettings(key,{}),clearSettings()方法用于提供对命名属性的定义扩展与清理。是命令事件模式的基础。调用getSettings(\'events\')和getSettings(\'comms\')即可分别获取事件注册者列表与命令注册者列表\n\n## config\n```js\n  //首先定义base.npcf文件\n{\n    ConfigConverts:{\n        base:null,\n        AppSettings:{type:\'AppSettingsConfigConvert\',path:\'/com/coooders/io/config\'},\n        Middler:{type:\'MiddlerConfigConvert\',path:\'/com/coooders/bean/middler\'},\n        Ni:{type:\'NiDataConfigConvert\',path:\'/com/coooders/db/ni\'}\n    }\n}\n//其次定义test.npcf文件（假设启动的文件名为test.js)\n{\n    AppSettings:{\n        a:111,\n        b:222\n    },\n    Middler:{\n        \'VESH.view\': {\n            pack: \'\',\n            method: \'constructor\',\n            mode: \'instance\',\n            //基本证明 \t\t\n            Logger: {type:\'Logger\', mode: \'static\', path: "/com/coooders/io/log",method:"constructorbean",constructorparalength:"1",params: [\n                    {type:\'LogRecord\',method:"constructor",params:[0,true,true,false]},\n                    {name:\'Lisener\',type:\'LogLisener\',method:"constructor",params:[[\n                        {type:\'LogTypeTrigger\',method:\'constructor\',params:[0,3]},\n                        {type:\'RegexTrigger\',method:\'constructor\',params:[\' test \']}\n                    ],{type:\'LogRecord\',method:"constructor",params:[0,true,true,true]},[{type:\'FileResource\',method:"constructor",params:[\'./log_{name}.log\',\'yyyyMMddHH\']}],true]}            \n                ]\n            }\n        }\n    },\n    Ni:{\n      \'test11\': { \'command\': \'select * from ac_case limit ?limit1;select ?limit1 as l1;\', \'params\': { \'limit1\': {type:\'Int\'} }, \'template\': \'template1\' },\n      \'ajaxtest22\': { \'command\': \'SELECT top 10 *,@limit1 as "l1" FROM [dbo].[ssidb_User];select @limit1 as "l1";\', \'params\': { \'limit1\':{type:\'Int\'} }, \'template\': \'template2\' },\n      \'ajaxtest33\': { \'command\': \'test\', \'params\': { \'limit1\':{type:\'Int\'} }, \'template\': \'template3\' },\n      \'ajaxtest44\': { \'command\': \'insert into abc<a> (a,cacheValue) values (?a,?cacheValue);\', \'params\': { \'a\':{type:\'Int\'},\'cacheValue\':{type:\'String\'} }, \'template\': \'template5\' },\t\t\n      \'ajaxtest55\': { \'command\': \'select cacheValue from abc<a> where a=?a\', \'params\': { \'a\':{type:\'Int\'},\'cacheValue\':{type:\'String\'} }, \'template\': \'template5\' },\n      \'ajaxtest66\': { \'command\': \'update abc<a> set cacheValue = ?cacheValue where a=?a\', \'params\': { \'a\':{type:\'Int\'},\'cacheValue\':{type:\'String\'} }, \'template\': \'template5\' },\n      \'ajaxtest77\': { \'command\': \'delete from abc<a> where a=?a\', \'params\': { \'a\':{type:\'Int\'},\'cacheValue\':{type:\'String\'} }, \'template\': \'template5\' },\n      \'ajaxtest11.Set\': { \'command\': \'insert into abc<cacheKey> (cacheKey,cacheValue) values (?cacheKey,?cacheValue);\', \'params\': { \'cacheKey\':{type:\'String\'},\'cacheValue\':{type:\'String\'} }, \'template\': \'template4\' },\n      \'ajaxtest11.Cache\': { \'command\': \'select cacheValue from abc<cacheKey> where cacheKey=?cacheKey;\', \'params\': { \'cacheKey\':{type:\'String\'} }, \'template\': \'template4\' }\t\t\n    }\n}\n\n  var C = require(\'gcl/com/coooders/io/config\');\n  C.getApplicationConfigManager((err,conf)=>{\n    var value =  conf.getConfigValue(\'AppSettings\',\'a\');\n    var config = conf.getConfig("Middler");\n    config.getValue(new function(){this.getValue = config=>config.getValueByName("VESH.view",\'Logger\')}).info(value);//\n  });\n  var conf = C.getApplicationConfigManagerSync();\n```\n * C.getApplicationConfigManager和C.getApplicationConfigManagerSync 分别是异步与同步情况下调用了启动文件所在文件夹的同名文件.npcf并嵌套同一文件夹下的base.npcf文件来完成配置转换类与配置定义的。\n * 如上两个方法返回的是分别是一个ConfigManager的实例，ConfigManager拥有getConfig(configkey),getConfigValue(configkey,key),setConfigValue(configkey,key,value),update 4个方法，其getConfig返回的Config类实例拥有getValue(key)与setValue(key,value)两个方法，update用于更新配置文件。\n * ConfigManager实例是一个可以自嵌套而成的ConfigManager树，ConfigManager实例实现自叶子节点到根节点的查找，当当前文件使用getConfig或者getConfigValue值为空时会按照节点链继续向上查找。\n * ConfigManager的getConfigValue返回的值类型要根据base.npcf下对应根一级节点的解析器决定，\n * 譬如 conf.getConfigValue(\'AppSettings\',\'a\'); 是根据base.npcf中定义的AppSettings节点的解析器AppSettingsConfigConvert解析test.npcf的AppSettings节点生成的Config实例的getValue方法返回的值 结果为111\n * 而conf.getConfig("Middler")是根据base.npcf中MiddlerConfigConvert解析test.npcf中的Middler节点生成的Config，它getValue生成的对象是根据配置new 出来的/com/coooders/io/log中定义的Logger类实例。当然Middler节点中对Logger的生成定义了一系列构造参数，Middler的强大功能在下面的章节(#Middler IOC框架)中详细介绍\n * 除此之外require(\'gcl/com/coooders/io/config\')还提供了一系列方法和基础类用于实现更复杂的嵌套和用户自定义节点解析器\n\n### Config框架还有那些方法\n```js\n  var C = require(\'gcl/com/coooders/io/config\');\n  C.getApplicationConfigManager((err,conf)=>{\n    var cm2 = C.getConfigManagerFromObj(conf,{\n      Middler:{\n          Ni:{\n             template:{type:\'NiTemplate\',path:\'gcl/com/coooders/db/ni\'}\n          }\n      }\n    });\n    var template = cm2.getConfigValue(\'Middler\',\'Ni/template\');\n    ………… \n  });\n  var cm2 = C.getConfigManagerFromJS(parent,path);\n  C.getConfigManagerFromFile(parent,path,(err,cm2)=>{/*…………*/});\n  var cm2 = C.getConfigManagerFromFileSync(parent,path);\n  C.getConfigManagerFromDir(parent,path,(err,cm2)=>{/*…………*/})\n  var cm2 = C.getConfigManagerFromDirSync(parent,path);\n```\n * 如上所述，Config框架提供从nodejs文件（getConfigManagerFromJS）,json对象(getConfigManagerFromObj)，json文件（getConfigManagerFromFile）,文件夹下所有json文件(getConfigManagerFromDir)\n * 而且文件和文件夹还提供了同步方法getConfigManagerFromFileSync,getConfigManagerFromDirSync\n * 对于对应启动文件的默认文件也提供了（getApplicationConfigManagerFromJS）,json对象(getApplicationConfigManagerFromObj)，json文件（getApplicationConfigManagerFromFile,getApplicationConfigManagerFromFileSync）,文件夹下所有json文件(getApplicationConfigManagerFromDir，getApplicationConfigManagerFromDirSync)等等方法\n * 特别注意的是FromDir类型的操作都会把文件夹下的所有文件视作json文件并通过V.merge方式合并为一个对象所以存在同名覆盖问题。\n\n### Config框架如何扩展\n\n```js\n    var C = require(\'gcl/com/coooders/io/config\');\n    C.ConfigConvert = function(){\n      var _ = this;\n      _.toConfig = function(val){return null;};\n      _.toStrings = function(config){return "";};\n      _.needConfig = false;\n    };\n  \tC.AppSettingsConfigConvert = function(){\n      var _ = this;\n      {\n        V.inherit.apply(_,[C.ConfigConvert,[]]);\t\t\t\n      }\n      _.toConfig = function(val){\n        var conf = new C.Config();\n        val = V.getValue(val,{});\n        for(var i in val){\n          conf.data[i] = val[i];\n        }\n        return conf;\n      };\n    };\n```\n * 以AppSettingsConfigConvert为例子，需要使用inherit继承C.ConfigConvert,然后覆盖toConfig(json) 产生一个C.Config对象即可 可以直接使用new C.Config() 并通过.data[k]=v 方式进行设置。或者重新生成自己的Config类也可以。\n * needConfig参数默认为false当为真时，getConfig函数会收到两个参数(val,cm) cm的值是调用解析器的ConfigManager实例。可以用于调用其它Config配置。\n * 然后为了在所有的都能访问到最好在base.npcf中设置新的节点名和解析器 AppSettings:{type:\'AppSettingsConfigConvert\',path:\'/com/coooders/io/config\'},\n * 它的规则是type为require(path)后的属性类，path当以\'/\'开头时以启动文件为根目录，而不是以盘符为根目录，其余规则与require一致。\n\n# middler \n## Middler IOC框架\n\n```js\n    var C = require(\'gcl/com/coooders/io/config\');\n    var M = require(\'gcl/com/coooders/bean/middler\');\n    C.getApplicationConfigManager((err,conf)=>{\n      var middler = new M.Middler(conf);\n      var template = cm2.getConfigValue(\'Middler\',\'Ni/template\');\n      var template = middler.getObjectByAppName(\'Ni\',\'template\');\n    ………… \n    middler.setObjectByAppName("Ni",\'template\',template);\n  });\n```\n * new M.Middler是处理以ConfigManager为基础的一个简单封装类，重要的是gcl/com/coooders/bean/middler下的MiddlerConfigConvert类，它负责将Middler下定义的Json格式数据转换成不同名称的实例对象Json内容转换成VJ.config.Config的一个子类并覆盖getValue方法将对应的json配置转换成对应的JS对象。\n * 当然也可以使用M.getMiddlerFormJS(path,call(err,middler)),M.getMiddlerFormFile(json,call(err,middler)),M.getMiddlerFromFile(path,call(err,middler)) 三种方式获得在getApplicationConfigManager基础上的3级ConfigManager的Middler对象，代码保证getApplicationConfigManager不会重复生成对象。\n * 当然还可以直接使用M.getObjectByAppName(cm,app,name)方法来获取实例或者直接使用M.getTypeByAppName(cm,app,name)方法来获取实例的类\n * Middler有两个通用的方法getObjectByAppName(app,name)和setObjectByAppName(app,name,obj)和一个特有的方法getTypeByAppName(app,name)一般地如果创建的对象保持方式是池类型，必须setObjectByAppName否则就不能释放占用。所以为了稳妥起见，建议用户在使用完对象后使用setObjectByAppName方法将对象返回Middler\n\n```js\n    //Middler下的一级属性叫做App,App只能定义{type……}，{params:[……]} 两种类型，分别对应对象和对象数组\n    Middler:{\n        //在一个AppName或者params对象数组下可以设置默认的method,mode,path,pack等等参数\n        appName:{\n            //method 说明该AppName下的默认对象构造方法，如果不定义则默认为constructor，该值共有五种 constructor(构造函数也就是new这种方式)/bean(无参构造函数+set/get属性名方式设置属性方式+无set/get直接进行属性设置)/factory(直接调用js方法方式)/constructorbean(构造函数+bean方式)/factorybean(工厂方法+bean方式) 后两种方式需要配合constructorparalength参数说明构造函数的参数个数\n            method:\'\',\n            //mode 说明该AppName下的对象保持方式，如果不定义则默认为Static，该值共有3种 static(静态单例)/instance(每次请求都新建)/pool(对象池模式保证池内对象数随着使用频率增减)\n            mode:\'\',\n            //path 说明该AppName下的JS对象都来自于一个V.include地址,其特别处理/开始的根目录。而且具体实例的path属性可使用~开头复用App默认的Path地址\n            path:\'\',\n            //pack 说明该AppName下的JS对象的类名头部，如果不定义则默认为空，即使定义也仅限于具体对象的type属性以\'.\'开头时生效\n            pack:\'\',\n            //type属性定义了对象的类名如果以\'.\'开头则将AppName的pack属性值+type属性值构成完整的type属性值 如果不定义type属性则被视作Objects数组定义，只返回params对象的转换值。特别地对于nodejs中直接将module.exports = function 这种定义方式适用 type="" 这种定义方式，切不可没有。其在factory时应该是class.method格式或者method格式\n            //path属性定义了js对象的所在V.include路径 如果不定义那么使用AppName下的默认值，如果多个对象的path值相同那么使用于module.export = function(){}, module.export.Class1 = function(){} 这种定义方式。\n            //method属性定义js对象的构造方法，如果不定义那么使用AppName下的默认值\n            //mode属性定义js对象的保持方式，如果不定义那么使用AppName下的默认值\n            //constructorparalength属性仅在method为constructorbean/factorybean时生效，以区分构造函数或者工厂方法需要的参数个数，其后的参数使用bean方式进行设置\n            //params 属性定义js对象的构造参数数组，其类型有\'\'，boolean，number，date,null，当其类型为{}时，可以定义{type,path,method…………}一个完整的新实例，{ref="App/Name"}一个引用实例,{middler:true} 当前的Middler本身，{self:true} 当前的ConfigManager本身，{params:[……]} 一个对象数组，{param:\'name\',params:[key,value]} 调用新实例的setName(key,value)方法或者{a:1,b:2,c:3……}的一个json对象\n            ObjectName:{type:\'\',path:\'\',method:\'\',mode:\'\',constractparalength:\'\',params:[\n                //一个新的JS对象定义 其各个属性值都可以使用父对象的属性值作为默认值 当然其params属性还可以类似的进一步定义下去。这个js对象因为没有ObjectName所以无法被外部通过middler.getObjectByAppName方式访问，但是会被随机命名后放置在当前Middler的config空间中保存。从而实现CMD模型。\n                {type:\'\',path:\'\',method:\'\',mode:\'\',constractparalength:\'\'},\n                //一个已有的JS对象引用，ref的定义格式使用\'appName/objectName\'方式定义路径，如果没有appName则默认是当前AppName下的对象\n                {ref:\'\'},\n                //一个json方式设置的属性值，如果在constructor模式下，会作为参数之一传递给构造函数，如果是bean模式下会自动添加在js对象上\n                {a:1,b:2},\n                //一个json方式设置的属性值，如果在constructor模式下，会作为参数之一传递给构造函数，如果是bean模式下会自动添加在js对象上 其定义效果与上个参数相同但是同名属性会覆盖上个参数中的同名属性\n                {a:3},\n                //一个json方式设置的属性值，如果在constructor模式下，会作为参数之一直接传递给构造函数，如果是bean模式下会调用js对象的set属性名方法，将剩余属性作为两个参数调用该方法同样的属性值既可以是默认类型也可以是middler规定的js对象定义格式。\n                {param:\'属性名\',params["key",{a:1,b:2}]},\n                //传统的js数据,不能作为bean方式下调用的数据\n                \'\',\n                //传统的js数据,不能作为bean方式下调用的数据\n                1,\n                true,\n                //middler对象将当前的完整Config链实例作为参数传入仅能在constructor或者factory下使用或者作为bean方法模式下的一个子值\n                {self:"true"},\n                //middler对象允许通过这种方式获取定义对象的类作为参数，从而供这个类对象的构造函数获取到父类实现AMD功能\n                {type:\'VJ.middler.getTypeByAppName\',params:[{self:true},\'VESH.view\',\'panel\'],method:\'factory\',mode:\'static\'},\n                //middler对象允许通过这种方式设置ObjectName的一个方法setType来进行复制但是仅限method为bean,constructorbean,factorybean。\n                {name:\'Type\',type:\'VJ.middler.getTypeByAppName\',params:[{self:true},\'VESH.view\',\'panel\'],method:\'factory\',mode:\'static\'}\n            ]},\n            //middler框架中对象数组的定义方式（不定义type属性，而且其各个属性值作为参数中的默认值向下传递，返回的数组对象为其params中定义的值\n            ObjectsName:{path:\'\',method:\'\',mode:\'\',constractparalength:\'\',params:[\n                {type:\'\',path:\'\',method:\'\',mode:\'\',constractparalength:\'\'},\n                {ref:\'\'}\n            ]}\n        }\n    }\n```\n * Middler框架支持创建对象的三种保持方式即mode属性（static,instance,pool)，应用于创建完成后如何在Middler中保持，其中pool方法要求具有size属性设定池大小，且在get后必须setObjectByAppName才能释放适用的对象被其它对象使用。\n * Middler框架支持创建对象的五种创建方式即method属性(constructor,bean,factory,constructorbean,factorybean),分别是构造函数，无参属性设置构造函数，工厂，构造+属性设置，工厂+属性设置。便于使用配置文件完成对象的创建和保持。\n * Middler框架通过例子中的配置文件，支持nodejs中定义的各种对象和实例的创建和构造\n * method 说明对象构造方法，如果不定义则默认为constructor，该值共有五种 constructor(构造函数也就是new这种方式)/bean(无参构造函数+set/get属性名方式设置属性方式+无set/get直接进行属性设置)/factory(直接调用js方法方式)/constructorbean(构造函数+bean方式)/factorybean(工厂方法+bean方式) 后两种方式需要配合constructorparalength参数说明构造函数的参数个数\n * mode 说明对象保持方式，如果不定义则默认为Static，该值共有3种 static(静态单例)/instance(每次请求都新建)/pool(对象池模式保证池内对象数随着使用频率增减)\n * path 说明对象地址都来自于一个V.include地址,其特别处理/开始的根目录。而且具体实例的path属性可使用~开头复用App默认的Path地址\n * type 定义了对象的类名如果以\'.\'开头则将AppName的pack属性值+type属性值构成完整的type属性值 如果不定义type属性则被视作Objects数组定义，只返回params对象的转换值。特别地对于nodejs中直接将module.exports = function 这种定义方式适用 type="" 这种定义方式，切不可没有。其在factory时应该是class.method格式\n\n## ni\n### 多数据类型DB访问框架\n\n\n```js\n    //npcf文件中Ni部分\n    Middler:{        \n        \'Ni\':{\n            constructorparalength: false, size: 50,\n            method: \'constructor\',\n            mode: \'static\',\n            path: \'/com/coooders/db/ni\',\n            mysqlfactory: { type: \'NiMySQLDataFactory\' },\n            mssqlfactory: { type: \'NiMsSQLDataFactory\' },\n            objfactory: { type: \'NiObjectDataFactory\',params:[{middler:true}]},\n            memfactory: { type: \'NiMemSQLDataFactory\',params:[{type:\'NoSQLParser\',path:\'/com/coooders/db/nosql/nosql\'}]},\n            mongofactory: { type: \'NiMongoSQLDataFactory\',params:[{type:\'NoSQLParser\',path:\'/com/coooders/db/nosql/nosql\'}]},\n            cm: { path:\'/com/coooders/io/config\', type: \'getApplicationConfigManagerFromFileSync\', params: [\'/ni.npcf\'], method: \'factory\' },            \n            template1: {\n                type: \'NiTemplate\', mode: \'instance\', params: [\n                    { type: \'NiStaticDataResource\', params: [{ ref: \'mysqlfactory\' }, { host:\'127.0.0.1\',localAddress:\'127.0.0.1\',port:\'3306\',user:\'root2\',password:\'111111\',database:\'cv_zc\',charset:\'utf8_general_ci\', timeout: 60000}] },\n                    { ref: \'cm\' }\n                ]\n            },\n            template2: {\n                type: \'NiTemplate\', mode: \'instance\', params: [\n                    { type: \'NiStaticDataResource\', params: [{ ref: \'mssqlfactory\' }, { server:\'127.0.0.1\',localAddress:\'127.0.0.1\',port:\'1433\',user:\'sa\',password:\'sa\',database:\'SSIDB\',pool: {min: 0, max:10,idleTimeoutMillis: 3000}, timeout: 60000}] },\n                    { ref: \'cm\' }\n                ]\n            },\n            template3: {\n                type: \'NiTemplate\', mode: \'instance\', params: [\n                    { type: \'NiStaticDataResource\', params: [{ ref: \'objfactory\' }, { app:\'VESH.view\',name:\'Logger\' }] },\n                    { ref: \'cm\' }\n                ]\n            },\n            template4: {\n                type: \'NiTemplate\', mode: \'instance\', params: [\n                    { type: \'NiStaticDataResource\', params: [{ ref: \'memfactory\' }, { hosts:\'localhost:11211\',datetime:60000,retries:10,retry:10000,remove:true,failOverServers:[\'192.168.1.106:11211\'] }] },\n                    { ref: \'cm\' }\n                ]\n            },\n            template5: {\n                type: \'NiTemplate\', mode: \'instance\', params: [\n                    { type: \'NiStaticDataResource\', params: [{ ref: \'mongofactory\' }, { hosts:\'mongodb://localhost:27017/myproject\' }] },\n                    { ref: \'cm\' }\n                ]\n            },\n            template: {\n                type: \'NiMultiTemplateDecorator\', mode: \'instance\', params: [\n                    { type: \'NiStaticDataResource\', params: [{ ref: \'mysqlfactory\' }, { host:\'127.0.0.1\',localAddress:\'127.0.0.1\',port:\'3306\',user:\'root2\',password:\'111111\',database:\'cv_zc\',charset:\'utf8_general_ci\', timeout: 60000}] },\n                    { ref: \'cm\' },\n                    { middler: true },\n                    \'Ni\'\n                ]\n            },\n            templatemanager:{\n                type:\'NiTemplateManager\',params:[{middler:true},\'Ni\']\n            }\n        }\n    }\n\n    var C = require(\'gcl/com/coooders/io/config\');\n    var M = require(\'gcl/com/coooders/bean/middler\');\n    C.getApplicationConfigManager((err,conf)=>{\n        var middler = new M.Middler(conf);\n        var temp = middler.getObjectByAppName("Ni","template");\n        temp.execute(\'home.getTopNews\',{limit:10},(err,result)=>{\n            if(result.hasData()){\n                var data = result.last();\n            }\n            middler.setObjectByAppName("Ni","template",temp);\n        })\n    });\n```\n * Ni框架以template为核心，以middler为基础，使用middler创建和使用template对象。\n * template对象拥有execute(cmd,paras,callback(err,result)),commit()方法,和transaction属性(默认false)，result属性\n * 当需要transaction事务执行时，先将transaction设置为true，然后正常调用execute最后再commit即可，特别注意execute中需要使用result.get(index)，而不要使用last方法。template本身的result属性也可以在方法外直接调用。\n * Ni框架本身已经支持MySQL，SQLServer，mongodb, memcache，object对象 五种数据库类型\n * 同时支持Template装饰器类NiTemplateDecorator和NiMultiTemplateDecorator，前者用于支持cmd+\'.Set\'和cmd+\'.Cache\'命令在命令集中自动查找和调用对应sql完成缓存操作。后者在前者基础上支持根据命令集的template属性自动调用不同的template完成缓存和修饰功能。\n\n### ni文件的定义\n```js\n    //ni.npcf文件中Ni部分\n    Ni:{\n      \'ajaxtest11\': { \'command\': \'select * from ac_case limit ?limit1;select ?limit1 as l1;\', \'params\': { \'limit1\': {type:\'Int\'} }, \'template\': \'template1\' },\n      \'ajaxtest22\': { \'command\': \'SELECT top 10 *,@limit1 as "l1" FROM [dbo].[ssidb_User];select @limit1 as "l1";\', \'params\': { \'limit1\':{type:\'Int\'} }, \'template\': \'template2\' },\n      \'ajaxtest33\': { \'command\': \'test\', \'params\': { \'limit1\':{type:\'Int\'} }, \'template\': \'template3\' },\n      \'ajaxtest44\': { \'command\': \'insert into abc<a> (a,cacheValue) values (?a,?cacheValue);\', \'params\': { \'a\':{type:\'Int\'},\'cacheValue\':{type:\'String\'} }, \'template\': \'template5\' },\t\t\n      \'ajaxtest55\': { \'command\': \'select cacheValue from abc<a> where a=?a\', \'params\': { \'a\':{type:\'Int\'},\'cacheValue\':{type:\'String\'} }, \'template\': \'template5\' },\n      \'ajaxtest66\': { \'command\': \'update abc<a> set cacheValue = ?cacheValue where a=?a\', \'params\': { \'a\':{type:\'Int\'},\'cacheValue\':{type:\'String\'} }, \'template\': \'template5\' },\n      \'ajaxtest77\': { \'command\': \'delete from abc<a> where a=?a\', \'params\': { \'a\':{type:\'Int\'},\'cacheValue\':{type:\'String\'} }, \'template\': \'template5\' },\n      \'ajaxtest11.Set\': { \'command\': \'insert into abc<cacheKey> (cacheKey,cacheValue) values (?cacheKey,?cacheValue);\', \'params\': { \'cacheKey\':{type:\'String\'},\'cacheValue\':{type:\'String\'} }, \'template\': \'template4\' },\n      \'ajaxtest11.Cache\': { \'command\': \'select cacheValue from abc<cacheKey> where cacheKey=?cacheKey;\', \'params\': { \'cacheKey\':{type:\'String\'} }, \'template\': \'template4\' }\t\t\n    }\n```\n * Ni节点下的文件定义以 命令:{command:sql,params:{ \'paraname\':{type:\'Int/string/bool/Date/float\'} },template:\'tempatename\'} 为基本格式\n * 其中命令即为sql语句，params定义了参数的类型，template可以输入很多参数但是只转换参数中定义的部分，template参数说明其调用的template名，预留out属性，type属性作为未来支持可出参数和存储过程类型只用（目前调用存储过程应该是exec procedurename)\n * 一般地其sql中定义的前缀？或者@ 由其DBFactory来决定转换方式，Ni框架要求输入的参数都是不带前缀的方便Factory进行转换\n * 在ObjectDB类型的command定义中为对象的方法名 以实现除数据库和缓存之外的对象调用保证Ni框架可以无缝将直连数据改为DB层方式。只要这个方法按顺序接收参数并返回[[{},{}][{},{}]]格式的数据即可。\n * 未来将实现WebSocketDB\n\n### Ni框架的数据源扩展\n```js\n\n  N.NiMySQLDataFactory = function(){\n\t\t\tvar _ = this,__= {};\n\t\t\t{\n\t\t\t\tV.inherit.apply(_,[N.NiDataFactory,[]]);\t\n\t\t\t\t__.MySQLConnection = function(){\n\t\t\t\t\tvar _ = this,__ = {cmds:[]};\n\t\t\t\t\t{ \n\t\t\t\t\t\tV.inherit.apply(_,[N.NiDataConnection,[]]);…………\n\t\t\t\t\t}\n\t\t\t\t\t_.invoke = (cmd,func)=>V.tryC(()=>{\n\t\t\t\t\t\tif(_.transaction){\n\t\t\t\t\t\t\t//事务性处理\n\t\t\t\t\t\t\t__.cmds.push({cmd:cmd,func:func});\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse __.invoke(cmd.command,cmd.params,func);\n\t\t\t\t\t},func);\n\t\t\t\t\t_.commit = function(func){\n\t\t\t\t\t\tif(_.transaction){\n\t\t\t\t\t\t\t……\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse func();\n\t\t\t\t\t};\n\t\t\t\t\t_.open = function(func){\n\t\t\t\t\t\t//https://www.npmjs.com/package/mysql#connection-options\n\t\t\t\t\t\t_.conn = S.createConnection(_.params);\n\t\t\t\t\t\t_.conn.connect(err=>V.tryC2(err,()=>{\n\t\t\t\t\t\t\t__.open();func(null);\n\t\t\t\t\t\t},func));\n\t\t\t\t\t};\n\t\t\t\t\t_.close = function(){\n\t\t\t\t\t\t_.conn.end(err=>{\n\t\t\t\t\t\t\tif(err) V.showException(\'\',err);\n\t\t\t\t\t\t\tdelete __.cmds;\n\t\t\t\t\t\t\t__.close();\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\t\t\t_.createDBConnection = function(){return new __.MySQLConnection();};\n\t\t\t_.backDBConnection = function(conn){conn.close();};\n\t\t};\n\t})(require(\'mysql\'));\n```\n * 基本上新的DBFactory类需要继承N.NiDataFactory 然后实现createDBConnection，backDBConnection方法产生新的DBConnection子类实现open,close,invoke,commit方法调用NiDBCommand的属性来实现对应的功能。\n * 注意Connection的params参数是从Middler框架对Template的定义中merge进入实例的，所以其需要的参数不同的DB是不一样的。\n * DBFactory还继承有createDBCommand方法一般地直接使用原方法里面的NiDataCommand实例来完成。NiDataCommand类拥有connection,params,command参数分别与ni.npcf中定义的命令参数合并后使用，还定义了execute方法用于根据transaction属性，调用connection的invoke方法来具体实现函数体的调用。connection.commit方法由template直接调用\n * Ni框架还定义了数据Connection的保持方式分别是 NiStaticResource,NiInstanceResource,NiPoolResource需要在创建template的时候设置。具体名称一目了然不做深入介绍。\n\n## log\n```js\n  \t//Middler\n    Logger: {type:\'Logger\', mode: \'static\', path: "/com/coooders/io/log",method:"constructorbean",constructorparalength:"1",params: [\n            {type:\'LogRecord\',method:"constructor",params:[0,true,true,false]},\n            {name:\'Lisener\',type:\'LogLisener\',method:"constructor",params:[[\n                {type:\'LogTypeTrigger\',method:\'constructor\',params:[0,3]},\n                {type:\'RegexTrigger\',method:\'constructor\',params:[\' test \']}\n            ],{type:\'LogRecord\',method:"constructor",params:[0,true,true,true]},[{type:\'FileResource\',method:"constructor",params:[\'./log_{name}.log\',\'yyyyMMddHH\']}],true]}            \n        ]\n    }\n```\n * 依托Middler框架，Log框架可以被Middler中直接创建出来，它位于gcl/com/coooders/io/log类中 使用一个LogRecord类作为默认参数类 拥有setLisener方法设置监听器\n * LogRecord的构造函数定义了logtype,needDateTime,needDiscript,needSeparator等几个参数用于生成的每行日志信息的内容\n * 其中LogType类型为 RELEASE,ERROR,WARN,INFO,DEBUG,TEST,ALL 并按照0~255的顺序较低优先级。needDateTime说明是否需要日期打印，needDiscript说明是否需要日志级别打印，needSeparator说明是否需要每行分隔符----------------------.\n * name="Lisener" 设置了Logger.setLisener方法将多个lisener设置成为Logger的监听器\n * 监听器有四个构造参数，一个是触发器列表，其决定何时真实调用Resource进行记录，一个是formatter格式化类实例这里使用一个LogRecord来负责完成toString(logRecord)方法,第三个是多个数据源需要实现write(data)方法来完成真实的日志打印。第四个参数是触发器的共同触发还是仅一个触发即可记录日志。\n * Logger类拥有test,debug,info,error,release等等方法来进行(text,params,num)记录。\n * Logger实例还有一个enable(true/false)方法用于是否启动真实的日志记录功能。当然也有dispose方法用于Middler自动销毁Logger对象\n\n### 如何扩展Logger框架\n\n```js\n  var L = require(\'gcl/com/coooders/io/log\'); \n  var RegexTrigger = function(reg){\n    var _ = this,__={reg:reg};\n    V.inherit.apply(_,[L.ATrigger,[]]);\n    _.test=(record)=>record.data().match(__.reg)!=null || record.params().join(\' \').match(__.reg)!=null;\n  };\n  var FileResource = function(path,nameformat,waittime){\n        var _ = this,__ = {……};\n        V.inherit.apply(_,[L.AResource,[]]);        \n        _.write=data=>{\n            ……\n        };\n        _.close = ()=>{……};\n    };\n```\n  * 很简单继承AResource然后分别实现write和close方法即可\n  * 当然ATrigger的扩展也很简单 继承L.ATrigger实现test(text)=>true/false即可。\n\n## 其它工具类\n```js\n    var N = require(\'gcl/com/coooders/net/tool\');\n    N.request({},(err,data)=>{});\n    N.get(url,(err,data)=>{});\n    N.post(url,json,(err,data)=>{});\n    N.postJson(url,json,(err,data)=>{});\n    N.upload(ulr,filepath,(err,data)=>{});//filepath ;号隔开可上传多个\n    N.download(ulr,filepath,(err,data)=>{});\n    var client = new N.WebClient() //保持会话信息的client拥有如上各种方法\n    var server = N.createReverseProxy(80,[{host:\'192.168.1.104\',port:8001},{host:\'192.168.1.105\',port:8002}])//17行的简单强悍反向代理服务效率非常高。仅用于端口负载不区分协议和网址。调用即启动。\n    var MIME = require(\'gcl/com/coooders/net/mime\');\n    console.log(MIME.txt);//直接属性引用或者调用get(\'.txt\')方法返回MIME类型\n    var I= require(\'gcl/com/coooders/io/tool\');\n    I.copyFile(source,target,(err)=>{});//用于复制文件与linux下使用rename不同，其会先一级一级检查和创建目标文件夹\n    I.moveFile(source,target,(err)=>{});//移动文件\n    I.copyDir(source,target,(err)=>{});//复制文件夹\n    I.moveDir(source,target,(err)=>{});//移动文件夹\n    var checker = I.checker(()=>{/*final*/});//多流终止检查器\n    var stream1 = F.openFileStream(path);\n    var stream2 = F.openFileStream(path2);\n    checker.push(stream1);\n    checker.push(stream2);\n    /*read or write or pipe stream1,stream2*/\n    //checker回调将发生在stream1或者stream2都发生end或者finish事件之后。\n```\n## debugging-and-reporting-problems\n * that is ALL 在 gcl/com/coooders/module或者gcl/com/coooders/thread 还会持续增加一些各种相关算法计算的有趣的类\n * EMail baibing0004@sohu.com\n * QQ 26342049\n## Running tests\n\n```js\n  node gcl/test.js;\n```\n### 配置例子文件\n\ngcl/test.npcf;\ngcl/ni.npcf;\n\n## Todo\n\n* 根据不同DBFactory实现 Procedure与Out参数\n* 考虑Linux下cluster server功能的实现\n\n# redis\n## String\n### redis-string 支持根据key,插入（修改），查询，删除操作，可以同时设置过期时间，支持多条语句，事务\n```sql\n  insert into inserts<key> (key,value) values (?key,?value) datetime 43200000;\n  select value from inserts<key> where key=?key;\n  delete from inserts<key> where key=?key;\n```\n## Hash\n### redis-hash 支持根据key,插入（修改），查询，删除操作,支持多条语句，事务,为区分其它类型，insert,select,delete前面加h\n```sql\n  hinsert into inserth<key> (key,value) values (?key,?value);\n  hselect value from inserth<key> where key=?key;\n  hdelete from inserth<key> where key=?key;\n```\n## sort set\n### redis-sortset 支持根据key(在redis中对应value，不能重复),插入（修改），查询，删除操作,支持多条语句，事务,为区分其它类型，insert,select,delete前面加z\n```sql\n  zinsert into sortset<key> (key,score) values (?key,?score);\n  zselect score from sortset<key> where score=30 order by score desc limit ?limits;//如果要加排序，只能根据score排序，而且有order关键词的话，必需加上where条件（可以随便写时间）；如果不是取区间（根据score来判断），limit后面只能是一个数字，表示要正序或倒序取前N条。\n  zselect score from sortset<key> where score>30 and score<=300 order by score desc limit ?limits,5; //查区间时，必需写区间值（连续），否则不会返回正确结果，zselect后面写score或value即可；limit后面要写两个数值，表示从第几个开始，取N个；order by  表示是要正序取，还是倒序取。 \n  zdelete from sortset<key> where key=?key; \n```\n## List\n### redis-list 支持根据key,插入，删除操作,允许重复值，先进先出规则,支持多条语句，事务,为区分其它类型，insert,delete前面加l\n```sql\n  linsert into alist<key> (key) values (?key);\n  lpopselect value from alist<key> where key=1; //用lpopselect表示出栈操作， where条件可以随便写\n  ldelete from alist<key> where key=?key;  // 删除全部key=?key的数据\n```\n## 后期其它类型与更多操作，进行补充',
21 silly publish   readmeFilename: 'Readme.md',
21 silly publish   _id: 'gcl@0.2.396',
21 silly publish   _shasum: '3d09ac5f302d7c2d003180588433d769cb16f877',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name gcl
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'gcl',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'gcl',
26 silly mapToRegistry   name: 'gcl',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/gcl
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /Users/baibing/.npm/gcl/0.2.396/package.tgz
30 verbose request uri https://registry.npmjs.org/gcl
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 10:27:05
33 verbose request using bearer token for auth
34 verbose request id 811009cd683ebea5
35 http request PUT https://registry.npmjs.org/gcl
36 http 403 https://registry.npmjs.org/gcl
37 verbose headers { date: 'Wed, 05 Aug 2020 02:27:13 GMT',
37 verbose headers   'content-type': 'application/json',
37 verbose headers   'transfer-encoding': 'chunked',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'set-cookie':
37 verbose headers    [ '__cfduid=d6d01b00085abad157905d3298d489d9e1596594428; expires=Fri, 04-Sep-20 02:27:08 GMT; path=/; domain=.npmjs.org; HttpOnly; SameSite=Lax' ],
37 verbose headers   'cf-ray': '5bdd13c928d1999b-LAX',
37 verbose headers   'cf-cache-status': 'DYNAMIC',
37 verbose headers   'cf-request-id': '045e0ab1bd0000999bdd893200000001',
37 verbose headers   'expect-ct': 'max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"',
37 verbose headers   vary: 'Accept-Encoding',
37 verbose headers   server: 'cloudflare',
37 verbose headers   'content-encoding': 'gzip' }
38 verbose request invalidating /Users/baibing/.npm/registry.npmjs.org/gcl on PUT
39 error publish Failed PUT 403
40 verbose stack Error: You cannot publish over the previously published versions: 0.2.396. : gcl
40 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:302:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:290:14)
40 verbose stack     at /usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:216:7
40 verbose stack     at Gunzip.onEnd (zlib.js:131:5)
40 verbose stack     at emitNone (events.js:111:20)
40 verbose stack     at Gunzip.emit (events.js:208:7)
40 verbose stack     at endReadableNT (_stream_readable.js:1064:12)
40 verbose stack     at _combinedTickCallback (internal/process/next_tick.js:138:11)
40 verbose stack     at process._tickCallback (internal/process/next_tick.js:180:9)
41 verbose statusCode 403
42 verbose pkgid gcl
43 verbose cwd /Users/baibing/work/cv_zc/gcl
44 error Darwin 19.5.0
45 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
46 error node v8.11.4
47 error npm  v3.10.10
48 error code E403
49 error You cannot publish over the previously published versions: 0.2.396. : gcl
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
